
Compiling and running t6p10d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.10-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: The identifier after 'program' has no significance within 
     4      -32    a program. Hence this program should be acceptable. } 
     5      -32 {V3.0: New test derived from a processor bug. } 
     6      -32  
     7      -32 program t6p10d3(output); 
     8      -32 var 
     9      -32    t6p10d3: integer; 
    10      -32 begin 
    11        3    t6p10d3 := 1; 
    12        7    writeln(' PASS...6.10-3') 
    13       13 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.10-3

program complete

Compiling and running t6p1p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that matching upper-case and lower-case 
     4      -32    letters are equivalent in identifiers and word-symbols 
     5      -32     if they are permitted. } 
     6      -32 {  This test does not apply to processors with only one 
     7      -32    letter-case. } 
     8      -32 {V3.1: Output of FAIL added. } 
     9      -32  
    10      -32 program t6p1p1d1(output); 
    11      -32 var 
    12      -32    conform  : integer; 
    13      -32  
    14      -32 Begin 
    15        3    BEGIN 
    16        5       Conform:=1; 
    17        7       CONFORM:=2; 
    18        9       If conform = 2 then 
    19       13          writeln(' PASS...6.1.1-1') 
    20       19       else 
    21       22          writeln(' FAIL...6.1.1-1') 
    22       28    enD 
    23       30 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.1-1

program complete

Compiling and running t6p1p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that upper-case and lower-case exponent-markers 
     4      -32    are equivalent. } 
     5      -32 {  This test is not relevant to processors with only 
     6      -32    one letter-case. } 
     7      -32 {V3.0: Reclassified and revised when DP7185 corrected this 
     8      -32    loophole in earlier drafts.  Moved from test 6.1.5-6 to 
     9      -32    current position to correspond to DP7185. } 
    10      -32  
    11      -32 program t6p1p1d2(output); 
    12      -32 var 
    13      -32    i : real; 
    14      -32 begin 
    15        3    { Additionally we assume that equality tests OUGHT to work under 
    16        3      the conditions in this program. } 
    17        3    i:=123e2; 
    18        7    if i = 123E2 then 
    19       11       writeln(' PASS...6.1.1-2') 
    20       17    else 
    21       20       writeln(' FAIL...6.1.1-2') 
    22       26 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.1-2

program complete

Compiling and running t6p1p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that identifiers and word-symbols are correctly 
     4      -32    distinguished in cases where the two are 'close' in a sense which 
     5      -32    has been found to be important. } 
     6      -32 {  Note that this test is relevant even to processors that practice 
     7      -32    8-character identifier truncation, as they still have the 
     8      -32    responsibility to recognize the reserved word set correctly. } 
     9      -32 {V3.0: Comment and program changed due to change in DP7185. 
    10      -32    Test now avoids the loophole which allowed deviant processors 
    11      -32    to ignore it, due to masking effect of identifiers which had 
    12      -32    the same first eight characters. Was previously 6.1.2-3. } 
    13      -32  
    14      -32 program t6p1p2d1(output); 
    15      -32 var 
    16      -32    functionx,functiom:integer; 
    17      -32    iffy:boolean; 
    18      -32  
    19      -32 procedure procedur(var procedurf:integer); 
    20      -36 begin 
    21        3    procedurf := 10 
    22        6 end; 
    23        9  
    24        9 function functio(procedurex:integer):integer; 
    25        9 begin 
    26        9    functio := procedurex 
    27       11 end; 
    28       14  
    29       14 begin 
    30       14    iffy:=true; 
    31       19    procedur(functionx); 
    32       22    functiom := functio(functionx); 
    33       26    if iffy and (functiom = 10) then 
    34       32       writeln(' PASS...6.1.2-1') 
    35       38    else 
    36       41       writeln(' FAIL...6.1.2-1') 
    37       47 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.2-1

program complete

Compiling and running t6p1p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.1.2-2, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This program contains identifiers which some processors may 
     5      -32    disallow because they have extended the word-symbol list. } 
     6      -32 {  Clause 5.1 of the Standard requires processors to be capable 
     7      -32    of accepting all features of the language specified in 
     8      -32    clause 6, which includes the domain of allowed identifiers. 
     9      -32    Clearly, as this is an infinite domain, a test can only 
    10      -32    inspect a few identifiers for conformance. This test has been 
    11      -32    constructed to contain a collection of identifiers that have 
    12      -32    been disallowed by various implementations, or which are 
    13      -32    thought to be under threat of such action. 
    14      -32    Definition 3.2 defines 'extension' as permitting additional 
    15      -32    reserved words; however the wording of clause 5.1 makes it 
    16      -32    clear that the processor must be able to accept all identifiers 
    17      -32    in its Standard-conforming mode; an extended mode may be 
    18      -32    needed to enable extensions that add new reserved words. } 
    19      -32 {V3.1: Comment revised following DIS7185; test extended to include 
    20      -32    Ada words and some others. } 
    21      -32  
    22      -32 program t6p1p2d2(output); 
    23      -32 var 
    24      -32    new:     (dispose,string,oct,hex,origin,address,absolute, 
    25      -32              common,segment); 
    26      -32    forward: (extern,external,fortran,pascal); 
    27      -32    class:   (module,unit,interface,unpacked,implementation, 
    28      -32              variant,assert,powerset,otherwise,uses); 
    29      -32    op:      (le,lt,ge,gt,leq,geq,ne,less,greater,nin,eor, 
    30      -32              impl,equiv); 
    31      -32    ada:     (abort,accept,access,all,at,body,constant,declare,delay, 
    32      -32              delta,digits,elsif,entry,exception,exit,generic,initiate, 
    33      -32              is,loop,null,others,out,package,packing,pragma,private, 
    34      -32              raise,range,renames,restricted,return,reverse,select, 
    35      -32              separate,subtype,task,use,when,xor); 
    36      -32    cobol:   (any,assign,by,call,close,continue,copy,debug,delete, 
    37      -32              display,global,initialize,initial,key,lock,mode,move, 
    38      -32              next,perform,purge,redefines,references,release,reset, 
    39      -32              rewind,run,tape,thru,through,using,zero); 
    40      -32 begin 
    41        3    new := string; 
    42        8    forward := pascal; 
    43       11    class := module; 
    44       14    ada := delay; 
    45       17    cobol := delete; 
    46       20    op := nin; 
    47       23    writeln(' PASS...6.1.2-2') 
    48       29 end. 
abort      unreferenced
access     unreferenced
accept     unreferenced
absolute   unreferenced
any        unreferenced
all        unreferenced
assign     unreferenced
call       unreferenced
by         unreferenced
body       unreferenced
at         unreferenced
assert     unreferenced
close      unreferenced
debug      unreferenced
copy       unreferenced
continue   unreferenced
display    unreferenced
digits     unreferenced
delta      unreferenced
declare    unreferenced
constant   unreferenced
common     unreferenced
address    unreferenced
entry      unreferenced
elsif      unreferenced
exit       unreferenced
exception  unreferenced
equiv      unreferenced
eor        unreferenced
fortran    unreferenced
external   unreferenced
extern     unreferenced
generic    unreferenced
global     unreferenced
greater    unreferenced
geq        unreferenced
gt         unreferenced
ge         unreferenced
impl       unreferenced
initial    unreferenced
initialize unreferenced
initiate   unreferenced
implementa unreferenced
key        unreferenced
is         unreferenced
lock       unreferenced
loop       unreferenced
less       unreferenced
leq        unreferenced
mode       unreferenced
lt         unreferenced
le         unreferenced
interface  unreferenced
move       unreferenced
ne         unreferenced
hex        unreferenced
dispose    unreferenced
next       unreferenced
null       unreferenced
others     unreferenced
packing    unreferenced
package    unreferenced
out        unreferenced
otherwise  unreferenced
perform    unreferenced
purge      unreferenced
release    unreferenced
references unreferenced
redefines  unreferenced
reset      unreferenced
run        unreferenced
rewind     unreferenced
reverse    unreferenced
return     unreferenced
restricted unreferenced
renames    unreferenced
range      unreferenced
raise      unreferenced
private    unreferenced
pragma     unreferenced
powerset   unreferenced
separate   unreferenced
select     unreferenced
segment    unreferenced
origin     unreferenced
oct        unreferenced
tape       unreferenced
through    unreferenced
thru       unreferenced
task       unreferenced
subtype    unreferenced
use        unreferenced
using      unreferenced
uses       unreferenced
zero       unreferenced
xor        unreferenced
when       unreferenced
variant    unreferenced
unpacked   unreferenced
unit       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.2-2

program complete

Compiling and running t6p1p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the implementation of the .. token. } 
     4      -32 {  If the lexical analyser of a Pascal processor is entirely 
     5      -32    separate from the syntax analysis, a three-character 
     6      -32    lookahead may be required to recognize the .. token when it 
     7      -32    immediately follows an integer.  (Processors which know that 
     8      -32    only integers are valid in the context may not need to look 
     9      -32    ahead.)  This test checks that the processor recognizes the 
    10      -32    situation correctly - it occurs frequently elsewhere in the 
    11      -32    package also. } 
    12      -32 {V3.0: New test derived from 6.1.2-8. } 
    13      -32  
    14      -32 program t6p1p2d3(output); 
    15      -32 type 
    16      -32    t = 8..15; 
    17      -32 var 
    18      -32    m : t; 
    19      -32 begin 
    20        3    m := 11; 
    21        8    writeln(' PASS...6.1.2-3') 
    22       14 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.2-3

program complete

Compiling and running t6p1p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that identifiers of length up 
     4      -32    to 70 characters are accepted. } 
     5      -32 {  The Pascal Standard permits identifiers to be of any length. } 
     6      -32 {V3.0: Write on failure modified. } 
     7      -32  
     8      -32 program t6p1p3d1(output); 
     9      -32 const 
    10      -32    i10iiiiiii = 10; 
    11      -32    i20iiiiiiiiiiiiiiiii = 20; 
    12      -32    i30iiiiiiiiiiiiiiiiiiiiiiiiiii = 30; 
    13      -32    i40iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii = 40; 
    14      -32    i50iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii = 50; 
    15      -32    i60iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii = 60; 
    16      -32 i70iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 
    17      -32                                                                 = 70; 
    18      -32  
    19      -32 begin 
    20        3    if i10iiiiiii + i20iiiiiiiiiiiiiiiii + 
    21        8       i30iiiiiiiiiiiiiiiiiiiiiiiiiii + 
    22       10       i40iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii + 
    23       12       i50iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii + 
    24       14       i60iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii + 
    25       16 i70iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii 
    26       16       <> 280 then 
    27       21       writeln(' FAIL...6.1.3-1') 
    28       27    else 
    29       30       writeln(' PASS...6.1.3-1') 
    30       36 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.3-1

program complete

Compiling and running t6p1p3d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.3-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program attempts to identify deviant processors by using 
     4      -32    two identifiers which differ in a way that will slip through 
     5      -32    several implementations. } 
     6      -32 {  The Standard does not set a limit on the length of identifiers, 
     7      -32    nor does it permit processors to treat different identifiers as 
     8      -32    equivalent.  Accordingly, processors that ignore characters in 
     9      -32    identifiers after the eighth (or tenth, sixteenth, etc) do not 
    10      -32    strictly conform to the Standard. } 
    11      -32 {V3.0: Test reclassified to become CONFORMANCE due to 
    12      -32    change in DP7185.  Comment rewritten, and identifiers chosen 
    13      -32    to maximize detection of truncation, hashing, and tail 
    14      -32    preservation.  Was test 5.2.2-1. The test which was previously 
    15      -32    6.1.3-2 has been moved to 6.1.1-1 due to a change in DP7185 
    16      -32    wording. } 
    17      -32  
    18      -32 program t6p1p3d2(output); 
    19      -32 const 
    20      -32    valueofaverylongidentifierwithatail = 10; 
    21      -32  
    22      -32 procedure p; 
    23      -32 var 
    24      -32    valueofaverylongidentifieraithwtail:integer; 
    25      -36 begin 
    26        3    valueofaverylongidentifieraithwtail:=11; 
    27        7    if valueofaverylongidentifierwithatail <> 
    28        8       valueofaverylongidentifieraithwtail then 
    29       11       writeln(' PASS...6.1.3-2') 
    30       17    else 
    31       20       writeln(' FAIL...6.1.3-2') 
    32       26 end; 
    33       29  
    34       29 begin 
    35       29    p 
    36       31 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.3-2

program complete

Compiling and running t6p1p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the conformance of the processor to the 
     4      -32    syntax productions for numbers.  } 
     5      -32 {V3.0: Check on sum of a to j added. Writes modified to conform 
     6      -32    to conventions. } 
     7      -32  
     8      -32 program t6p1p5d1(output); 
     9      -32  
    10      -32 const 
    11      -32    { all cases are legal productions } 
    12      -32    a = 1; 
    13      -32    b = 12; 
    14      -32    c = 0123; 
    15      -32    d = 123.0123; 
    16      -32    e = 123.0123E+2; 
    17      -32    f = 123.0123E-2; 
    18      -32    g = 123.0123E2; 
    19      -32    h = 123E+2; 
    20      -32    i = 0123E-2; 
    21      -32    j = 0123E2; 
    22      -32 var 
    23      -32    sum : real; 
    24      -32  
    25      -32 begin 
    26        3    sum := a + b + c + d + e + f + g + h + i + j; 
    27       26    if (sum > 49470.0) or 
    28       29       (sum < 49460.0) then 
    29       34       writeln(' FAIL...6.1.5-1') 
    30       40    else 
    31       43       writeln(' PASS...6.1.5-1') 
    32       49 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.5-1

program complete

Compiling and running t6p1p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests if very long numbers are permitted. } 
     4      -32 {  The value should be representable despite its length. } 
     5      -32 {V3.0: 4-digit check added. Spaces added in writes. } 
     6      -32  
     7      -32 program t6p1p5d2(output); 
     8      -32 const 
     9      -32    reel = 123.456789012345678901234567890123456789; 
    10      -32 begin 
    11        3    if (reel > 123.5) or 
    12        8       (reel < 123.4) then 
    13       13       writeln(' FAIL...6.1.5-2') 
    14       19    else 
    15       22       writeln(' PASS...6.1.5-2') 
    16       28 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.5-2

program complete

Compiling and running t6p1p6d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.6-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests if labels are permitted. } 
     4      -32 {V3.0: Test revised so as to include the limits of the closed 
     5      -32    interval of 'apparent values' by which labels are distinguished. } 
     6      -32  
     7      -32 program t6p1p6d1(output); 
     8      -32 label 
     9      -32    0,2,3,4,9999; 
    10      -32 var 
    11      -32    x:(a,b,c,d,e,f); 
    12      -32 begin 
    13        3       x := a; 
    14        8       goto 4; 
    15        9    0: x := succ(x); 
    16       14       goto 9999; 
    17       15    2: x := succ(x); 
    18       20       goto 3; 
    19       21    3: x := succ(x); 
    20       26       goto 0; 
    21       27    4: x := succ(x); 
    22       32       goto 2; 
    23       33 9999: x := succ(x); 
    24       38       if x = f then 
    25       42          writeln(' PASS...6.1.6-1') 
    26       48       else 
    27       51          writeln(' FAIL...6.1.6-1') 
    28       57 end. 
e          unreferenced
d          unreferenced
c          unreferenced
b          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.6-1

program complete

Compiling and running t6p1p6d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.6-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that labels are distinguished by their 
     4      -32    apparent integral-value. } 
     5      -32 {V3.0: Test improved, space inserted in write. } 
     6      -32  
     7      -32 program t6p1p6d2(output); 
     8      -32 label 
     9      -32    5,0006,7; 
    10      -32 begin 
    11        3       goto 05; 
    12        6    6: goto 7; 
    13        7    5: goto 6; 
    14        8  007: writeln(' PASS...6.1.6-2') 
    15       14 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.6-2

program complete

Compiling and running t6p1p6d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.6-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains a label made up of five digits and whose 
     4      -32    integral value is less than 10000. } 
     5      -32 {  A label is a digit-sequence whose admissibility is determined 
     6      -32    by its apparent integral value.  Thus the label in this program 
     7      -32    is correct Pascal.  Some deviant processors may limit labels 
     8      -32    to four digits alone, which is not correct. } 
     9      -32 {V3.0: New test derived from DP7185. } 
    10      -32  
    11      -32 program t6p1p6d3(output); 
    12      -32 label 
    13      -32    09876; 
    14      -32 begin 
    15        3    goto 09876; 
    16        6 09876: 
    17        6    writeln(' PASS...6.1.6-3') 
    18       12 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.6-3

program complete

Compiling and running t6p1p7d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.7-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the implementation of the required type-char. } 
     4      -32 {  Character strings consisting of a single character 
     5      -32    are the constants of the standard type char. } 
     6      -32 {V3.0: Writing made to conform to conventions, and comment 
     7      -32    revised. } 
     8      -32  
     9      -32 program t6p1p7d1(output); 
    10      -32 const 
    11      -32    one = '1'; 
    12      -32    two = '2'; 
    13      -32 var 
    14      -32    twotoo : char; 
    15      -32 begin 
    16        3    if (one <> two) and (two = '2') then 
    17       13       begin 
    18       13       twotoo:='2'; 
    19       16       if twotoo = two then 
    20       20          writeln(' PASS...6.1.7-1') 
    21       26       else 
    22       29          writeln(' FAIL...6.1.7-1') 
    23       35       end 
    24       37    else 
    25       38       writeln(' FAIL...6.1.7-1') 
    26       44 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.7-1

program complete

Compiling and running t6p1p7d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.7-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests if strings are permitted up to a length of 
     4      -32    68 characters. } 
     5      -32 {  The Pascal Standard does not place an upper limit 
     6      -32    on the length of strings. } 
     7      -32 {V3.0: Check on value added. Writes revised. } 
     8      -32  
     9      -32 program t6p1p7d2(output); 
    10      -32 type 
    11      -32    string1 = packed array[1..68] of char; 
    12      -32    string2 = packed array[1..33] of char; 
    13      -32 var 
    14      -32    alpha : string1; 
    15      -32    i     : string2; 
    16      -32 begin 
    17        3    alpha:= 
    18        6 'ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP' 
    19        6  ; 
    20        8    i:='IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII'; 
    21       11    if (alpha[9] = i[32]) then 
    22       25       writeln(' PASS...6.1.7-2') 
    23       31    else 
    24       34       writeln(' FAIL...6.1.7-2') 
    25       40 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.7-2

program complete

Compiling and running t6p1p7d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.7-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that a apostrophe-image can appear as a char 
     4      -32    constant and as an element of a string. } 
     5      -32 {V3.0: Program and comment revised to become a more strict 
     6      -32    test for the feature. } 
     7      -32  
     8      -32 program t6p1p7d3(output); 
     9      -32 const 
    10      -32    quote = ''''; 
    11      -32 var 
    12      -32    s:packed array[1..5]of char; 
    13      -32 begin 
    14        3    s:='CAN''T'; 
    15        8    if (s[4]=quote)and(s[5]='T') then 
    16       26       writeln(' PASS...6.1.7-3') 
    17       32    else 
    18       35       writeln(' FAIL...6.1.7-3') 
    19       41 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.7-3

program complete

Compiling and running t6p1p8d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.8-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a comment may be used as a token separator. } 
     4      -32 {V3.0: Comment revised. } 
     5      -32  
     6      -32 program{ Can this be here. }t6p1p8d1(output){ Or here. }; 
     7      -32 var 
     8      -32    i{ control variable }:{ colon }integer{ type }; 
     9      -32 begin 
    10        3    for{ This is a FOR loop }i{ control variable }:={ assignment } 
    11        5       1{ initial }to{ STEP 1 UNTIL }1{ final }do{ GO } 
    12       15          writeln{ write statement }(' PASS...6.1.8-1') 
    13       21 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.8-1

program complete

Compiling and running t6p1p8d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.8-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that an open comment delimiter can appear 
     4      -32    in a comment. } 
     5      -32 {V3.0: Comment revised due to change in DP7185. } 
     6      -32  
     7      -32 program t6p1p8d2(output); 
     8      -32 begin 
     9        3    { Is a { permitted in a comment. } 
    10        3    writeln(' PASS...6.1.8-2') 
    11       11 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.8-2

program complete

Compiling and running t6p1p9d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.9-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the two equivalent forms of comment 
     4      -32    delimiters are implemented correctly. } 
     5      -32 {  It contains four comments with all the permutations of delimiters. 
     6      -32    Processors are not allowed to ignore one form of comment delimiter 
     7      -32    unless they do not have the appropriate characters in their set. } 
     8      -32 {V3.0: Test revised in line with new treatment in DP7185, and moved 
     9      -32    to appropriate section (was test 6.1.8-3). } 
    10      -32  
    11      -32 program t6p1p9d1(output); 
    12      -32 var 
    13      -32    i : 0..4; 
    14      -32 begin 
    15        3    i := 0; 
    16        8    { This is a standard comment } 
    17        8    i := i+1; 
    18       13    (* This is an alternative form *) 
    19       13    i := i+1; 
    20       18    { This, though correct, is a misleading practice *) 
    21       18    i := i+1; 
    22       23    (* These equivalences allow for greater portability } 
    23       23    i := i+1; 
    24       28    if (i=4) then 
    25       32       writeln(' PASS...6.1.9-1') 
    26       38    else 
    27       41       writeln(' FAIL...6.1.9-1') 
    28       47 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.9-1

program complete

Compiling and running t6p1p9d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.9-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test includes a valid comment which may confuse a 
     4      -32    processor with the ( * ) sequence. } 
     5      -32 {  Processors are not allowed to ignore one form of comment 
     6      -32    delimiter unless they do not have the appropriate characters 
     7      -32    in their set. } 
     8      -32 {V3.0: New test derived from DP7185. } 
     9      -32  
    10      -32 program t6p1p9d2(output); 
    11      -32 var 
    12      -32    b:boolean; 
    13      -32 begin 
    14        3    b := false; 
    15        8    (*) 
    16        8    b := true; 
    17        8    (* The above 'statement' is commentary. *) 
    18        8    if b then 
    19       10       writeln(' FAIL...6.1.9-2') 
    20       16    else 
    21       19       writeln(' PASS...6.1.9-2') 
    22       25 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.9-2

program complete

Compiling and running t6p1p9d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.1.9-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test includes a variety of curious comments which 
     4      -32    exercise the lexical analyser of a Pascal processor. } 
     5      -32 {  All are correct Pascal, and the program should be acceptable 
     6      -32    to a Pascal processor. Processors are not allowed 
     7      -32    to ignore one form of comment delimiter unless they 
     8      -32    do not have the appropriate characters in their set. } 
     9      -32 {V3.0: New test derived from DP7185. } 
    10      -32  
    11      -32 program t6p1p9d3(output); 
    12      -32 var 
    13      -32    i:0..10; 
    14      -32 begin 
    15        3    i:=0;    (* *) 
    16        8    i:=i+1;  (* **) 
    17       13    i:=i+1;  (* ***) 
    18       18    i:=i+1;  (* ****) 
    19       23    i:=i+1;  (* (*) 
    20       28    i:=i+1;  {} 
    21       33    i:=i+1;  {******} 
    22       38    i:=i+1;  (**) 
    23       43    i:=i+1;  { {{ (* (*** } 
    24       48    i:=i+1;  (* (*(* { ** ) *) 
    25       53    i:=i+1; 
    26       58    if (((i=10))) then 
    27       62       writeln(' PASS...6.1.9-3') 
    28       68    else 
    29       71       writeln(' FAIL...6.1.9-3') 
    30       77 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.1.9-3

program complete

Compiling and running t6p2p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program includes a sample of each declaration 
     4      -32    part in its minimal form. } 
     5      -32 {  Every possibility is covered elsewhere in the validation suite, 
     6      -32    but the test is made here. } 
     7      -32 {V3.1: Output of FAIL addded. } 
     8      -32  
     9      -32 program t6p2p1d1(output); 
    10      -32 label 
    11      -32    1; 
    12      -32 const 
    13      -32    one = 1; 
    14      -32 type 
    15      -32    small = 1..3; 
    16      -32 var 
    17      -32    tiny : small; 
    18      -32 procedure p(var x : small); 
    19      -36 begin 
    20        3    x:=1 
    21        6 end; 
    22       10 begin 
    23       10    goto 1; 
    24       13 1: p(tiny); 
    25       16    if (tiny = one) then 
    26       20       writeln(' PASS...6.2.1-1') 
    27       26    else 
    28       29       writeln(' FAIL...6.2.1-1') 
    29       35 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.1-1

program complete

Compiling and running t6p2p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that repeated declarations are possible 
     4      -32    in the declaration parts. } 
     5      -32 {  Practically all occurrences will re-appear elsewhere in the 
     6      -32    validation suite. } 
     7      -32 {V3.1: Output of FAIL added. } 
     8      -32  
     9      -32 program t6p2p1d2(output); 
    10      -32 label 
    11      -32    1,2,3; 
    12      -32 const 
    13      -32    one=1; 
    14      -32    two=2; 
    15      -32    three=3; 
    16      -32 type 
    17      -32    small = 1..3; 
    18      -32    larger = 1..10; 
    19      -32    biggest = 1..100; 
    20      -32 var 
    21      -32    tiny : small; 
    22      -32    soso : larger; 
    23      -32    big : biggest; 
    24      -32 procedure p(var x : small); 
    25      -36 begin 
    26        3    x:=1 
    27        6 end; 
    28       10 procedure q(var y : larger); 
    29       10 begin 
    30       10    y:=2 
    31       13 end; 
    32       17 procedure r(var z : biggest); 
    33       17 begin 
    34       17    z:=3 
    35       20 end; 
    36       24 begin 
    37       24    p(tiny); goto 2; 
    38       30 1: r(big); goto 3; 
    39       34 2: q(soso); goto 1; 
    40       38 3: if (tiny=one) and (soso=two) and (big=three) then 
    41       50       writeln(' PASS...6.2.1-2') 
    42       56    else 
    43       59       writeln(' FAIL...6.2.1-2') 
    44       65 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.1-2

program complete

Compiling and running t6p2p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the scope conformance of the processor 
     4      -32    for identifiers. } 
     5      -32 {  The Pascal Standard permits redefinition of an identifier by 
     6      -32    a further defining point in a region (eg. procedure block) 
     7      -32    enclosed by the first scope. This second region 
     8      -32    (and all regions enclosed by it) are excluded from the scope of 
     9      -32    the defining point of the first region. } 
    10      -32 {V3.0: Comment changed - 'identifier' not 'user name'. } 
    11      -32  
    12      -32 program t6p2p2d1(output); 
    13      -32 const 
    14      -32    range = 10; 
    15      -32 var 
    16      -32    i : integer; 
    17      -32    pass : boolean; 
    18      -32 procedure redefine; 
    19      -32 const 
    20      -32    range = -10; 
    21      -32 var 
    22      -32    i : integer; 
    23      -36 begin 
    24        3    i:=range 
    25        5 end; 
    26        8  
    27        8 begin 
    28        8    i:=1; 
    29       12    pass:=false; 
    30       15    redefine; 
    31       17    if range=-10 then 
    32       22       writeln(' FAIL...6.2.2-1') 
    33       28    else 
    34       31       pass:=true; 
    35       34    if i=-10 then 
    36       39       writeln(' FAIL...6.2.2-1') 
    37       45    else 
    38       48       if pass then 
    39       50          writeln(' PASS...6.2.2-1') 
    40       56 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-1

program complete

Compiling and running t6p2p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks if a predefined identifier can be redefined. } 
     4      -32 {V3.0: Failure message altered to give reason. } 
     5      -32  
     6      -32 program t6p2p2d2(output); 
     7      -32 var 
     8      -32    true : boolean; 
     9      -32 begin 
    10        3    true:=false; 
    11        8    if true = false then 
    12       12       writeln(' PASS...6.2.2-2') 
    13       18    else 
    14       21       writeln(' FAIL...6.2.2-2') 
    15       27 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-2

program complete

Compiling and running t6p2p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the scope conformance of pointer-types. } 
     4      -32 {  This program is similar to 6.2.2-6, however a type identifier, 
     5      -32    say T, which specifies the domain of a pointer type ^T, is 
     6      -32    permitted to have its defining point anywhere in the type 
     7      -32    definition part in which ^T occurs. 
     8      -32    Thus in this example, (node=integer)s' scope is excluded from the 
     9      -32    type definition of ouch. } 
    10      -32 {V3.1: Real changed to integer. } 
    11      -32  
    12      -32 program t6p2p2d3(output); 
    13      -32 type 
    14      -32    node = integer; 
    15      -32 procedure ouch; 
    16      -32 type 
    17      -32    p = ^node; 
    18      -32    node = boolean; 
    19      -32 var 
    20      -32    ptr : p; 
    21      -36 begin 
    22        3    new(ptr); 
    23        8    ptr^:=true; 
    24       13    writeln(' PASS...6.2.2-3') 
    25       19 end; 
    26       22 begin 
    27       22    ouch 
    28       24 end. 
node       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-3

program complete

Compiling and running t6p2p2d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that labels are allowed to be redefined 
     4      -32    in a region enclosed by the first scope. } 
     5      -32 {V3.0: Comment changed and write extended. Was previously 6.2.2-5. } 
     6      -32  
     7      -32 program t6p2p2d4(output); 
     8      -32 label 
     9      -32    4,5,6; 
    10      -32 var 
    11      -32    i : integer; 
    12      -32 procedure redefine; 
    13      -32 label 
    14      -32    6,7,8; 
    15      -32 var 
    16      -32    j : integer; 
    17      -36 begin 
    18        3       j:=1; 
    19        7       goto 6; 
    20        8    7: j:=j-1; 
    21       12       goto 8; 
    22       13    6: j:=j+1; 
    23       17       goto 7; 
    24       18    8: j:=0 
    25       18 end; 
    26       21  
    27       21 begin 
    28       21       goto 4; 
    29       24    5: i:=i+1; 
    30       28       goto 6; 
    31       29    4: i:=1; 
    32       31       redefine; 
    33       33       goto 5; 
    34       34    6: if i=1 then 
    35       38          writeln(' FAIL...6.2.2-4') 
    36       44       else 
    37       47          writeln(' PASS...6.2.2-4') 
    38       53 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-4

program complete

Compiling and running t6p2p2d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the scope conformance of records. } 
     4      -32 {  As for the other conformance tests in this section, 
     5      -32    it is possible to redefine a field-identifier of a record within 
     6      -32    the same scope as this record. } 
     7      -32 {V3.0: Failure message altered to give reason. 
     8      -32    Was previously 6.2.2-6. } 
     9      -32  
    10      -32 program t6p2p2d5(output); 
    11      -32 var 
    12      -32    j : integer; 
    13      -32    x : record 
    14      -32          j:integer 
    15      -32        end; 
    16      -32 begin 
    17        3    j:=1; 
    18        7    x.j:=2; 
    19        9    with x do 
    20        9       j:=3; 
    21       11    if (j=1) and (x.j=3) then writeln(' PASS...6.2.2-5') 
    22       25    else  writeln(' FAIL...6.2.2-5') 
    23       34 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-5

program complete

Compiling and running t6p2p2d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a value can be assigned to a 
     4      -32    function-identifier anywhere in the block of the function. } 
     5      -32 {  This test assigns the function-identifier a value from within a 
     6      -32    function declared within the function block, which is allowed. 
     7      -32    Some processors may erroneously restrict such assignments 
     8      -32    to the statement-part of the function-block. } 
     9      -32 {V3.0: Note deleted from PASS message and comment revised. 
    10      -32    Was previously 6.2.2-8. } 
    11      -32  
    12      -32 program t6p2p2d6(output); 
    13      -32 var 
    14      -32    j,k:integer; 
    15      -32  
    16      -32 function f1(i:integer):integer; 
    17      -36    function f2(i:integer):integer; 
    18      -36       function f3(i:integer):integer; 
    19      -36       begin 
    20        3          f3:=1; 
    21        7          f1:=i 
    22        7       end; 
    23       10    begin 
    24       10       f2:=f3(i) 
    25       14    end; 
    26       17 begin 
    27       17    j:=f2(i) 
    28       21 end; 
    29       24  
    30       24 begin 
    31       24    k:=f1(5); 
    32       30    if (k=5) then 
    33       34       writeln(' PASS...6.2.2-6') 
    34       40    else 
    35       43       writeln(' FAIL...6.2.2-6') 
    36       49 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-6

program complete

Compiling and running t6p2p2d7

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.2.2-7, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program hides part of a type while leaving other parts 
     4      -32    accessible. } 
     5      -32 {V3.0: Comment revised and writes rewritten. Was previously 6.2.2-10.} 
     6      -32  
     7      -32 program t6p2p2d7(output); 
     8      -32 type 
     9      -32    colour=(red,amber,green); 
    10      -32 var 
    11      -32    c:colour; 
    12      -32  
    13      -32 procedure nested; 
    14      -32 type 
    15      -32    colour=(purple,red,blue); 
    16      -32 var 
    17      -32    paint:colour; 
    18      -36 begin 
    19        3    c:=green; 
    20        8    paint:=red; 
    21       11    c:=pred(amber); 
    22       16    if (ord(c)<>0) or (ord(paint)<>1) then 
    23       26       writeln(' FAIL...6.2.2-7') 
    24       32 end; 
blue       unreferenced
purple     unreferenced

    25       35  
    26       35 begin 
    27       35    nested; 
    28       39    if (c<> red) then 
    29       43       writeln(' FAIL...6.2.2-7') 
    30       49    else 
    31       52       writeln(' PASS...6.2.2-7') 
    32       58 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.2.2-7

program complete

Compiling and running t6p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.3-1, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This program exhibits all legal productions for a constant 
     5      -32    in a constant-definition. } 
     6      -32 {V3.0: Added value check, and changed identifier 'minustentoo' 
     7      -32    to 'minustoo' so as to avoid non-uniqueness in first 
     8      -32    eight characters. } 
     9      -32  
    10      -32 program t6p3d1(output); 
    11      -32 const 
    12      -32    ten = 10; 
    13      -32    minusten = -10; 
    14      -32    minustoo = -ten; 
    15      -32    decade = ten; 
    16      -32    dot = '.'; 
    17      -32    stars = '****'; 
    18      -32    on = true; 
    19      -32    pi = 3.1415926; 
    20      -32    minuspi = - pi; 
    21      -32 begin 
    22        3    if (ten + minusten + decade + minustoo = 0) and 
    23       14       (dot = '.') and (stars = '****') and 
    24       22       (on =true) and (abs(pi+minuspi) < 0.001) then 
    25       34       writeln(' PASS...6.3-1') 
    26       40    else 
    27       43       writeln(' FAIL...6.3-1') 
    28       49 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.3-1

program complete

Compiling and running t6p4p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests to see that pointer-types can be 
     4      -32    declared anywhere in the type-definition-part. } 
     5      -32 {  This freedom is explicitly permitted in the Standard. } 
     6      -32 {V3.1: Real changed to integer. } 
     7      -32  
     8      -32 program t6p4p1d1(output); 
     9      -32 type 
    10      -32    ptr1     = ^ polar; 
    11      -32    polar    = record r,theta : integer end; 
    12      -32    purelink = ^ purelink; 
    13      -32    ptr2     = ^ person; 
    14      -32    ptr3     = ptr2; 
    15      -32    person   = record 
    16      -32                   mother,father : ptr2; 
    17      -32                   firstchild    : ptr2; 
    18      -32                   nextsibling   : ptr3 
    19      -32               end; 
    20      -32 begin 
    21        3    writeln(' PASS...6.4.1-1') 
    22       11 end. 
ptr1       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.1-1

program complete

Compiling and running t6p4p2p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that the standard simple types have all 
     4      -32    been implemented. } 
     5      -32 {  They are denoted by predefined type identifiers. } 
     6      -32 {V3.0: Value check added. Comment and write in case 
     7      -32    of failure revised. } 
     8      -32  
     9      -32 program t6p4p2p2d1(output); 
    10      -32 var 
    11      -32    a : integer; 
    12      -32    b : real; 
    13      -32    c : boolean; 
    14      -32    d : char; 
    15      -32 begin 
    16        3    a:=6*2+3; 
    17       11    b:=3.14159*2; 
    18       16    c:=(a=15); 
    19       21    d:='Z'; 
    20       24    if (a = 15) and (b < 6.284) and (b > 6.282) 
    21       34       and (c =true) and (d = 'Z') then 
    22       44       writeln(' PASS...6.4.2.2-1') 
    23       50    else 
    24       53       writeln(' FAIL...6.4.2.2-1') 
    25       59 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-1

program complete

Compiling and running t6p4p2p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the values within the range 
     4      -32    -maxint..+maxint are values of integer type. } 
     5      -32 {V3.0: Value check added. Write in case of failure revised. } 
     6      -32  
     7      -32 program t6p4p2p2d2(output); 
     8      -32 type 
     9      -32    natural = 0..maxint; 
    10      -32    whole = -maxint..+maxint; 
    11      -32 var 
    12      -32    i : natural; 
    13      -32    j : whole; 
    14      -32    k : integer; 
    15      -32 begin 
    16        3    i:=maxint; 
    17        8    j:=-maxint; 
    18       12    k:=maxint; 
    19       14    if (i = k) and (k = -j) and (k > j) then 
    20       27       writeln(' PASS...6.4.2.2-2') 
    21       33    else 
    22       36       writeln(' FAIL...6.4.2.2-2') 
    23       42 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-2

program complete

Compiling and running t6p4p2p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the required constant identifiers, true 
     4      -32    and false, have been correctly enumerated. } 
     5      -32 {  The Pascal Standard states that type boolean shall have 
     6      -32    enumeration values which are denoted by false and true, such 
     7      -32    that false is the predecessor of true.  It also states that 
     8      -32    the ord of these values are 0 and 1 respectively. } 
     9      -32 {V3.1: Comment changed. } 
    10      -32  
    11      -32 program t6p4p2p2d3(output); 
    12      -32 begin 
    13        3    if (pred(true)=false) and (succ(false)=true) and 
    14       16       (ord(false)=0) and (ord(true)=1) and 
    15       26       (false < true)  and (ord(not false)=1) then 
    16       37       writeln(' PASS...6.4.2.2-3') 
    17       43    else 
    18       46       writeln(' FAIL...6.4.2.2-3') 
    19       52 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-3

program complete

Compiling and running t6p4p2p2d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the character values representing 
     4      -32    the digits 0..9 are ordered and contiguous. } 
     5      -32 {V3.0: Write in case of failure revised. } 
     6      -32  
     7      -32 program t6p4p2p2d4(output); 
     8      -32 var 
     9      -32    a,b : boolean; 
    10      -32 begin 
    11        3    a:=(succ('0') = '1') and 
    12       10       (succ('1') = '2') and 
    13       16       (succ('2') = '3') and 
    14       22       (succ('3') = '4') and 
    15       28       (succ('4') = '5') and 
    16       34       (succ('5') = '6') and 
    17       40       (succ('6') = '7') and 
    18       46       (succ('7') = '8') and 
    19       52       (succ('8') = '9') ; 
    20       60    b:=('0' < '1') and 
    21       63       ('1' < '2') and 
    22       67       ('2' < '3') and 
    23       71       ('3' < '4') and 
    24       75       ('4' < '5') and 
    25       79       ('5' < '6') and 
    26       83       ('6' < '7') and 
    27       87       ('7' < '8') and 
    28       91       ('8' < '9') ; 
    29       97    if a and b then 
    30      101       writeln(' PASS...6.4.2.2-4') 
    31      107    else 
    32      110       writeln(' FAIL...6.4.2.2-4') 
    33      116 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-4

program complete

Compiling and running t6p4p2p2d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the ordering of the upper-case letters A-Z. } 
     4      -32 {  The Pascal Standard states that the upper-case letters A-Z are 
     5      -32    ordered, but not necessarily contiguous. 
     6      -32    This program determines if this is so, and prints 
     7      -32    a message as to whether the processor passes or not. 
     8      -32    The test is not relevant to processors that do not implement 
     9      -32    a set of upper-case letters. } 
    10      -32 {V3.0: Comment edited to reflect implementation-defined status 
    11      -32    of upper-case letters.  Write on failure revised. } 
    12      -32  
    13      -32 program t6p4p2p2d5(output); 
    14      -32 begin 
    15        3    if ('A' < 'B') and ('B' < 'C') and ('C' < 'D') and 
    16       16       ('D' < 'E') and ('E' < 'F') and ('F' < 'G') and 
    17       28       ('G' < 'H') and ('H' < 'I') and ('I' < 'J') and 
    18       40       ('J' < 'K') and ('K' < 'L') and ('L' < 'M') and 
    19       52       ('M' < 'N') and ('N' < 'O') and ('O' < 'P') and 
    20       64       ('P' < 'Q') and ('Q' < 'R') and ('R' < 'S') and 
    21       76       ('S' < 'T') and ('T' < 'U') and ('U' < 'V') and 
    22       88       ('V' < 'W') and ('W' < 'X') and ('X' < 'Y') and 
    23      100       ('Y' < 'Z') then 
    24      105       writeln(' PASS...6.4.2.2-5') 
    25      111    else 
    26      114       writeln(' FAIL...6.4.2.2-5') 
    27      120 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-5

program complete

Compiling and running t6p4p2p2d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the ordering of the lower-case letters a-z. } 
     4      -32 {  The Pascal Standard states that the lower-case letters a-z are 
     5      -32    ordered, but not necessarily contiguous. 
     6      -32    This program determines if this is so, and prints 
     7      -32    a message as to whether the processor passes or not. 
     8      -32    The test is not relevant to processors that do not implement 
     9      -32    a set of lower-case letters. } 
    10      -32 {V3.0: Comment edited to reflect implementation-defined status 
    11      -32    of lower-case letters.  Write on failure revised. } 
    12      -32  
    13      -32 program t6p4p2p2d6(output); 
    14      -32 begin 
    15        3    if ('a' < 'b') and ('b' < 'c') and ('c' < 'd') and 
    16       16       ('d' < 'e') and ('e' < 'f') and ('f' < 'g') and 
    17       28       ('g' < 'h') and ('h' < 'i') and ('i' < 'j') and 
    18       40       ('j' < 'k') and ('k' < 'l') and ('l' < 'm') and 
    19       52       ('m' < 'n') and ('n' < 'o') and ('o' < 'p') and 
    20       64       ('p' < 'q') and ('q' < 'r') and ('r' < 's') and 
    21       76       ('s' < 't') and ('t' < 'u') and ('u' < 'v') and 
    22       88       ('v' < 'w') and ('w' < 'x') and ('x' < 'y') and 
    23      100       ('y' < 'z') then 
    24      105       writeln(' PASS...6.4.2.2-6') 
    25      111    else 
    26      114       writeln(' FAIL...6.4.2.2-6') 
    27      120 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-6

program complete

Compiling and running t6p4p2p2d7

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.2-7, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test explores the use of type-char as an enumeration-type. } 
     4      -32 {  The Standard specifies that the ord of the first character in 
     5      -32    the char type shall be zero, and that the rest shall have 
     6      -32    consecutive ordinal values.  However, there is no easy way 
     7      -32    to find the last character in the set, and the function 
     8      -32    maxord is an approximation to this.  It uses known facts about 
     9      -32    character sets to guess at the set and make a first attempt 
    10      -32    at finding this value.  If a processor does not comply with the 
    11      -32    assumptions, maxord may have to be recoded to return the correct 
    12      -32    value for that processor. 
    13      -32    The test uses type  char in a number of enumeration contexts. } 
    14      -32 {V3.1: Unnecessary defect removed. } 
    15      -32  
    16      -32 program t6p4p2p2d7(output); 
    17      -32 type 
    18      -32    atype=array[char]of char; 
    19      -32    natural=0..maxint; 
    20      -32 var 
    21      -32    ordi:natural; 
    22      -32    maxchar:char; 
    23      -32    a,b:atype; 
    24      -32    ch:char; 
    25      -32    ok:boolean; 
    26      -32  
    27      -32 function maxord:natural; 
    28      -32    function max(a,b:char):char; 
    29      -40    begin 
    30        3       if a>b then max:=a else max:=b 
    31       13    end; { of max } 
    32       17 begin 
    33       17    if ord('9') = 249 then 
    34       24       { EBCDIC } maxord:=255 
    35       24    else if ord('9') = 57 then 
    36       33       { ASCII/ISO } maxord:=127 
    37       33    else 
    38       37       { UNKNOWN char set } 
    39       37       maxord:=ord(max(';',max('Z',max('z','9')))) 
    40       54 end; { of maxord } 
    41       57  
    42       57 begin 
    43       57    ok := true; 
    44       62    maxchar := chr(maxord); 
    45       67    for ordi:=0 to ord(maxchar) do 
    46       79       a[chr(ordi)]:=chr(ordi); 
    47      100    for ch := chr (0) to maxchar do 
    48      114       b [ch] := a [ch]; 
    49      139    for ch:=chr(0) to maxchar do 
    50      153       if b[ch] <> ch then ok:=false; 
    51      177    for ordi:=1 to ord(maxchar) do 
    52      189       if (pred(chr(ordi)) <> chr(pred(ordi))) or 
    53      197       (succ(chr(pred(ordi))) <> chr(ordi)) then 
    54      207          ok := false; 
    55      221    if ok then 
    56      223       writeln(' PASS...6.4.2.2-7') 
    57      229    else 
    58      232       writeln(' FAIL...6.4.2.2-7') 
    59      238 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-7

program complete

Compiling and running t6p4p2p2d8

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.2.2-8, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that ord of an integer is the integer 
     5      -32    itself. } 
     6      -32 {V3.0: New test. } 
     7      -32  
     8      -32 program t6p4p2p2d8(output); 
     9      -32 var 
    10      -32    result:(pass,fail); 
    11      -32    i:integer; 
    12      -32 begin 
    13        3    result:=pass; 
    14        8    for i:=-100 to +100 do 
    15       19       if ord(i) <> i then result:=fail; 
    16       37    if (ord(-0) <> 0) or (ord(maxint) <> maxint) or 
    17       47       (ord(-maxint) <> -maxint) then result := fail; 
    18       58    if result=pass then 
    19       62       writeln(' PASS...6.4.2.2-8') 
    20       68    else 
    21       71       writeln(' FAIL...6.4.2.2-8') 
    22       77 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.2-8

program complete

Compiling and running t6p4p2p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.2.3-1, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This program checks the possible syntax productions for 
     5      -32    enumerated types. } 
     6      -32 {V3.0: Comment revised. } 
     7      -32  
     8      -32 program t6p4p2p3d1(output); 
     9      -32 type 
    10      -32    singularitytype = (me); 
    11      -32    switch          = (on,off); 
    12      -32    maritalstatus   = (married,divorced,widowed,single); 
    13      -32    colour          = (red,pink,orange,yellow,green); 
    14      -32    cardsuit        = (heart,diamond,spade,club); 
    15      -32 var 
    16      -32    i : singularitytype; 
    17      -32 begin 
    18        3    i:=me; 
    19        8    writeln(' PASS...6.4.2.3-1') 
    20       14 end. 
club       unreferenced
cardsuit   unreferenced
diamond    unreferenced
colour     unreferenced
heart      unreferenced
green      unreferenced
divorced   unreferenced
married    unreferenced
maritalsta unreferenced
off        unreferenced
orange     unreferenced
pink       unreferenced
red        unreferenced
single     unreferenced
on         unreferenced
spade      unreferenced
yellow     unreferenced
widowed    unreferenced
switch     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.3-1

program complete

Compiling and running t6p4p2p3d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.3-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks ordering of an enumerated-type. } 
     4      -32 {  The Pascal Standard states that the ordering of the values 
     5      -32    of the enumerated-type is determined by the sequence in which 
     6      -32    the constants are listed, the first being before the last. 
     7      -32    The Standard also specifies the ordinal values. } 
     8      -32 {V3.0: Added succ(succ(succ(club))). Comment and writing 
     9      -32    revised to conform to conventions, and test revised to check 
    10      -32    that the ordinal values also conform. } 
    11      -32  
    12      -32 program t6p4p2p3d2(output); 
    13      -32 var 
    14      -32    suit : (club,spade,diamond,heart); 
    15      -32    a    : boolean; 
    16      -32    b    : boolean; 
    17      -32    c    : boolean; 
    18      -32 begin 
    19        3    a:=(succ(club)=spade) and 
    20       10       (succ(spade)=diamond) and 
    21       16       (succ(diamond)=heart) and 
    22       22       (succ(succ(succ(club))) = heart); 
    23       34  
    24       34    b:=(club < spade) and 
    25       37       (spade < diamond) and 
    26       41       (diamond < heart); 
    27       47  
    28       47    c:=(ord(club)=0) and (ord(spade)=1) and 
    29       56       (ord(diamond)=2) and (ord(heart)=3); 
    30       68  
    31       68    if a and b and c then 
    32       74       writeln(' PASS...6.4.2.3-2') 
    33       80    else 
    34       83       writeln(' FAIL...6.4.2.3-2') 
    35       89 end. 
suit       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.3-2

program complete

Compiling and running t6p4p2p3d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.3-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program illustrates the difficulties of when a type is 
     4      -32    defined. } 
     5      -32 {  It is valid Pascal, since the uses follow 
     6      -32    the defining point. } 
     7      -32 {V3.0: New test. } 
     8      -32  
     9      -32 program t6p4p2p3d3(output); 
    10      -32 var 
    11      -32    x: array [(male, female), male .. female ] of integer; 
    12      -32 begin 
    13        3 x[male, male] := 1; 
    14       16 if x[pred(female), pred(female)] <> 1 then 
    15       33    writeln(' FAIL...6.4.2.3-3') 
    16       39 else 
    17       42    writeln(' PASS...6.4.2.3-3') 
    18       48 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.3-3

program complete

Compiling and running t6p4p2p3d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.3-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program illustrates the difficulties of when a type 
     4      -32    is defined. } 
     5      -32 {  Similar to 6.4.2.3-3, but for records rather than arrays. } 
     6      -32 {V3.0: New test. } 
     7      -32  
     8      -32 program t6p4p2p3d4(output); 
     9      -32 var 
    10      -32    x: record 
    11      -32       a: (male, female); 
    12      -32       b: male .. female 
    13      -32       end; 
    14      -32 begin 
    15        3    x.a := pred(female); 
    16       10    x.b := succ(x.a); 
    17       15    if pred(x.b) <> male then 
    18       21       writeln(' FAIL...6.4.2.3-4') 
    19       27    else 
    20       30       writeln(' PASS...6.4.2.3-4') 
    21       36 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.3-4

program complete

Compiling and running t6p4p2p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that a type may be defined as a subrange 
     4      -32    of another ordinal-type (host-type). } 
     5      -32 {V3.0: Comment revised. } 
     6      -32  
     7      -32 program t6p4p2p4d1(output); 
     8      -32 type 
     9      -32    colour      = (red,pink,orange,yellow,green,blue); 
    10      -32    somecolour  = red..green; 
    11      -32    century     = 1..100; 
    12      -32    twentyone   = -10..+10; 
    13      -32    digits      = '0'..'9'; 
    14      -32    zero        = 0..0; 
    15      -32    logical     = false..true; 
    16      -32 var 
    17      -32    tf : logical; 
    18      -32  
    19      -32 begin 
    20        3    tf:=true; 
    21        8    writeln(' PASS...6.4.2.4-1') 
    22       14 end. 
century    unreferenced
blue       unreferenced
digits     unreferenced
orange     unreferenced
pink       unreferenced
twentyone  unreferenced
somecolour unreferenced
zero       unreferenced
yellow     unreferenced
colour     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.4-1

program complete

Compiling and running t6p4p2p4d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.2.4-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the ordinal values of a 
     4      -32    variable of subrange-type correspond to the host-type. } 
     5      -32 {  Even if a variable is of a subrange type, the values it may 
     6      -32    take on are of its host enumeration type. } 
     7      -32 {V3.0: New test to check ord on subranges. } 
     8      -32  
     9      -32 program t6p4p2p4d2(output); 
    10      -32 type 
    11      -32    chesstype=(pawn,knight,bishop,castle,queen,king); 
    12      -32    piece=knight..king; 
    13      -32    century=1901..2000; 
    14      -32 var 
    15      -32    year:century; 
    16      -32    which:piece; 
    17      -32 begin 
    18        3    year:=1980; 
    19        8    which:=knight; 
    20       11    if (ord(year)=1980) and (ord(which)=1) then 
    21       21       writeln(' PASS...6.4.2.4-2') 
    22       27    else 
    23       30       writeln(' FAIL...6.4.2.4-2') 
    24       36 end. 
castle     unreferenced
bishop     unreferenced
queen      unreferenced
pawn       unreferenced
chesstype  unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.2.4-2

program complete

Compiling and running t6p4p3p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that array, set, file and 
     4      -32    record types can be declared as packed. } 
     5      -32 {V3.0: Comment revised. Was previously 6.4.3.1-3. } 
     6      -32  
     7      -32 program t6p4p3p1d1(output); 
     8      -32 type 
     9      -32    urray    = packed array[1..10] of char; 
    10      -32    rekord   = packed record 
    11      -32                   bookcode : integer; 
    12      -32                   authorcode : integer 
    13      -32               end; 
    14      -32    fyle     = packed file of urray; 
    15      -32    card     = (heart,diamond,spade,club); 
    16      -32    sett     = packed set of card; 
    17      -32 begin 
    18        3    writeln(' PASS...6.4.3.1-1') 
    19       11 end. 
club       unreferenced
diamond    unreferenced
heart      unreferenced
fyle       unreferenced
sett       unreferenced
spade      unreferenced
rekord     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.1-1

program complete

Compiling and running t6p4p3p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks if packing is propagated throughout 
     4      -32    an array with multiple-indices. } 
     5      -32 {  The Pascal Standard specifies that the packed prefix in front 
     6      -32    of a multiple-index array-type declaration is propagated 
     7      -32    to all levels of the array.  This is difficult to test 
     8      -32    except by exercising deviance tests on the processor by 
     9      -32    attempting to use such a packed object in unsuitable 
    10      -32    contexts.  However, in the case of arrays of char the 
    11      -32    residual structural compatibility allows a conformance test to 
    12      -32    be designed. } 
    13      -32 {V3.0: New test to test packing propagation. } 
    14      -32  
    15      -32 program t6p4p3p1d2(output); 
    16      -32 type 
    17      -32    table=packed array[0..99,1..12] of char; 
    18      -32 var 
    19      -32    t:table; 
    20      -32    i:0..99; 
    21      -32 begin 
    22        3    for i:=0 to 99 do t[i]:='123456789012'; 
    23       33    writeln(' PASS...6.4.3.1-2') 
    24       39 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.1-2

program complete

Compiling and running t6p4p3p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests all the valid productions for an 
     4      -32    array declaration from the syntax. } 
     5      -32 {V3.0: Comment revised. Three-dimensional array added. } 
     6      -32  
     7      -32 program t6p4p3p2d1(output); 
     8      -32 type 
     9      -32    t1          = 0..1; 
    10      -32    cards       = (two,three,four,five,six,seven,eight,nine,ten,jack, 
    11      -32                   queen,king,ace); 
    12      -32    suit        = (heart,diamond,spade,club); 
    13      -32    hand        = array[cards] of suit; 
    14      -32    picturecards= array[jack..king] of suit; 
    15      -32    played      = array[cards] of array[heart..diamond] of boolean; 
    16      -32    playedtoo   = array[cards,heart..diamond] of boolean; 
    17      -32    a3          = array[t1] of array[t1] of array[t1] of boolean; 
    18      -32 begin 
    19        3    writeln(' PASS...6.4.3.2-1') 
    20       11 end. 
a3         unreferenced
ace        unreferenced
club       unreferenced
eight      unreferenced
five       unreferenced
hand       unreferenced
playedtoo  unreferenced
played     unreferenced
picturecar unreferenced
queen      unreferenced
nine       unreferenced
seven      unreferenced
spade      unreferenced
six        unreferenced
four       unreferenced
ten        unreferenced
three      unreferenced
two        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.2-1

program complete

Compiling and running t6p4p3p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that an index-type may be an 
     4      -32    ordinal-type. } 
     5      -32 {  BOOLEAN, CHAR, INTEGER and some user-defined type 
     6      -32    names can be used as an index type. 
     7      -32    This program tests if the processor will permit these 
     8      -32    except for INTEGER, which is included in a separate program. } 
     9      -32 {V3.0: Value check added. Write revised. 
    10      -32    Was previously 6.4.3.2-3 } 
    11      -32  
    12      -32 program t6p4p3p2d2(output); 
    13      -32 type 
    14      -32    digits   = '0'..'9'; 
    15      -32    colour   = (red,pink,orange,yellow); 
    16      -32    intensity   = (bright,dull); 
    17      -32 var 
    18      -32    alltoo   : array[boolean] of boolean; 
    19      -32    numeric  : array[digits] of integer; 
    20      -32    colours  : array[colour] of intensity; 
    21      -32    code     : array[char] of digits; 
    22      -32 begin 
    23        3    numeric['0']:=0; 
    24       13    colours[pink]:=bright; 
    25       21    alltoo[true]:=false; 
    26       29    code['A']:='0'; 
    27       37    if (numeric['0'] = 0) and (colours[pink] = bright) and 
    28       55       (alltoo[true] = false) and (code['A'] = '0') then 
    29       74       writeln(' PASS...6.4.3.2-2') 
    30       80    else 
    31       83       writeln(' FAIL...6.4.3.2-2') 
    32       89 end. 
dull       unreferenced
orange     unreferenced
yellow     unreferenced
red        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.2-2

program complete

Compiling and running t6p4p3p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that an array can have extreme index 
     4      -32    values as its first (and only in this case) valid value. } 
     5      -32 {V3.0: New test. } 
     6      -32  
     7      -32 program t6p4p3p2d3(output); 
     8      -32 var 
     9      -32    small: array[ -maxint .. -maxint] of integer; 
    10      -32    large: array[  maxint ..  maxint] of integer; 
    11      -32 begin 
    12        3    small[-maxint] := 1; 
    13       13    large[maxint] := small[-maxint]; 
    14       26    if large[maxint] <> 1 then 
    15       35       writeln(' FAIL...6.4.3.2-3') 
    16       41    else 
    17       44       writeln(' PASS...6.4.3.2-3') 
    18       50 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.2-3

program complete

Compiling and running t6p4p3p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests that all valid productions from 
     4      -32    the syntax for record-types are accepted by this processor. } 
     5      -32 {V3.0: According to DP7185 'd = record ; end' is syntactically 
     6      -32    incorrect. Test the empty record. Also, record 
     7      -32    definition nesting to three deep included. } 
     8      -32  
     9      -32 program t6p4p3p3d1(output); 
    10      -32 type 
    11      -32    string   = packed array[1..25] of char; 
    12      -32    married  = (false,true); 
    13      -32    shape    = (triangle,rectangle,square,circle); 
    14      -32    angle    = 0..90; 
    15      -32    a        = record 
    16      -32                year : integer; 
    17      -32                month : 1..12; 
    18      -32                day : 1..31 
    19      -32               end; 
    20      -32    b        = record 
    21      -32                name,firstname : string; 
    22      -32                age : 0..99; 
    23      -32                case  married of 
    24      -32                   true: (spousename : string); 
    25      -32                   false : () 
    26      -32               end; 
    27      -32    c        = record 
    28      -32                case s : shape of 
    29      -32                   triangle : (side : real; 
    30      -32                               inclination,angle1,angle2 : angle); 
    31      -32                   square,rectangle : (side1,side2 : real; 
    32      -32                                       skew,angle3 : angle); 
    33      -32                   circle : (diameter : real) 
    34      -32               end; 
    35      -32    d        = record 
    36      -32               end; 
    37      -32    e        = record 
    38      -32                 case married of 
    39      -32                   true : (spousename : string); 
    40      -32                   false : () 
    41      -32                 end; 
    42      -32    f        = record 
    43      -32                i1 : integer; 
    44      -32                r1 : record 
    45      -32                      i2 : integer; 
    46      -32                      r2 : record 
    47      -32                            i3 : integer 
    48      -32                           end 
    49      -32                     end 
    50      -32               end; 
    51      -32 begin 
    52        3    writeln(' PASS...6.4.3.3-1') 
    53       11 end. 
a          unreferenced
c          unreferenced
b          unreferenced
f          unreferenced
e          unreferenced
d          unreferenced
married    unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-1

program complete

Compiling and running t6p4p3p3d17

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-17, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains a variant-part with only one variant. } 
     4      -32 {V3.1: New test from BNI. } 
     5      -32  
     6      -32 program t6p4p3p3d17(output); 
     7      -32 type 
     8      -32     one = 1..1; 
     9      -32     two = (a,b); 
    10      -32 var 
    11      -32     rec1:record 
    12      -32             case tag:one of 
    13      -32                1:(i:integer); 
    14      -32          end; 
    15      -32     rec2:record 
    16      -32             case tag:two of 
    17      -32                a,b:(i:integer); 
    18      -32          end; 
    19      -32     rec3:record 
    20      -32             case two of 
    21      -32                a,b:(i:integer); 
    22      -32          end; 
    23      -32 begin 
    24        3     rec1.tag:=1; 
    25        9     rec1.i:=5; 
    26       15     rec2.tag:=a; 
    27       19     rec2.i:=5; 
    28       26     rec3.i:=5; 
    29       37     writeln (' PASS...6.4.3.3-17') 
    30       43 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-17

program complete

Compiling and running t6p4p3p3d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a field-identifier can be redefined. } 
     4      -32 {  The Pascal Standard states that the occurrence of a field 
     5      -32    identifier within the identifier list of a record section is 
     6      -32    its defining point as a field identifier for the record 
     7      -32    type in which the record section occurs. 
     8      -32    This should allow redefinition of a field identifier in another 
     9      -32    type declaration. } 
    10      -32 {V3.0: Comment revised, and test code added. } 
    11      -32  
    12      -32 program t6p4p3p3d2(output); 
    13      -32 type 
    14      -32    a     = record 
    15      -32             realpart : real; 
    16      -32             imagpart : real 
    17      -32            end; 
    18      -32    realpart = (notimaginary,withbody,withsubstance); 
    19      -32 var 
    20      -32    var1 : a; 
    21      -32    var2 : realpart; 
    22      -32 begin 
    23        3    with var1 do 
    24        5       realpart := 1.0; 
    25        7    var2 := withbody; 
    26       10    if (var1.realpart = 1.0) and (var2 = withbody) then 
    27       18       writeln(' PASS...6.4.3.3-2') 
    28       24    else 
    29       27       writeln(' FAIL...6.4.3.3-2') 
    30       33 end. 
notimagina unreferenced
withsubsta unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-2

program complete

Compiling and running t6p4p3p3d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that an empty record can be declared. } 
     4      -32 {  Since this is the limiting case of a structured-type, some 
     5      -32    processors may mis-handle it.  The following program 
     6      -32    illustrates one of the uses. } 
     7      -32 {V3.0: Comment revised and test slightly extended. } 
     8      -32  
     9      -32 program t6p4p3p3d3(output); 
    10      -32 type 
    11      -32    statuskind  = (defined,undefined); 
    12      -32    emptykind   = record end; 
    13      -32 var 
    14      -32    empty : emptykind; 
    15      -32    number: record 
    16      -32             case status:statuskind of 
    17      -32                defined  : (i : integer); 
    18      -32                undefined: (e : emptykind) 
    19      -32             end; 
    20      -32 begin 
    21        3    with number do begin 
    22        5       status:=defined; 
    23        9       i:=7 
    24        9    end; 
    25       11    with number do begin 
    26       11       status:=undefined 
    27       12    end; 
    28       15    writeln(' PASS...6.4.3.3-3') 
    29       21 end. 
empty      unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-3

program complete

Compiling and running t6p4p3p3d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a tag-field may be redefined 
     4      -32    elsewhere in the declaration part. } 
     5      -32 {  Test similar to 6.4.3.3-2. } 
     6      -32 {V3.0: Comment revised, and value test added. } 
     7      -32  
     8      -32 program t6p4p3p3d4(output); 
     9      -32 type 
    10      -32    which = (white,black,warlock,sand); 
    11      -32 var 
    12      -32    thing : which; 
    13      -32    polex : record 
    14      -32              case which:boolean of 
    15      -32                true: (realpart:real; 
    16      -32                       imagpart:real); 
    17      -32                false:(theta:real; 
    18      -32                       magnit:real) 
    19      -32            end; 
    20      -32 begin 
    21        3    thing := black; 
    22        8    polex.which:=true; 
    23       12    polex.realpart:=0.5; 
    24       18    polex.imagpart:=0.8; 
    25       24    if (thing = black) and polex.which then 
    26       30       writeln(' PASS...6.4.3.3-4') 
    27       36    else 
    28       39       writeln(' FAIL...6.4.3.3-4') 
    29       45 end. 
sand       unreferenced
warlock    unreferenced
white      unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-4

program complete

Compiling and running t6p4p3p3d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that an empty record can be assigned to 
     4      -32    field of a record. } 
     5      -32 {  A record-value exists when none of its fields are undefined. 
     6      -32    Since the empty record types have no fields they are always 
     7      -32    defined immediately after activation (of a block or variant or 
     8      -32    variable).  This program assigns such a value to a compatible 
     9      -32    field of an identical type.  In most implementations this 
    10      -32    involves the very efficient transference of nothing, but 
    11      -32    some processors may get knotted. } 
    12      -32 {V3.1: Unchanged since 3.0, but the validity of this test is 
    13      -32        doubtful. It can be argued that the program contains 
    14      -32        error 43 (undefined value) for the access to empty. 
    15      -32        However, this would make variant records difficult to 
    16      -32        handle correctly. Ignore this test for compiler 
    17      -32        validation. } 
    18      -32  
    19      -32 program t6p4p3p3d5(output); 
    20      -32 type 
    21      -32    statuskind  = (defined,undefined); 
    22      -32    emptykind   = record end; 
    23      -32 var 
    24      -32    empty : emptykind; 
    25      -32    number: record 
    26      -32             case status:statuskind of 
    27      -32                defined  : (i : integer); 
    28      -32                undefined: (e : emptykind) 
    29      -32             end; 
    30      -32 begin 
    31        3    with number do 
    32        5    begin 
    33        5       status:=undefined; 
    34        9       e:=empty 
    35       10    end; 
    36       12    writeln(' PASS...6.4.3.3-5') 
    37       18 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-5

program complete

Compiling and running t6p4p3p3d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that nested variants are allowed 
     4      -32    with the appropriate syntax. } 
     5      -32 {V3.0: Writing and comment revised. Was previously 6.4.3.3-13. } 
     6      -32  
     7      -32 program t6p4p3p3d6(output); 
     8      -32 type 
     9      -32    a=record 
    10      -32        case b:boolean of 
    11      -32        true: (c:char); 
    12      -32        false: (case d:boolean of 
    13      -32                true: (e:char); 
    14      -32                false: (f:integer)) 
    15      -32       end; 
    16      -32 var 
    17      -32    g:a; 
    18      -32 begin 
    19        3    g.b:=false; 
    20        9    g.d:=false; 
    21       17    g.f:=1; 
    22       23    writeln(' PASS...6.4.3.3-6') 
    23       29 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-6

program complete

Compiling and running t6p4p3p3d7

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.3-7, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains negative integers as case-constants in a 
     4      -32    record-type. } 
     5      -32 {  Some compilers do not accept them. } 
     6      -32 {V3.1: New test from BNI. } 
     7      -32  
     8      -32 program t6p4p3p3d7(output); 
     9      -32 type 
    10      -32     level = -1..1; 
    11      -32     state = record 
    12      -32                case l:level of 
    13      -32                   0:(stable:integer); 
    14      -32                   1:(positive:integer); 
    15      -32                   -1:(negative:integer); 
    16      -32             end; 
    17      -32 var 
    18      -32     st:state; 
    19      -32 begin 
    20        3     st.l:=-1; 
    21       10     st.negative:=10; 
    22       16     writeln(' PASS...6.4.3.3-7') 
    23       22 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.3-7

program complete

Compiling and running t6p4p3p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests that set-types are permitted. } 
     4      -32 {V3.0: Comment revised. } 
     5      -32  
     6      -32 program t6p4p3p4d1(output); 
     7      -32 type 
     8      -32    colour   = (red,blue,pink,green,yellow); 
     9      -32    setone   = set of colour; 
    10      -32    settwo   = set of blue..green; 
    11      -32    setthree = set of boolean; 
    12      -32    setfour  = set of 1..10; 
    13      -32    setfive  = set of 0..3; 
    14      -32    setsix   = set of (heart,diamond,spade,club); 
    15      -32 begin 
    16        3    writeln(' PASS...6.4.3.4-1') 
    17       11 end. 
club       unreferenced
diamond    unreferenced
heart      unreferenced
pink       unreferenced
setfive    unreferenced
setfour    unreferenced
setsix     unreferenced
setthree   unreferenced
spade      unreferenced
settwo     unreferenced
setone     unreferenced
yellow     unreferenced
red        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.4-1

program complete

Compiling and running t6p4p3p4d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.4-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests if a set of char is permitted by the 
     4      -32    processor. } 
     5      -32 {  Processors that have only one letter case in their 
     6      -32    character set should still use the test unchanged although 
     7      -32    it will redundantly test the letter 'z' twice.  The 
     8      -32    test assumes that exercising this set of characters will 
     9      -32    trap most deviating processors as the character sets in 
    10      -32    use can be guessed at.  Standard Pascal does not contain 
    11      -32    a maxchar function which can be used to exercise the 
    12      -32    processor more thoroughly. } 
    13      -32 {V3.0: Comment and write revised. } 
    14      -32  
    15      -32 program t6p4p3p4d2(output); 
    16      -32 var 
    17      -32    s : set of char; 
    18      -32 begin 
    19        3    s:=[chr(0),';',' ','0'..'9','a'..'z','A'..'Z']; 
    20       13    if (chr(0) in s) and (';' in s) and (' ' in s) and ('0' in s) and 
    21       33       ('z' in s) and ('Z' in s) and ('9' in s) then 
    22       49       writeln(' PASS...6.4.3.4-2') 
    23       55    else 
    24       58       writeln(' FAIL...6.4.3.4-2') 
    25       64 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.4-2

program complete

Compiling and running t6p4p3p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains several file-variables, each of which has a 
     4      -32    different component-type. } 
     5      -32 {  A file-type is a structured-type consisting of a sequence of 
     6      -32    components which are all one type. All cases in this program 
     7      -32    should be acceptable. } 
     8      -32 {V3.1: Program parameters removed. } 
     9      -32  
    10      -32 program t6p4p3p5d1(output); 
    11      -32 type 
    12      -32    i = integer; 
    13      -32    ptrtoi = ^i; 
    14      -32 var 
    15      -32    file1 : file of char; 
    16      -32    file2 : file of real; 
    17      -32    file3 : file of 
    18      -32             record 
    19      -32                a : integer; 
    20      -32                b : boolean 
    21      -32             end; 
    22      -32    file4 : file of set of (red,blue,green,purple); 
    23      -32    file5 : file of ptrtoi; 
    24      -32 begin 
    25        3    writeln(' PASS...6.4.3.5-1') 
    26       11 end. 
blue       unreferenced
file5      unreferenced
green      unreferenced
file4      unreferenced
file3      unreferenced
file2      unreferenced
file1      unreferenced
purple     unreferenced
red        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-1

program complete

Compiling and running t6p4p3p5d10

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-10, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that packed non-text local files are 
     5      -32    processed correctly. } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    procedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    packed pointer types. } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d10(output); 
    16      -32 const 
    17      -32    Limit     = 191; 
    18      -32    MostNeg   = - maxint; 
    19      -32 type 
    20      -32    PData     = ^ Data; 
    21      -32    Data      = packed record 
    22      -32                   k : integer; 
    23      -32                   p : PData 
    24      -32                end; 
    25      -32 var 
    26      -32    result    : (pass,fail); 
    27      -32    f         : packed file of PData; 
    28      -32    head,temp : PData; 
    29      -32    i         : 1..Limit; 
    30      -32    j         : MostNeg..Limit; 
    31      -32  
    32      -32 begin 
    33        3    { Construct linked list } 
    34        3    head:=nil; 
    35        8    for i:=1 to Limit do begin 
    36       19       new(temp); 
    37       22       with temp^ do begin k:=i; p:=head end; 
    38       35       head:=temp 
    39       35    end; 
    40       49  
    41       49    { Write file of pointers } 
    42       49    rewrite(f); temp:=head; 
    43       54    for i:=1 to Limit-1 do begin 
    44       67       f^:=temp^.p; put(f); temp:=temp^.p 
    45       81    end; 
    46       95    f^:=temp^.p; put(f); 
    47      107  
    48      107    { Read file back and check it } 
    49      107    result:=pass;  { anticipatory } 
    50      110    reset(f); j:=Limit; temp:=head; 
    51      118     while not eof(f) do begin 
    52      122       if temp=nil then 
    53      126          result:=fail 
    54      126       else 
    55      130          begin 
    56      130             if (f^<>temp^.p) or (j<>temp^.k) then result:=fail; 
    57      149             temp:=temp^.p 
    58      151          end; 
    59      154       get(f); 
    60      157       j:=pred(j) 
    61      159    end; 
    62      162    if j<>0 then result:=fail; 
    63      169    if result=pass then 
    64      173       writeln(' PASS...6.4.3.5-10') 
    65      179    else 
    66      182       writeln(' FAIL...6.4.3.5-10') 
    67      188 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-10

program complete

Compiling and running t6p4p3p5d11

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-11, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that two local files with similar identifiers are 
     5      -32    correctly distinguished. } 
     6      -32 {  If local files are created with an external catalogue file name 
     7      -32    solely derived from their identifier, then it is possible that 
     8      -32    long identifiers may be truncated, yielding pseudonym problems, 
     9      -32    or that files in different scopes may have synonymous names. 
    10      -32    If implementations require external names then it is their 
    11      -32    responsibility to ensure distinctness to conform to 
    12      -32    the Standard.  } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d11(output); 
    16      -32 const 
    17      -32    Limit=111; 
    18      -32 type 
    19      -32    Three = (Nul,One,Two); 
    20      -32    Data = record 
    21      -32            case p:Three of 
    22      -32               Two: (q,r:integer); 
    23      -32               One: (s:boolean); 
    24      -32               Nul: () 
    25      -32           end; 
    26      -32    FileKind = file of Data; 
    27      -32 var 
    28      -32    TryThisParticularFile, 
    29      -32    TryThisParticularFyle : FileKind; 
    30      -32    a : Data; 
    31      -32    j : 0..maxint; 
    32      -32    ix : integer; 
    33      -32    result : (pass,fail); 
    34      -32  
    35      -32 function random : integer; 
    36      -32    var 
    37      -32       ni,k,r:integer; 
    38      -44    begin 
    39        3       k:=ix div 177; r:=ix-k*177; 
    40       15       ni:=-2*k+171*r; 
    41       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    42       35       random:=ix 
    43       35    end; 
    44       38  
    45       38    procedure first; 
    46       38    begin 
    47       38       a.p:=Nul 
    48       41    end; 
    49       45  
    50       45    procedure next; 
    51       45    var try:0..2; 
    52      -36    begin 
    53       45       try:=random mod 3; 
    54       53       case try of 
    55       55          0: a.p:=Nul; 
    56       60          1: begin 
    57       60                a.p:=One; a.s:=random>15000 
    58       70             end; 
    59       75          2: begin 
    60       75                a.p:=Two; a.q:=random; a.r:=random 
    61       90             end 
    62       93       end 
    63      101    end; 
    64      102  
    65      102    procedure Create(var g:FileKind); 
    66      102    var 
    67      -36       i : 1..Limit; 
    68      -40    begin 
    69      102       rewrite(g); 
    70      106       ix:=1; first; 
    71      110       for i:=1 to Limit do begin 
    72      121          g^:=a; put(g); next 
    73      130       end; 
    74      143    end; 
    75      144  
    76      144    procedure Check(var g:FileKind); 
    77      144  
    78      144       function notsame:boolean; 
    79      -32       begin 
    80      144          if a.p <> g^.p then 
    81      154             notsame:=true 
    82      154          else begin 
    83      158             case a.p of 
    84      161                Nul: notsame:=false; 
    85      165                One: notsame:=a.s<>g^.s; 
    86      184                Two: notsame:=(a.q<>g^.q)or(g^.r<>a.r) 
    87      216             end 
    88      227          end 
    89      227       end; 
    90      228  
    91      228    begin 
    92      228       reset(g); j:=0; 
    93      235       ix:=1; first; 
    94      239       while not eof(g) do begin 
    95      243          if notsame then result:=fail; 
    96      249          j:=succ(j); get(g); next 
    97      256       end; 
    98      259       if j<>Limit then result:=fail 
    99      263    end; 
   100      267  
   101      267    procedure Nested; 
   102      267    var 
   103      -32       TryThisParticularFile:FileKind; 
   104      -45    begin 
   105      267       Create(TryThisParticularFile); 
   106      272       Check(TryThisParticularFile); 
   107      275    end; 
   108      276  
   109      276  
   110      276 begin 
   111      276    result:=pass;  { anticipatory } 
   112      281    Create(TryThisParticularFile);  { first one } 
   113      284    Nested;                        { second, same identifier spelling } 
   114      286    Create(TryThisParticularFyle); {third, similar identifier spelling} 
   115      289    Check(TryThisParticularFile); 
   116      292    Check(TryThisParticularFyle); 
   117      295    if result=pass then 
   118      299       writeln(' PASS...6.4.3.5-11') 
   119      305    else 
   120      308       writeln(' FAIL...6.4.3.5-11') 
   121      314 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-11

program complete

Compiling and running t6p4p3p5d12

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-12, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test contains six simultaneous open files. } 
     5      -32 {  The Standard permits any number of file variables; 
     6      -32    this test writes to six files simultaneously to check 
     7      -32    that any limit imposed by an implementation is not 
     8      -32    ridiculously small. } 
     9      -32 {V3.1: New test. } 
    10      -32  
    11      -32 program t6p4p3p5d12(output); 
    12      -32 const 
    13      -32    Limit=47; 
    14      -32 type 
    15      -32    FourCycle = (P,Q,R,S); 
    16      -32    FileKind = file of FourCycle; 
    17      -32 var 
    18      -32    a0,a1,a2,a3,a4,a5 : FileKind; 
    19      -32    result : (pass,fail); 
    20      -32    a : FourCycle; 
    21      -32    i : 1..Limit; 
    22      -32  
    23      -32    function cycle(z:FourCycle):FourCycle; 
    24      -36    begin if z=S then cycle:=p else cycle:=succ(z) end; 
    25       19  
    26       19 begin 
    27       19    result:=pass;  { anticipatory } 
    28       24  
    29       24    { Write six files } 
    30       24    rewrite(a0); rewrite(a1); 
    31       28    rewrite(a2); rewrite(a3); 
    32       32    rewrite(a4); rewrite(a5); 
    33       36    a:=P; 
    34       39    for i:=1 to Limit do begin 
    35       50       case i mod 6 of 
    36       54          0: begin a0^:=a; put(a0) end; 
    37       65          1: begin a1^:=a; put(a1) end; 
    38       76          2: begin a2^:=a; put(a2) end; 
    39       87          3: begin a3^:=a; put(a3) end; 
    40       98          4: begin a4^:=a; put(a4) end; 
    41      109          5: begin a5^:=a; put(a5) end 
    42      119       end; 
    43      130       a:=cycle(a) 
    44      133    end; 
    45      147  
    46      147    { Check by reading back } 
    47      147    reset(a0); reset(a1); 
    48      151    reset(a2); reset(a3); 
    49      155    reset(a4); reset(a5); 
    50      159    a:=P; 
    51      162    for i:=1 to Limit do begin 
    52      173       case i mod 6 of 
    53      177          0: begin 
    54      177                if a0^<>a then result:=fail; 
    55      188                get(a0) 
    56      191             end; 
    57      192          1: begin 
    58      192                if a1^<>a then result:=fail; 
    59      203                get(a1) 
    60      206             end; 
    61      207          2: begin 
    62      207                if a2^<>a then result:=fail; 
    63      218                get(a2) 
    64      221             end; 
    65      222          3: begin 
    66      222                if a3^<>a then result:=fail; 
    67      233                get(a3) 
    68      236             end; 
    69      237          4: begin 
    70      237                if a4^<>a then result:=fail; 
    71      248                get(a4) 
    72      251             end; 
    73      252          5: begin 
    74      252                if a5^<>a then result:=fail; 
    75      263                get(a5) 
    76      266             end 
    77      266       end; 
    78      277       a:=cycle(a) 
    79      280    end; 
    80      294  
    81      294    if not(eof(a0) and eof(a1) and eof(a2) and 
    82      302           eof(a3) and eof(a4) and eof(a5)) then result:=fail; 
    83      316    if result=pass then 
    84      320       writeln(' PASS...6.4.3.5-12') 
    85      326    else 
    86      329       writeln(' FAIL...6.4.3.5-12') 
    87      335 end. 
R          unreferenced
Q          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-12

program complete

Compiling and running t6p4p3p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that textfiles adhere to the structure laid 
     4      -32    down in the Standard. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p4p3p5d2(output); 
     8      -32 var 
     9      -32    file1 : text; 
    10      -32    crash : boolean; 
    11      -32  
    12      -32 procedure ahaa; 
    13      -32 begin 
    14        3    crash:=true; 
    15        8    writeln(' FAIL...6.4.3.5-2') 
    16       14 end; 
    17       17  
    18       17 begin 
    19       17    crash:=false; 
    20       22    rewrite(file1); 
    21       24    writeln(file1);                  { no characters, but a linemarker} 
    22       27    writeln(file1,'ABC');            { characters and linemarker} 
    23       34    reset(file1); 
    24       36    if eoln(file1) and (file1^=' ') then get(file1) 
    25       48    else ahaa; 
    26       51    if file1^='A' then get(file1) 
    27       60    else ahaa; 
    28       63    if file1^='B' then get(file1) 
    29       72    else ahaa; 
    30       75    if file1^='C' then get(file1) 
    31       84    else ahaa; 
    32       87    if eoln(file1) and (file1^=' ') then get(file1) 
    33       99    else ahaa; 
    34      102    if not eof(file1) then ahaa; 
    35      108    if not crash then 
    36      111       writeln(' PASS...6.4.3.5-2') 
    37      117 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-2

program complete

Compiling and running t6p4p3p5d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.3.5-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests if an end-of-line marker is inserted at the 
     4      -32    end of the line, if not explicitly done in the program. } 
     5      -32 {  The structure of a text file requires a closing linemarker. 
     6      -32    Conforming processors will insert the linemarker 
     7      -32    automatically to make the textfile conform. } 
     8      -32 {V3.1: Program parameter removed and comment changed. } 
     9      -32  
    10      -32 program t6p4p3p5d3(output); 
    11      -32 var 
    12      -32    file1 : text; 
    13      -32    state : (correct,wrong); 
    14      -32 begin 
    15        3    state:=correct; 
    16        8    rewrite(file1); 
    17       10    write(file1,'A'); 
    18       15    reset(file1); 
    19       17    if file1^='A' then get(file1) else state:=wrong; 
    20       30    if eoln(file1) and (file1^=' ') then get(file1) 
    21       42       else state:=wrong; 
    22       46    if not eof(file1) then state:=wrong; 
    23       53    if state=correct then 
    24       57       writeln(' PASS...6.4.3.5-3') 
    25       63    else 
    26       66       writeln(' FAIL...6.4.3.5-3') 
    27       72 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-3

program complete

Compiling and running t6p4p3p5d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-4, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that file-types can appear in a record 
     5      -32    declaration. } 
     6      -32 {V3.1: New test from BNI. } 
     7      -32  
     8      -32 program t6p4p3p5d4(output); 
     9      -32 type 
    10      -32    recf=record 
    11      -32            inchar:file of char; 
    12      -32            case boolean of 
    13      -32               true:(outchar:file of char); 
    14      -32               false:(out:packed record 
    15      -32                                    outch:file of char; 
    16      -32                                    outint:file of integer; 
    17      -32                                 end); 
    18      -32         end; 
    19      -32 var 
    20      -32    r:recf; 
    21      -32    c:char; 
    22      -32 begin 
    23        3    rewrite(r.inchar); 
    24        7    write(r.inchar,'A','B','C'); 
    25       18    reset(r.inchar); 
    26       20    rewrite(r.out.outch); 
    27       30    rewrite(r.out.outint); 
    28       40    while not eof(r.inchar) do 
    29       44       begin 
    30       44          read(r.inchar,c); 
    31       51          write(r.out.outch,c); 
    32       64          r.out.outint^:=ord(c); 
    33       79          put(r.out.outint); 
    34       90       end; 
    35       91    reset(r.out.outint); 
    36      101    get(r.out.outint); 
    37      112    c:=chr(r.out.outint^); 
    38      128    if c='B' then writeln(' PASS...6.4.3.5-4') 
    39      138             else writeln(' FAIL...6.4.3.5-4') 
    40      147 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-4

program complete

Compiling and running t6p4p3p5d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-5, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that non-text local files are 
     5      -32    processed correctly. } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    procedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    unstructured types.  } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d5(output); 
    16      -32 var 
    17      -32    ix,iy,iz : integer; 
    18      -32    result : (pass,fail); 
    19      -32  
    20      -32    function random : real; 
    21      -32    { For full description of operation see commentary of 
    22      -32      test 6.6.6.2-6. } 
    23      -32    var 
    24      -32       ni,k,r:integer; 
    25      -44       x:real; 
    26      -52    begin 
    27        3       k:=ix div 177; r:=ix-k*177; 
    28       15       ni:=-2*k+171*r; 
    29       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    30       35       k:=ix div 176; r:=ix-k*176; 
    31       45       ni:=-35*k + r*172; 
    32       54       if ni<0 then ix:=ni+30307 else ix:=ni; 
    33       65       k:=ix div 178; r:=ix-k*178; 
    34       75       ni:=-63*k + r*170; 
    35       84       if ni<0 then ix:=ni+30323 else ix:=ni; 
    36       95       x:=ix/30269.0 + iy/30307.0 + iz/30323.0; 
    37      110       random:=x-trunc(x) 
    38      113    end; 
    39      117  
    40      117    procedure Booleans; 
    41      117    const 
    42      -32       Limit=100; 
    43      -32    var 
    44      -32       f : file of Boolean; 
    45      -34       a : Boolean; 
    46      -35       i : 1..Limit; 
    47      -36       j : 0..maxint; 
    48      -40    begin 
    49      117       rewrite(f); a:=false; 
    50      124       for i:=1 to Limit do begin 
    51      135          f^:=a; put(f); a:=not(a) 
    52      145       end; 
    53      160       reset(f); j:=0; a:=false; 
    54      168       while not eof(f) do begin 
    55      172          if f^<>a then result:=fail; 
    56      183          j:=succ(j); get(f); a:=not(a) 
    57      190       end; 
    58      195       if j<>Limit then result:=fail 
    59      199    end; 
    60      203  
    61      203    procedure EnumeratedTypes; 
    62      203    const 
    63      -32       Limit=100; 
    64      -32    type 
    65      -32       FourCycle = (P,Q,R,S); 
    66      -32    var 
    67      -32       f : file of FourCycle; 
    68      -34       a : FourCycle; 
    69      -36       i : 1..Limit; 
    70      -40       j : 0..maxint; 
    71      -44  
    72      -44       function cycle(z:FourCycle):FourCycle; 
    73      -36       begin if z=S then cycle:=P else cycle:=succ(z) end; 
    74      219  
    75      219    begin 
    76      219       rewrite(f); a:=P; 
    77      226       for i:=1 to Limit do begin 
    78      237          f^:=a; put(f); a:=cycle(a) 
    79      250       end; 
    80      264       reset(f); j:=0; a:=P; 
    81      272       while not eof(f) do begin 
    82      276          if f^<>a then result:=fail; 
    83      287          j:=succ(j); get(f); a:=cycle(a) 
    84      297       end; 
    85      301       if j<>Limit then result:=fail 
    86      305    end; 
R          unreferenced
Q          unreferenced

    87      309  
    88      309    procedure Integers; 
    89      309    const 
    90      -32       Limit=99; 
    91      -32    var 
    92      -32       f : file of integer; 
    93      -37       a : integer; 
    94      -44       i : 1..Limit; 
    95      -48       j : 0..maxint; 
    96      -52  
    97      -52       function next:integer; 
    98      -32       begin next:=trunc(((2*random)-1)*maxint) end; 
    99      325  
   100      325    begin 
   101      325       rewrite(f); ix:=1; iy:=10001; iz:=4987; a:=next; 
   102      338       for i:=1 to Limit do begin 
   103      349          f^:=a; put(f); a:=next 
   104      358       end; 
   105      372       reset(f); j:=0; 
   106      377       ix:=1; iy:=10001; iz:=4987; a:=next; 
   107      386       while not eof(f) do begin 
   108      390          if f^<>a then result:=fail; 
   109      401          j:=succ(j); get(f); a:=next 
   110      408       end; 
   111      412       if j<>Limit then result:=fail 
   112      416    end; 
   113      420  
   114      420    procedure Reals; 
   115      420    const 
   116      -32       Limit=113; 
   117      -32    var 
   118      -32       f : file of real; 
   119      -41       a : real; 
   120      -52       i : 1..Limit; 
   121      -56       j : 0..maxint; 
   122      -60  
   123      -60       function next:real; 
   124      -32       begin next:=random end; 
   125      426  
   126      426    begin 
   127      426       rewrite(f); ix:=1; iy:=10001; iz:=4987; a:=next; 
   128      439       for i:=1 to Limit do begin 
   129      450          f^:=a; put(f); a:=next 
   130      459       end; 
   131      473       reset(f); j:=0; 
   132      478       ix:=1; iy:=10001; iz:=4987; a:=next; 
   133      487       while not eof(f) do begin 
   134      491          if f^<>a then result:=fail; 
   135      502          j:=succ(j); get(f); a:=next 
   136      509       end; 
   137      513       if j<>Limit then result:=fail 
   138      517    end; 
   139      521  
   140      521    procedure SubrangeOfInteger; 
   141      521    const 
   142      -32       One  =1; 
   143      -32       Prime=13; 
   144      -32       Limit=97; 
   145      -32    type 
   146      -32       Primal = One..Prime; 
   147      -32    var 
   148      -32       f : file of Primal; 
   149      -34       a : Primal; 
   150      -36       i : 1..Limit; 
   151      -40       j : 0..maxint; 
   152      -44  
   153      -44       function cycle(z:Primal):Primal; 
   154      -36       begin if z=One then cycle:=Prime else cycle:=pred(z) end; 
   155      536  
   156      536    begin 
   157      536       rewrite(f); a:=One; 
   158      543       for i:=1 to Limit do begin 
   159      554          f^:=a; put(f); a:=cycle(a) 
   160      567       end; 
   161      581       reset(f); j:=0; a:=One; 
   162      589       while not eof(f) do begin 
   163      593          if f^<>a then result:=fail; 
   164      604          j:=succ(j); get(f); a:=cycle(a) 
   165      614       end; 
   166      618       if j<>Limit then result:=fail 
   167      622    end; 
   168      626  
   169      626 begin 
   170      626    result:=pass;  { anticipatory } 
   171      631    Booleans; 
   172      633    Integers; 
   173      635    Reals; 
   174      637    EnumeratedTypes; 
   175      639    SubrangeOfInteger; 
   176      641    if result=pass then 
   177      645       writeln(' PASS...6.4.3.5-5') 
   178      651    else 
   179      654       writeln(' FAIL...6.4.3.5-5') 
   180      660 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-5

program complete

Compiling and running t6p4p3p5d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-6, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that non-text local files are 
     5      -32    processed correctly. } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    procedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    structured types. } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d6(output); 
    16      -32 var 
    17      -32    ix : integer; 
    18      -32    result :  (pass,fail); 
    19      -32  
    20      -32    function random : integer; 
    21      -32    var 
    22      -32       ni,k,r:integer; 
    23      -44    begin 
    24        3       k:=ix div 177; r:=ix-k*177; 
    25       15       ni:=-2*k+171*r; 
    26       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    27       35       random:=ix 
    28       35    end; 
    29       38  
    30       38    procedure Sets; 
    31       38    const 
    32      -32       Limit=71; 
    33      -32    type 
    34      -32       Pattern=set of 0..15; 
    35      -32    var 
    36      -32       f : file of Pattern; 
    37      -65       a : Pattern; 
    38      -97       i : 1..Limit; 
    39     -100       j : 0..maxint; 
    40     -104  
    41     -104       procedure next(var b:Pattern); 
    42      -36       begin 
    43       38          b:=b-[random mod 16]; 
    44       51          b:=b+[random mod 16] 
    45       59       end; 
    46       63  
    47       63    begin 
    48       63       rewrite(f); 
    49       67       ix:=1; a:=[]; 
    50       72       for i:=1 to Limit do begin 
    51       83          f^:=a; put(f); next(a) 
    52       95       end; 
    53      107       reset(f); j:=0; 
    54      112       ix:=1; a:=[]; 
    55      117       while not eof(f) do begin 
    56      121          if f^<>a then result:=fail; 
    57      132          j:=succ(j); get(f); next(a) 
    58      141       end; 
    59      143       if j<>Limit then result:=fail 
    60      147    end; 
    61      151  
    62      151    procedure Arrays; 
    63      151    const 
    64      -32       Limit=83; 
    65      -32    type 
    66      -32       Size = 0..23; 
    67      -32       Table= array[Size] of integer; 
    68      -32    var 
    69      -32       f : file of Table; 
    70     -129       a : Table; 
    71     -228       i : 1..Limit; 
    72     -232       j : 0..maxint; 
    73     -236       k : Size; 
    74     -240  
    75     -240       procedure first; 
    76      -32       var k:Size; 
    77      -36       begin 
    78      151          for k:=0 to 23 do a[k]:=0 
    79      168       end; 
    80      182  
    81      182       procedure next; 
    82      182       var k:Size; 
    83      -36           r:real; 
    84      -44       begin 
    85      182          r:=random mod 24; 
    86      190          k:=trunc(r); 
    87      194          a[k]:=random 
    88      198       end; 
    89      202  
    90      202       function notsame:boolean; 
    91      202       var k:Size; hypothesis:boolean; 
    92      -37       begin 
    93      202          hypothesis:=false; 
    94      207          for k:=0 to 23 do 
    95      218             if f^[k] <> a[k] then 
    96      233                hypothesis:=true; 
    97      247          notsame:=hypothesis 
    98      247       end; 
    99      251  
   100      251    begin 
   101      251       rewrite(f); 
   102      255       ix:=1; first; 
   103      259       for i:=1 to Limit do begin 
   104      270          f^:=a; put(f); next 
   105      279       end; 
   106      292       reset(f); j:=0; 
   107      297       ix:=1; first; 
   108      301       while not eof(f) do begin 
   109      305          if notsame then result:=fail; 
   110      311          j:=succ(j); get(f); next 
   111      318       end; 
   112      321       if j<>Limit then result:=fail 
   113      325    end; 
k          unreferenced

   114      329  
   115      329    procedure Products; 
   116      329    const 
   117      -32       Limit=127; 
   118      -32    type 
   119      -32       Data = record v:integer; w:boolean end; 
   120      -32    var 
   121      -32       f : file of Data; 
   122      -38       a : Data; 
   123      -44       i : 1..Limit; 
   124      -48       j : 0..maxint; 
   125      -52  
   126      -52       procedure first; 
   127      -32       begin 
   128      329          a.v:=0; a.w:=false 
   129      333       end; 
   130      337  
   131      337       procedure next; 
   132      337       begin 
   133      337          a.v:=random; a.w:=random>15000 
   134      344       end; 
   135      349  
   136      349       function notsame:boolean; 
   137      349       begin 
   138      349          notsame:=(a.v<>f^.v) or (a.w<>f^.w) 
   139      365       end; 
   140      369  
   141      369    begin 
   142      369       rewrite(f); 
   143      373       ix:=1; first; 
   144      377       for i:=1 to Limit do begin 
   145      388          f^:=a; put(f); next 
   146      397       end; 
   147      410       reset(f); j:=0; 
   148      415       ix:=1; first; 
   149      419       while not eof(f) do begin 
   150      423          if notsame then result:=fail; 
   151      429          j:=succ(j); get(f); next 
   152      436       end; 
   153      439       if j<>Limit then result:=fail 
   154      443    end; 
   155      447  
   156      447    procedure Unions; 
   157      447    const 
   158      -32       Limit=79; 
   159      -32    type 
   160      -32       Three = (Nul,One,Two); 
   161      -32       Data = record 
   162      -32               case p:Three of 
   163      -32                  Two: (q,r:integer); 
   164      -32                  One: (s:boolean); 
   165      -32                  Nul: () 
   166      -32              end; 
   167      -32    var 
   168      -32       f : file of Data; 
   169      -45       a : Data; 
   170      -60       i : 1..Limit; 
   171      -64       j : 0..maxint; 
   172      -68  
   173      -68       procedure first; 
   174      -32       begin 
   175      447          a.p:=Nul 
   176      450       end; 
   177      454  
   178      454       procedure next; 
   179      454       var try:0..2; 
   180      -36       begin 
   181      454          try:=random mod 3; 
   182      462          case try of 
   183      464             0: a.p:=Nul; 
   184      469             1: begin 
   185      469                   a.p:=One; a.s:=random>15000 
   186      479                end; 
   187      484             2: begin 
   188      484                   a.p:=Two; a.q:=random; a.r:=random 
   189      499                end 
   190      502          end; 
   191      510       end; 
   192      511  
   193      511       function notsame:boolean; 
   194      511       begin 
   195      511          if a.p <> f^.p then 
   196      521             notsame:=true 
   197      521          else begin 
   198      525             case a.p of 
   199      528                Nul: notsame:=false; 
   200      532                One: notsame:=a.s<>f^.s; 
   201      551                Two: notsame:=(a.q<>f^.q)or(f^.r<>a.r) 
   202      583             end; 
   203      594          end; 
   204      594       end; 
   205      595  
   206      595  
   207      595    begin 
   208      595       rewrite(f); 
   209      599       ix:=1; first; 
   210      603       for i:=1 to Limit do begin 
   211      614          f^:=a; put(f); next 
   212      623       end; 
   213      636       reset(f); j:=0; 
   214      641       ix:=1; first; 
   215      645       while not eof(f) do begin 
   216      649          if notsame then result:=fail; 
   217      655          j:=succ(j); get(f); next 
   218      662       end; 
   219      665       if j<>Limit then result:=fail 
   220      669    end; 
   221      673 begin 
   222      673    result:=pass;  { anticipatory } 
   223      678    Sets; 
   224      680    Arrays; 
   225      682    Products; 
   226      684    Unions; 
   227      686    if result=pass then 
   228      690       writeln(' PASS...6.4.3.5-6') 
   229      696    else 
   230      699       writeln(' FAIL...6.4.3.5-6') 
   231      705 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-6

program complete

Compiling and running t6p4p3p5d7

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-7, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that non-text local files are 
     5      -32    processed correctly. } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    procedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may  be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    pointer types.  } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d7(output); 
    16      -32 const 
    17      -32    Limit     = 191; 
    18      -32    MostNeg   = - maxint; 
    19      -32 type 
    20      -32    PData     = ^ Data; 
    21      -32    Data      = record 
    22      -32                   k : integer; 
    23      -32                   p : PData 
    24      -32                end; 
    25      -32 var 
    26      -32    result    : (pass,fail); 
    27      -32    f         : file of PData; 
    28      -32    head,temp : PData; 
    29      -32    i         : 1..Limit; 
    30      -32    j         : MostNeg..Limit; 
    31      -32  
    32      -32 begin 
    33        3    { Construct linked list } 
    34        3    head:=nil; 
    35        8    for  i:=1 to Limit do begin 
    36       19       new(temp); 
    37       22       with temp^ do begin k:=i; p:=head end; 
    38       35       head:=temp 
    39       35    end; 
    40       49  
    41       49    { Write file of pointers } 
    42       49    rewrite(f); temp:=head; 
    43       54    for i:=1 to Limit-1 do begin 
    44       67       f^:=temp^.p; put(f); temp:=temp^.p 
    45       81    end; 
    46       95    f^:=temp^.p; put(f); 
    47      107  
    48      107    { Read file back and check it } 
    49      107    result:=pass;  { anticipatory } 
    50      110    reset(f); j:=Limit; temp:=head; 
    51      118    while not eof(f) do begin 
    52      122       if temp=nil then 
    53      126          result:=fail 
    54      126       else 
    55      130          begin 
    56      130             if (f^<>temp^.p) or (j<>temp^.k) then result:=fail; 
    57      149             temp:=temp^.p 
    58      151          end; 
    59      154       get(f); 
    60      157       j:=pred(j) 
    61      159    end; 
    62      162    if j<>0 then result:=fail; 
    63      169    if result=pass then 
    64      173       writeln(' PASS...6.4.3.5-7') 
    65      179    else 
    66      182       writeln(' FAIL...6.4.3.5-7') 
    67      188 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-7

program complete

Compiling and running t6p4p3p5d8

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-8, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that packed non-text local files are 
     5      -32    processed correctly.  } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    procedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    packed unstructured types. } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d8(output); 
    16      -32 var 
    17      -32    ix,iy,iz : integer; 
    18      -32    result : (pass,fail); 
    19      -32  
    20      -32    function random : real; 
    21      -32    { For full description of operation see commentary of 
    22      -32      test 6.6.6.2-6. } 
    23      -32    var 
    24      -32       ni,k,r:integer; 
    25      -44       x:real; 
    26      -52    begin 
    27        3       k:=ix div 177; r:=ix-k*177; 
    28       15       ni:=-2*k+171*r; 
    29       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    30       35       k:=ix div 176; r:=ix-k*176; 
    31       45       ni:=-35*k + r*172; 
    32       54       if ni<0 then ix:=ni+30307 else ix:=ni; 
    33       65       k:=ix div 178; r:=ix-k*178; 
    34       75       ni:=-63*k + r*170; 
    35       84       if ni<0 then ix:=ni+30323 else ix:=ni; 
    36       95       x:=ix/30269.0 + iy/30307.0 + iz/30323.0; 
    37      110       random:=x-trunc(x) 
    38      113    end; 
    39      117  
    40      117    procedure Booleans; 
    41      117    const 
    42      -32       Limit=100; 
    43      -32    var 
    44      -32       f : packed file of Boolean; 
    45      -34       a : Boolean; 
    46      -35       i : 1..Limit; 
    47      -36       j : 0..maxint; 
    48      -40    begin 
    49      117       rewrite(f); a:=false; 
    50      124       for i:=1 to Limit do begin 
    51      135          f^:=a; put(f); a:=not(a) 
    52      145       end; 
    53      160       reset(f); j:=0; a:=false; 
    54      168       while not eof(f) do begin 
    55      172          if f^<>a then result:=fail; 
    56      183          j:=succ(j); get(f); a:=not(a) 
    57      190       end; 
    58      195       if j<>Limit then result:=fail 
    59      199    end; 
    60      203  
    61      203    procedure EnumeratedTypes; 
    62      203    const 
    63      -32       Limit=100; 
    64      -32    type 
    65      -32       FourCycle = (P,Q,R,S); 
    66      -32    var 
    67      -32       f : packed file of FourCycle; 
    68      -34       a : FourCycle; 
    69      -36       i : 1..Limit; 
    70      -40       j : 0..maxint; 
    71      -44  
    72      -44       function cycle(z:FourCycle):FourCycle; 
    73      -36       begin if z=s then cycle:=P else cycle:=succ(z) end; 
    74      219  
    75      219    begin 
    76      219       rewrite(f); a:=P; 
    77      226       for i:=1 to Limit do begin 
    78      237          f^:=a; put(f); a:=cycle(a) 
    79      250       end; 
    80      264       reset(f); j:=0; a:=P; 
    81      272       while not eof(f) do begin 
    82      276          if f^<>a then result:=fail; 
    83      287          j:=succ(j); get(f); a:=cycle(a) 
    84      297       end; 
    85      301       if j<>Limit then result:=fail 
    86      305    end; 
R          unreferenced
Q          unreferenced

    87      309  
    88      309    procedure Integers; 
    89      309    const 
    90      -32       Limit=99; 
    91      -32    var 
    92      -32       f : packed file of integer; 
    93      -37       a : integer; 
    94      -44       i : 1..Limit; 
    95      -48       j : 0..maxint; 
    96      -52  
    97      -52       function next:integer; 
    98      -32       begin next:=trunc(((2*random)-1)*maxint) end; 
    99      325  
   100      325    begin 
   101      325       rewrite(f); ix:=1; iy:=10001; iz:=4987; a:=next; 
   102      338       for i:=1 to Limit do begin 
   103      349          f^:=a; put(f); a:=next 
   104      358       end; 
   105      372       reset(f); j:=0; 
   106      377       ix:=1; iy:=10001; iz:=4987; a:=next; 
   107      386       while not eof(f) do begin 
   108      390          if f^<>a then result:=fail; 
   109      401          j:=succ(j); get(f); a:=next 
   110      408       end; 
   111      412       if j<>Limit then result:=fail 
   112      416    end; 
   113      420  
   114      420    procedure Reals; 
   115      420    const 
   116      -32       Limit=113; 
   117      -32    var 
   118      -32       f : packed file of real; 
   119      -41       a : real; 
   120      -52       i : 1..Limit; 
   121      -56       j : 0..maxint; 
   122      -60  
   123      -60       function next:real; 
   124      -32       begin next:=random end; 
   125      426  
   126      426    begin 
   127      426       rewrite(f); ix:=1; iy:=10001; iz:=4987; a:=next; 
   128      439       for i:=1 to Limit do begin 
   129      450          f^:=a; put(f); a:=next 
   130      459       end; 
   131      473       reset(f); j:=0; 
   132      478       ix:=1; iy:=10001; iz:=4987; a:=next; 
   133      487       while not eof(f) do begin 
   134      491          if f^<>a then result:=fail; 
   135      502          j:=succ(j); get(f); a:=next 
   136      509       end; 
   137      513       if j<>Limit then result:=fail 
   138      517    end; 
   139      521  
   140      521    procedure SubrangeOfInteger; 
   141      521    const 
   142      -32       One  =1; 
   143      -32       Prime=13; 
   144      -32       Limit=97; 
   145      -32    type 
   146      -32       Primal = One..Prime; 
   147      -32    var 
   148      -32       f : packed file of Primal; 
   149      -34       a : Primal; 
   150      -36       i : 1..Limit; 
   151      -40       j : 0..maxint; 
   152      -44  
   153      -44       function cycle(z:Primal):Primal; 
   154      -36       begin if z=One then cycle:=Prime else cycle:=pred(z) end; 
   155      536  
   156      536    begin 
   157      536       rewrite(f); a:=One; 
   158      543       for i:=1 to Limit do begin 
   159      554          f^:=a; put(f); a:=cycle(a) 
   160      567       end; 
   161      581       reset(f); j:=0; a:=One; 
   162      589       while not eof(f) do begin 
   163      593          if f^<>a then result:=fail; 
   164      604          j:=succ(j); get(f); a:=cycle(a) 
   165      614       end; 
   166      618       if j<>Limit then result:=fail 
   167      622    end; 
   168      626  
   169      626 begin 
   170      626    result:=pass;  { anticipatory } 
   171      631    Booleans; 
   172      633    Integers; 
   173      635    Reals; 
   174      637    EnumeratedTypes; 
   175      639    SubrangeOfInteger; 
   176      641    if result=pass then 
   177      645       writeln(' PASS...6.4.3.5-8') 
   178      651    else 
   179      654       writeln(' FAIL...6.4.3.5-8') 
   180      660 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-8

program complete

Compiling and running t6p4p3p5d9

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.3.5-9, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that packed non-text local files are 
     5      -32    processed correctly.  } 
     6      -32 {  This test explores the reading and writing of files of type other 
     7      -32    than text (or file of char) to establish that they are implemented. 
     8      -32    Test patterns are written and read back in a series of test 
     9      -32    pprocedures.  Only local files can be tested; whether external files 
    10      -32    can be of these types is implementation-dependent (and may be 
    11      -32    omitted from an implementation therefore).  This test involves 
    12      -32    packed structured types.  } 
    13      -32 {V3.1: New test. } 
    14      -32  
    15      -32 program t6p4p3p5d9(output); 
    16      -32 var 
    17      -32    ix : integer; 
    18      -32    result : (pass,fail); 
    19      -32  
    20      -32    function random : integer; 
    21      -32    var 
    22      -32       ni,k,r:integer; 
    23      -44    begin 
    24        3       k:=ix div 177; r:=ix-k*177; 
    25       15       ni:=-2*k+171*r; 
    26       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    27       35       random:=ix 
    28       35    end; 
    29       38  
    30       38    procedure Sets; 
    31       38    const 
    32      -32       Limit=71; 
    33      -32    type 
    34      -32       Pattern=packed set of 0..15; 
    35      -32    var 
    36      -32       f : packed file of Pattern; 
    37      -65       a : Pattern; 
    38      -97       i : 1..Limit; 
    39     -100       j : 0..maxint; 
    40     -104  
    41     -104       procedure next(var b:Pattern); 
    42      -36       begin 
    43       38          b:=b-[random mod 16]; 
    44       51          b:=b+[random mod 16] 
    45       59       end; 
    46       63  
    47       63    begin 
    48       63       rewrite(f); 
    49       67       ix:=1; a:=[]; 
    50       72       for i:=1 to Limit do begin 
    51       83          f^:=a; put(f); next(a) 
    52       95       end; 
    53      107       reset(f); j:=0; 
    54      112       ix:=1; a:=[]; 
    55      117       while not eof(f) do begin 
    56      121          if f^<>a then result:=fail; 
    57      132          j:=succ(j); get(f); next(a) 
    58      141       end; 
    59      143       if j<>Limit then result:=fail 
    60      147    end; 
    61      151  
    62      151    procedure Arrays; 
    63      151    const 
    64      -32       Limit=83; 
    65      -32    type 
    66      -32       Size = 0..23; 
    67      -32       Table= packed array[Size] of integer; 
    68      -32    var 
    69      -32       f : packed file of Table; 
    70     -129       a : Table; 
    71     -228       i : 1..Limit; 
    72     -232       j : 0..maxint; 
    73     -236       k : Size; 
    74     -240  
    75     -240       procedure first; 
    76      -32       var k:Size; 
    77      -36       begin 
    78      151          for k:=0 to 23 do a[k]:=0 
    79      168       end; 
    80      182  
    81      182       procedure next; 
    82      182       var k:Size; 
    83      -36           r:real; 
    84      -44       begin 
    85      182          r:=random mod 24; 
    86      190          k:=trunc(r); 
    87      194          a[k]:=random 
    88      198       end; 
    89      202  
    90      202       function notsame:boolean; 
    91      202       var k:Size; hypothesis:boolean; 
    92      -37       begin 
    93      202          hypothesis:=false; 
    94      207          for k:=0 to 23 do 
    95      218             if f^[k] <> a[k] then 
    96      233                hypothesis:=true; 
    97      247          notsame:=hypothesis 
    98      247       end; 
    99      251  
   100      251    begin 
   101      251       rewrite(f); 
   102      255       ix:=1; first; 
   103      259       for i:=1 to Limit do begin 
   104      270          f^:=a; put(f); next 
   105      279       end; 
   106      292       reset(f); j:=0; 
   107      297       ix:=1; first; 
   108      301       while not eof(f) do begin 
   109      305          if notsame then result:=fail; 
   110      311          j:=succ(j); get(f); next 
   111      318       end; 
   112      321       if j<>Limit then result:=fail 
   113      325    end; 
k          unreferenced

   114      329  
   115      329    procedure Products; 
   116      329    const 
   117      -32       Limit=127; 
   118      -32    type 
   119      -32       Data = packed record v: integer; w:boolean end; 
   120      -32    var 
   121      -32       f : packed file of Data; 
   122      -38       a : Data; 
   123      -44       i : 1..Limit; 
   124      -48       j : 0..maxint; 
   125      -52  
   126      -52       procedure first; 
   127      -32       begin 
   128      329          a.v:=0; a.w:=false 
   129      333       end; 
   130      337  
   131      337       procedure next; 
   132      337       begin 
   133      337          a.v:=random; a.w:=random>15000 
   134      344       end; 
   135      349  
   136      349       function notsame:boolean; 
   137      349       begin 
   138      349          notsame:=(a.v<>f^.v) or (a.w<>f^.w) 
   139      365       end; 
   140      369  
   141      369    begin 
   142      369       rewrite(f); 
   143      373       ix:=1; first; 
   144      377       for i:=1 to Limit do begin 
   145      388          f^:=a; put(f); next 
   146      397       end; 
   147      410       reset(f); j:=0; 
   148      415       ix:=1; first; 
   149      419       while not eof(f) do begin 
   150      423          if notsame then result:=fail; 
   151      429          j:=succ(j); get(f); next 
   152      436       end; 
   153      439       if j<>Limit then result:=fail 
   154      443    end; 
   155      447  
   156      447    procedure  Unions; 
   157      447    const 
   158      -32       Limit=79; 
   159      -32    type 
   160      -32       Three = (Nul,One,Two); 
   161      -32       Data = packed record 
   162      -32               case p:Three of 
   163      -32                  Two: (q,r:integer); 
   164      -32                  One: (s:boolean); 
   165      -32                  Nul: () 
   166      -32              end; 
   167      -32    var 
   168      -32       f : packed file of Data; 
   169      -45       a : Data; 
   170      -60       i : 1..Limit; 
   171      -64       j : 0..maxint; 
   172      -68  
   173      -68       procedure first; 
   174      -32       begin 
   175      447          a.p:=Nul 
   176      450       end; 
   177      454  
   178      454       procedure next; 
   179      454       var try:0..2; 
   180      -36       begin 
   181      454          try:=random mod 3; 
   182      462          case try of 
   183      464             0: a.p:=Nul; 
   184      469             1: begin 
   185      469                   a.p:=One; a.s:=random>15000 
   186      479                end; 
   187      484             2: begin 
   188      484                   a.p:=Two; a.q:=random; a.r:=random 
   189      499                end 
   190      502  
   191      502          end; 
   192      510       end; 
   193      511  
   194      511       function notsame:boolean; 
   195      511       begin 
   196      511          if a.p <> f^.p then 
   197      521             notsame:=true 
   198      521          else begin 
   199      525             case a.p of 
   200      528                Nul: notsame:=false; 
   201      532                One: notsame:=a.s<>f^.s; 
   202      551                Two: notsame:=(a.q<>f^.q)or(f^.r<>a.r) 
   203      583  
   204      583             end; 
   205      594          end; 
   206      594       end; 
   207      595  
   208      595    begin 
   209      595       rewrite(f); 
   210      599       ix:=1; first; 
   211      603       for i:=1 to Limit do begin 
   212      614          f^:=a; put(f); next 
   213      623       end; 
   214      636       reset(f); j:=0; 
   215      641       ix:=1; first; 
   216      645       while not eof(f) do begin 
   217      649          if notsame then result:=fail; 
   218      655          j:=succ(j); get(f); next 
   219      662       end; 
   220      665       if j<>Limit then result:=fail 
   221      669    end; 
   222      673  
   223      673 begin 
   224      673    result:=pass;  { anticipatory } 
   225      678    Sets; 
   226      680    Arrays; 
   227      682    Products; 
   228      684    Unions; 
   229      686    if result=pass then 
   230      690       writeln(' PASS...6.4.3.5-9') 
   231      696    else 
   232      699       writeln(' FAIL...6.4.3.5-9') 
   233      705 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.3.5-9

program complete

Compiling and running t6p4p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests that pointer-types are permitted. } 
     4      -32 {V3.0: Dereferencing included.  Extended to include 
     5      -32    ptr7, ptr8 and ptr9. } 
     6      -32  
     7      -32 program t6p4p4d1(output); 
     8      -32 type 
     9      -32    sett     = set of 1..2; 
    10      -32    urray    = array[1..3] of integer; 
    11      -32    rekord   = record 
    12      -32                a : integer; 
    13      -32                b : boolean 
    14      -32               end; 
    15      -32    ptr10    = ^sett; 
    16      -32    pureptr  = ^pureptr; 
    17      -32 var 
    18      -32    ptr1  : ^integer; 
    19      -32    ptr2  : ^real; 
    20      -32    ptr3  : ^boolean; 
    21      -32    ptr4  : ^sett; 
    22      -32    ptr5  : ^urray; 
    23      -32    ptr6  : ^rekord; 
    24      -32    ptr7  : ^char; 
    25      -32    ptr8  : pureptr; 
    26      -32    ptr9  : ptr10; 
    27      -32 begin 
    28        3    new(ptr1); 
    29        8    new(ptr2); 
    30       11    new(ptr3); 
    31       14    new(ptr4); 
    32       17    new(ptr5); 
    33       20    new(ptr6); 
    34       23    new(ptr7); 
    35       26    new(ptr8); 
    36       29    new(ptr9); 
    37       32    ptr1^ := 1; 
    38       36    ptr2^ := 3.14; 
    39       40    ptr3^ := true; 
    40       45    ptr4^ := [1,2]; 
    41       50    ptr5^[1] := 1; 
    42       58    ptr6^.a := 1; 
    43       62    ptr6^.b := true; 
    44       68    ptr7^ := 'C'; 
    45       73    ptr8^ := nil; 
    46       78    ptr9^ := [1]; 
    47       83    writeln(' PASS...6.4.4-1') 
    48       89 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.4-1

program complete

Compiling and running t6p4p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests that the processor conforms to the 
     4      -32    Standard's description of type-identity. } 
     5      -32 {  The Pascal Standard states that types designated at two or more 
     6      -32    different places in the program text are identical if the same 
     7      -32    type identifier is used at these places, or if different 
     8      -32    identifiers are used which have been defined to be equivalent 
     9      -32    to each other. } 
    10      -32 {V3.0: Comment revised. } 
    11      -32  
    12      -32 program t6p4p5d1(output); 
    13      -32 type 
    14      -32    t1 = array[1..5] of boolean; 
    15      -32    t2 = t1; 
    16      -32    t3 = t2; 
    17      -32 var 
    18      -32    a : t1; 
    19      -32    b : t2; 
    20      -32    c : t3; 
    21      -32 procedure identical(var a : t1; var b : t2; var c : t3); 
    22      -44 begin 
    23        3    a[1]:=true; 
    24       13    b[1]:=false; 
    25       21    c[1]:=true 
    26       26 end; 
    27       30  
    28       30 begin 
    29       30    a[1]:=true; 
    30       40    b[1]:=false; 
    31       48    c[1]:=false; 
    32       56    identical(a,b,c); 
    33       61    identical(c,a,b); 
    34       66    identical(b,c,a); 
    35       71    writeln(' PASS...6.4.5-1') 
    36       77 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-1

program complete

Compiling and running t6p4p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks type compatibility of subranges. } 
     4      -32 {  Two types are compatible if they are identical or if one is a 
     5      -32    subrange of the other, or if both are subranges of the same type. 
     6      -32    This program tests these points, but with only subranges of the 
     7      -32    same type having some overlap. } 
     8      -32 {V3.0: Test revised and improved. Was previously 6.4.5-6. } 
     9      -32  
    10      -32 program t6p4p5d2(output); 
    11      -32 type 
    12      -32    colour   = (red,pink,orange,yellow,green,blue,brown); 
    13      -32    colourtoo= colour; 
    14      -32 var 
    15      -32    col1  : colour; 
    16      -32    col2  : colourtoo; 
    17      -32    subcol1  : red..yellow; 
    18      -32    subcol2  : orange..blue; 
    19      -32    counter : 0..3; 
    20      -32 begin 
    21        3    counter := 0; 
    22        8    col1:=red; 
    23       11    col2:=red; 
    24       14    if col1 = col2 then counter:=counter+1; 
    25       23    subcol1:=red; 
    26       26    if col1 = subcol1 then counter:=counter+1; 
    27       35    subcol1:=yellow; 
    28       38    subcol2:=yellow; 
    29       41    if subcol1 = subcol2 then counter:=counter+1; 
    30       50    if counter = 3 then 
    31       54       writeln(' PASS...6.4.5-2') 
    32       60    else 
    33       63       writeln(' FAIL...6.4.5-2') 
    34       69 end. 
brown      unreferenced
green      unreferenced
pink       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-2

program complete

Compiling and running t6p4p5d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.5-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that two subranges of the same type with 
     4      -32    no overlap are considered as compatible by the processor. } 
     5      -32 {V3.0: Comment and write revised. Was previously 6.4.5-7. } 
     6      -32  
     7      -32 program t6p4p5d3(output); 
     8      -32 type 
     9      -32    color = (red,pink,orange,yellow,green,blue,brown); 
    10      -32 var 
    11      -32    col1 : red..yellow; 
    12      -32    col2 : green..brown; 
    13      -32 begin 
    14        3    col1:=yellow; 
    15        8    col2:=green; 
    16       11    if col1 < col2 then writeln(' PASS...6.4.5-3') 
    17       21                   else writeln(' FAIL...6.4.5-3') 
    18       30 end. 
blue       unreferenced
orange     unreferenced
pink       unreferenced
color      unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-3

program complete

Compiling and running t6p4p5d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.5-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that string types with the same number 
     4      -32    of components are compatible. } 
     5      -32 {  Was previously 6.4.5-8. } 
     6      -32 {V3.1: Writes changed. } 
     7      -32  
     8      -32 program t6p4p5d4(output); 
     9      -32 var 
    10      -32    string1 : packed array[1..4] of char; 
    11      -32    string2 : packed array[1..4] of char; 
    12      -32 begin 
    13        3    string1:='ABCD'; 
    14        8    string2:='EFGH'; 
    15       11    if 'ABC' = 'ABC' then 
    16       15       if string1 <> string2 then 
    17       19          writeln(' PASS...6.4.5-4') 
    18       25       else 
    19       28          writeln(' FAIL...6.4.5-4, STRINGS(1)') 
    20       34    else 
    21       37       writeln(' FAIL...6.4.5-4, STRINGS(2)') 
    22       43 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-4

program complete

Compiling and running t6p4p5d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.5-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the type-compatibility rules for sets. } 
     4      -32 {  Set-types are compatible if their base-types are compatible 
     5      -32    which means identical or subranges thereof, and are jointly 
     6      -32    packed or unpacked.  This test tries several combinations 
     7      -32    which should be allowed. } 
     8      -32 {V3.1: Old test completely rewritten. } 
     9      -32  
    10      -32 program t6p4p5d5(output); 
    11      -32 type 
    12      -32    colour  = (red,pink,orange,yellow,green,blue,brown); 
    13      -32    CharSet = set of char; 
    14      -32 var 
    15      -32    cseti  : CharSet; 
    16      -32    cset1  : set of char;      { different, but compatible with above } 
    17      -32    cset2  : set of 'A'..'Z'; 
    18      -32    cset3  : set of '0'..'9'; 
    19      -32    eset1  : set of colour; 
    20      -32    eset2  : set of red..orange; 
    21      -32    eset3  : set of orange..brown; 
    22      -32 begin 
    23        3    cseti:=['0'..'9']; 
    24        8    cset1:=[]; cset2:=['A','Z']; cset3:=['0'..'9']; 
    25       17    eset1:=[]; eset2:=[orange]; eset3:=[orange]; 
    26       26    if (cseti+cset1 = (cset3-cset2)*cseti) and 
    27       35       (eset1+eset2 = eset3-eset1) 
    28       42    then 
    29       44       writeln(' PASS...6.4.5-5') 
    30       50    else 
    31       53       writeln(' FAIL...6.4.5-5') 
    32       59 end. 
blue       unreferenced
green      unreferenced
pink       unreferenced
yellow     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-5

program complete

Compiling and running t6p4p5d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.4.5-6, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that if two types are declared identical, 
     5      -32    they inherit all properties in common, including operators and 
     6      -32    special attributes. } 
     7      -32 {  This is checked by an analogue of type boolean. } 
     8      -32 {V3.0: Comment and writes revised. Was previously 6.4.5-12. } 
     9      -32  
    10      -32 program t6p4p5d6(output); 
    11      -32 const 
    12      -32    on=true; 
    13      -32    off=false; 
    14      -32 type 
    15      -32    logical=boolean; 
    16      -32 var 
    17      -32    test:integer; 
    18      -32    b1,b2:boolean; 
    19      -32    l1,l2:logical; 
    20      -32 begin 
    21        3    test:=0; 
    22        7    b1:=true;   b2:=off; 
    23       13    l1:=true;   l2:=off; 
    24       19    if l2 then test:=test+1; 
    25       25    l2:=b2; 
    26       28    if b1=b2 then test:=test+1; 
    27       36    b2:=l2; 
    28       39    if b2 or l2 then test:=test+1; 
    29       47    if test=0 then 
    30       51       writeln(' PASS...6.4.5-6') 
    31       57    else 
    32       60       writeln(' FAIL...6.4.5-6') 
    33       66 end. 
on         unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.5-6

program complete

Compiling and running t6p4p6d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.6-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that assignment compatible types as 
     4      -32    described by the Pascal Standard, are permitted by this 
     5      -32    processor. } 
     6      -32 {  This program tests only those uses in assignment statements. 
     7      -32    All cases have been tested elsewhere, but are included here 
     8      -32    together for consistency. } 
     9      -32 {V3.0: Comment revised. } 
    10      -32  
    11      -32 program t6p4p6d1(output); 
    12      -32 type 
    13      -32    colour = (red,pink,yellow); 
    14      -32    rekord = record 
    15      -32                a : integer; 
    16      -32                b : boolean 
    17      -32             end; 
    18      -32 var 
    19      -32    i     : integer; 
    20      -32    j     : real; 
    21      -32    col1  : colour; 
    22      -32    col2  : pink..yellow; 
    23      -32    col3  : set of colour; 
    24      -32    col4  : set of red..pink; 
    25      -32    urray1   : array[1..6] of integer; 
    26      -32    urray2   : array[1..4] of integer; 
    27      -32    record1  : rekord; 
    28      -32    record2  : rekord; 
    29      -32 begin 
    30        3    i:=2; 
    31        7    j:=i; 
    32       10    col1:=yellow; 
    33       13    col2:=col1; 
    34       16    col3:=[pink]; 
    35       19    col4:=col3; 
    36       22    urray2[1]:=0; 
    37       29    urray1[6]:=urray2[1]; 
    38       41    record1.a:=2; 
    39       43    record1.b:=true; 
    40       46    record2:=record1; 
    41       49    writeln(' PASS...6.4.6-1') 
    42       55 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.6-1

program complete

Compiling and running t6p4p6d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.6-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the use of assignment compatibility in actual 
     4      -32    and formal parameters. } 
     5      -32 {  Similar to 6.4.6-1. } 
     6      -32 {V3.0: Comment revised. } 
     7      -32  
     8      -32 program t6p4p6d2(output); 
     9      -32 type 
    10      -32    colour = (red,pink,yellow,green); 
    11      -32    subcol1 = yellow..green; 
    12      -32    subcol2 = set of colour; 
    13      -32    subcol3 = set of pink..green; 
    14      -32 var 
    15      -32    a        : integer; 
    16      -32    b        : real; 
    17      -32    colour1  : colour; 
    18      -32    colour2  : pink..green; 
    19      -32    colour3  : set of colour; 
    20      -32    colour4  : set of yellow..green; 
    21      -32  
    22      -32 procedure compat(i : integer; j : real; 
    23      -44                  col1 : colour; col2 : subcol1; 
    24      -52                  col3 : subcol2; col4 : subcol3); 
    25     -116 begin 
    26        3 end; 
col4       unreferenced
col3       unreferenced
col2       unreferenced
col1       unreferenced
j          unreferenced
i          unreferenced

    27        6  
    28        6 begin 
    29        6    compat(2,2.4,yellow,yellow,[pink],[pink]); 
    30       20    a:=2; 
    31       22    b:=3.1; 
    32       24    colour1:=pink; 
    33       27    colour2:=green; 
    34       30    colour3:=[yellow]; 
    35       33    colour4:=[yellow]; 
    36       36    compat(a,b,colour1,colour2,colour3,colour4); 
    37       48    compat(a,a,colour2,colour2,colour4,colour4); 
    38       61    writeln(' PASS...6.4.6-2') 
    39       67 end. 
red        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.6-2

program complete

Compiling and running t6p4p6d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.4.6-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that an index expression is assignment-compatible 
     4      -32    with the index-type specified in the definition of the array-type. } 
     5      -32 {V3.0: Comment revised. } 
     6      -32  
     7      -32 program t6p4p6d3(output); 
     8      -32 type 
     9      -32    colour = (red,pink,orange,yellow,green); 
    10      -32    intensity = (bright,dull); 
    11      -32 var 
    12      -32    array1 : array[yellow..green] of boolean; 
    13      -32    array2 : array[colour] of intensity; 
    14      -32    array3 : array[1..99] of integer; 
    15      -32    colour1 : red..yellow; 
    16      -32    i      : integer; 
    17      -32 begin 
    18        3    array1[yellow]:=true; 
    19       14    colour1:=yellow; 
    20       17    array1[colour1]:=false; 
    21       26    array2[colour1]:=bright; 
    22       34    array3[1]:=0; 
    23       41    i:=2; 
    24       43    array3[i*3+2]:=1; 
    25       54    writeln(' PASS...6.4.6-3') 
    26       60 end. 
dull       unreferenced
orange     unreferenced
pink       unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.4.6-3

program complete

Compiling and running t6p5p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.5.1-1, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test contains examples of legal type and variable 
     5      -32    declarations. } 
     6      -32 {V3.1: Program parameters removed. } 
     7      -32  
     8      -32 program t6p5p1d1(output); 
     9      -32 const 
    10      -32    limit = 20; 
    11      -32 type 
    12      -32    natural       = 0..maxint; 
    13      -32    count         = integer; 
    14      -32    range         = integer; 
    15      -32    colour        = (red,yellow,green,blue); 
    16      -32    sex           = (male,female); 
    17      -32    year          = 1900..1999; 
    18      -32    shape         = (triangle,rectangle,circle); 
    19      -32    punchedcard   = array[1..80] of char; 
    20      -32    charsequence  = file of char; 
    21      -32    angle         = real; 
    22      -32    polar         = record 
    23      -32                        r : real; 
    24      -32                        theta : angle 
    25      -32                    end; 
    26      -32    indextype     = 1..limit; 
    27      -32    vector        = array[indextype] of real; 
    28      -32    person        = ^ persondetails; 
    29      -32    persondetails = record 
    30      -32                       name, firstname : charsequence; 
    31      -32                       age : integer; 
    32      -32                       married : boolean; 
    33      -32                       father,child,sibling : person; 
    34      -32                       case s:sex of 
    35      -32                          male   : (enlisted,bearded : boolean); 
    36      -32                          female : (mother,programmer : boolean) 
    37      -32                       end; 
    38      -32    FileOfInteger = file of integer; 
    39      -32  
    40      -32 var 
    41      -32    x,y,z,max: real; 
    42      -32    i,j      : integer; 
    43      -32    k        : 0..9; 
    44      -32    p,q,r    : boolean; 
    45      -32    operator : (plus,minus,times); 
    46      -32    a        : array[0..63] of real; 
    47      -32    c        : colour; 
    48      -32    f        : file of char; 
    49      -32    hue1,hue2: set of colour; 
    50      -32    p1,p2    : person; 
    51      -32    m,m1,m2  : array[1..10,1..10] of real; 
    52      -32    coord    : polar; 
    53      -32    pooltape : array[1..4] of FileOfInteger; 
    54      -32    date     : record 
    55      -32                  month : 1..12; 
    56      -32                  year  : integer 
    57      -32               end; 
    58      -32 begin 
    59        3    writeln(' PASS...6.5.1-1') 
    60       11 end. 
a          unreferenced
c          unreferenced
circle     unreferenced
blue       unreferenced
coord      unreferenced
date       unreferenced
f          unreferenced
hue2       unreferenced
hue1       unreferenced
i          unreferenced
k          unreferenced
j          unreferenced
green      unreferenced
count      unreferenced
m2         unreferenced
m1         unreferenced
m          unreferenced
minus      unreferenced
max        unreferenced
operator   unreferenced
p2         unreferenced
p1         unreferenced
p          unreferenced
plus       unreferenced
pooltape   unreferenced
r          unreferenced
q          unreferenced
punchedcar unreferenced
rectangle  unreferenced
times      unreferenced
y          unreferenced
x          unreferenced
vector     unreferenced
triangle   unreferenced
shape      unreferenced
year       unreferenced
z          unreferenced
yellow     unreferenced
red        unreferenced
range      unreferenced
natural    unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.5.1-1

program complete

Compiling and running t6p5p3p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.5.3.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the two ways of indexing a 
     4      -32    multi-dimensional array are equivalent. } 
     5      -32 {V3.0: Write for PASS shortened. Was previously 6.5.3.2-2. } 
     6      -32  
     7      -32 program t6p5p3p2d1(output); 
     8      -32 var 
     9      -32    a:array[1..4,1..4] of integer; 
    10      -32    b:array[1..4] of 
    11      -32       array[1..4] of integer; 
    12      -32    p:packed array [1..4,1..4]of char; 
    13      -32    q:packed array[1..4] of 
    14      -32       packed array [1..4] of char; 
    15      -32    i,j,counter:integer; 
    16      -32 begin 
    17        3    counter:=0; 
    18        7    for i:= 1 to 4 do 
    19       17       for j:=1 to 4 do 
    20       27       begin 
    21       27          a[i,j] := j; 
    22       38          b[i,j] := j; 
    23       49          case j of 
    24       51          1: 
    25       51            begin 
    26       51                p[i,j]:='F'; 
    27       63                q[i,j]:='F' 
    28       72            end; 
    29       76          2: 
    30       76            begin 
    31       76                p[i,j]:='A'; 
    32       88                q[i,j]:='A' 
    33       97            end; 
    34      101          3: 
    35      101            begin 
    36      101                p[i,j]:='I'; 
    37      113                q[i,j]:='I' 
    38      122            end; 
    39      126          4: 
    40      126            begin 
    41      126                p[i,j]:='L'; 
    42      138                q[i,j]:='L' 
    43      147            end 
    44      150          end 
    45      159       end; 
    46      179    for i:=1 to 4 do 
    47      189       for j:=1 to 4 do 
    48      199       begin 
    49      199          if a[i][j] <> a[i,j] then 
    50      221             counter:=counter+1; 
    51      225          if b[i][j] <> b[i,j] then 
    52      247             counter:=counter+1; 
    53      251          if p[i][j] <> p[i,j] then 
    54      273             counter:=counter+1; 
    55      277          if q[i][j] <> q[i,j] then 
    56      299             counter:=counter+1 
    57      300       end; 
    58      323    if counter=0 then 
    59      327       writeln(' PASS...6.5.3.2-1') 
    60      333    else 
    61      336       writeln(' FAIL...6.5.3.2-1') 
    62      342 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.5.3.2-1

program complete

Compiling and running t6p5p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.5.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that file buffers may be referenced. } 
     4      -32 {  The Pascal Standard states that the existence of a file 
     5      -32    variable f with components of type T implies the existence 
     6      -32    of a buffer variable of type T. 
     7      -32    Only the one component of a file variable determined by the 
     8      -32    current file position is directly accessible. } 
     9      -32 {V3.1: Program parameter removed. } 
    10      -32  
    11      -32 program t6p5p5d1(output); 
    12      -32 type 
    13      -32    rekord = record 
    14      -32                urray : array[1..2] of char; 
    15      -32                a : integer; 
    16      -32                b : real 
    17      -32             end; 
    18      -32 var 
    19      -32    fyle : file of rekord; 
    20      -32 begin 
    21        3    rewrite(fyle); 
    22        7    fyle^.urray[1]:='O'; 
    23       18    fyle^.urray[2]:='K'; 
    24       29    fyle^.a:=10; 
    25       36    fyle^.b:=2.345; 
    26       43    put(fyle); 
    27       46    with fyle^ do 
    28       51    begin 
    29       51       urray[1]:='O'; 
    30       59       urray[2]:='K'; 
    31       67       a:=4; 
    32       71       b:=3.456 
    33       73    end; 
    34       75    put(fyle); 
    35       78    writeln(' PASS...6.5.5-1') 
    36       84 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.5.5-1

program complete

Compiling and running t6p6p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests the syntax for procedures. } 
     4      -32  
     5      -32 program t6p6p1d1(output); 
     6      -32 var 
     7      -32    a : integer; 
     8      -32    b : real; 
     9      -32 procedure withparameters(g : integer; h : real); 
    10      -44 var 
    11      -44    c : integer; 
    12      -48    d : real; 
    13      -56 begin 
    14        3    c:=g; 
    15        7    d:=h 
    16        7 end; 
    17       10  
    18       10 procedure parameterless; 
    19       10 begin 
    20       10    write(' PASS...6.6.1-1') 
    21       18 end; 
    22       20  
    23       20 begin 
    24       20    a:=1; 
    25       24    b:=2; 
    26       27    withparameters(a,b); 
    27       31    parameterless; 
    28       33    writeln 
    29       33 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.1-1

program complete

Compiling and running t6p6p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the implementation of forward directives, 
     4      -32    recursive activation, and multilevel referencing of a var 
     5      -32    parameter in procedures. } 
     6      -32 {V3.1: Output of FAIL added. } 
     7      -32  
     8      -32 program t6p6p1d2(output); 
     9      -32 var 
    10      -32    c : integer; 
    11      -32  
    12      -32 procedure one(var a : integer); 
    13      -36    forward; 
    14      -36  
    15      -36 procedure two(var b : integer); 
    16      -36 begin 
    17        3    b:=b+1; 
    18       11    one(b) 
    19       13 end; 
    20       15  
    21       15 procedure one; 
    22       15 begin 
    23       15    a:=a+1; 
    24       23    if a = 1 then two(a) 
    25       30 end; 
    26       32  
    27       32 begin 
    28       32    c:=0; 
    29       36    one(c); 
    30       39    if c = 3 then 
    31       43       writeln(' PASS...6.6.1-2') 
    32       49   else 
    33       52      writeln(' FAIL...6.6.1-2') 
    34       58 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.1-2

program complete

Compiling and running t6p6p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program simply tests the syntax for functions. } 
     4      -32 {V3.0: Value check added. Write for FAIL elaborated. } 
     5      -32  
     6      -32 program t6p6p2d1(output); 
     7      -32 var 
     8      -32    a , 
     9      -32    twopisquared : real; 
    10      -32    b : integer; 
    11      -32  
    12      -32 function power(x : real; y : integer):real;  { y>=0 } 
    13      -44 var 
    14      -44    w,z : real; 
    15      -60    i : 0..maxint; 
    16      -64 begin 
    17        3    w:=x; 
    18        7    z:=1; 
    19       10    i:=y; 
    20       13    while i > 0 do 
    21       17    begin 
    22       17       { z*(w tothepower i)=x tothepower y } 
    23       17       if odd(i) then z:=z*w; 
    24       24       i:=i div 2; 
    25       29       w:=sqr(w) 
    26       31    end; 
    27       33    { z=x tothepower y } 
    28       33    power:=z 
    29       33 end; 
    30       36  
    31       36 function twopi : real; 
    32       36 begin 
    33       36    twopi:=6.283185 
    34       38 end; 
    35       41  
    36       41 begin 
    37       41    a:=twopi; 
    38       46    b:=2; 
    39       48    twopisquared:=power(a,b); 
    40       53    if (twopisquared > 39.40) and (twopisquared < 39.50) 
    41       59    then 
    42       61       writeln(' PASS...6.6.2-1') 
    43       67    else 
    44       70       writeln(' FAIL...6.6.2-1') 
    45       76 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.2-1

program complete

Compiling and running t6p6p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that forward declaration and recursion in 
     4      -32    functions is permitted. } 
     5      -32 {  Similar to 6.6.1-2. } 
     6      -32  
     7      -32 program t6p6p2d2(output); 
     8      -32 var 
     9      -32    c : integer; 
    10      -32 function one(a : integer) : integer; 
    11      -36    forward; 
    12      -36  
    13      -36 function two(b : integer) : integer; 
    14      -36 var 
    15      -36    x : integer; 
    16      -40 begin 
    17        3    x:=b+1; 
    18        9    x:=one(x); 
    19       13    two:=x 
    20       13 end; 
    21       16  
    22       16 function one; 
    23       16 var 
    24      -36    y : integer; 
    25      -40 begin 
    26       16    y:=a+1; 
    27       22    if y=1 then y:=two(y); 
    28       30    one:=y 
    29       30 end; 
    30       33  
    31       33 begin 
    32       33    c:=0; 
    33       37    c:=one(c); 
    34       41    if c = 3 then 
    35       45       writeln(' PASS...6.6.2-2') 
    36       51    else 
    37       54       writeln(' FAIL...6.6.2-2') 
    38       60 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.2-2

program complete

Compiling and running t6p6p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the simple types and pointer-types 
     4      -32    are permitted as the result type of a function. } 
     5      -32 {  The Pascal Standard specifies that the result type of a 
     6      -32    function can only be a simple type or a pointer type. } 
     7      -32  
     8      -32 program t6p6p2d3(output); 
     9      -32 type 
    10      -32    subrange = 0..3; 
    11      -32    enumerated = (red,yellow,green); 
    12      -32    rectype = record 
    13      -32                a : integer 
    14      -32              end; 
    15      -32    ptrtype = ^rectype; 
    16      -32 var 
    17      -32    a : real; 
    18      -32    b : integer; 
    19      -32    c : boolean; 
    20      -32    d : subrange; 
    21      -32    e : enumerated; 
    22      -32    f : char; 
    23      -32    g : ptrtype; 
    24      -32  
    25      -32 function one : real; 
    26      -32 begin 
    27        3    one:=2.63 
    28        5 end; 
    29        8 function two : integer; 
    30        8 begin 
    31        8    two:=2 
    32       10 end; 
    33       13 function three : boolean; 
    34       13 begin 
    35       13    three:=false 
    36       15 end; 
    37       19 function four : subrange; 
    38       19 begin 
    39       19    four:=2 
    40       21 end; 
    41       25 function five : enumerated; 
    42       25 begin 
    43       25    five:=yellow 
    44       27 end; 
    45       31 function six : char; 
    46       31 begin 
    47       31    six:='6' 
    48       33 end; 
    49       37 function seven : ptrtype; 
    50       37 begin 
    51       37    seven:=nil 
    52       39 end; 
    53       43  
    54       43 begin 
    55       43    a:=one; 
    56       48    b:=two; 
    57       51    c:=three; 
    58       55    d:=four; 
    59       59    e:=five; 
    60       63    f:=six; 
    61       67    g:=seven; 
    62       71    writeln(' PASS...6.6.2-3') 
    63       77 end. 
green      unreferenced
red        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.2-3

program complete

Compiling and running t6p6p2d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.2-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that functions are permitted from 
     4      -32    altering  their environment (ie. side effects). } 
     5      -32 {  Though side effects are generally not to be encouraged, 
     6      -32    they are part of Standard Pascal and do have genuine uses. 
     7      -32    Functions with side effects occur elsewhere in the 
     8      -32    validation suite. } 
     9      -32 {V3.1: Write statements regularized. } 
    10      -32  
    11      -32 program t6p6p2d4(output); 
    12      -32 type 
    13      -32    ptrtochar = ^char; 
    14      -32 var 
    15      -32    c1,c2,c3,dummy:char; 
    16      -32    p1,p2:ptrtochar; 
    17      -32  
    18      -32 function testa(ptr:ptrtochar):char; 
    19      -36    {sneakiest, uses pointers} 
    20      -36 var 
    21      -36    pp:ptrtochar; 
    22      -40 begin 
    23        3    pp:=ptr; 
    24        8    pp^ := 'P'; 
    25       13    testa:='1' 
    26       13 end; 
    27       17  
    28       17 procedure assign; 
    29       17    {used by testb} 
    30       17 begin 
    31       17    c1:='A' 
    32       19 end; 
    33       23  
    34       23 function testb:char; 
    35       23    {sneaky, calls a procedure} 
    36       23 begin 
    37       23    assign; 
    38       27    testb:='2' 
    39       27 end; 
    40       31  
    41       31 function testc:char; 
    42       31    {blatantly changes the environment via write} 
    43       31 begin 
    44       31   writeln( ' MESSAGE' ); 
    45       41    testc:='6' 
    46       41 end; 
    47       45  
    48       45 function testd:ptrtochar; 
    49       45    {blatantly sneaky: modifying the environment via new 
    50       45       and then passing it out} 
    51       45 var 
    52      -32    pp:ptrtochar; 
    53      -36 begin 
    54       45    new(pp); 
    55       50    pp^:='.'; 
    56       55    testd:=pp 
    57       55 end; 
    58       59  
    59       59 function teste:char; 
    60       59    {the most used side effect:global access} 
    61       59 begin 
    62       59    c2:='S'; 
    63       64    teste:='3' 
    64       64 end; 
    65       68  
    66       68 function testf(var c:char):char; 
    67       68    {straightforward} 
    68       68 begin 
    69       68    c:='S'; 
    70       74    testf:='4' 
    71       74 end; 
    72       78  
    73       78 begin {of main program} 
    74       78    new(p1); 
    75       83    p1^:='F'; c1:='A'; c2:='I'; c3:='L'; 
    76       97    p2:=nil; 
    77      100       {all variables excluding dummy have been assigned values} 
    78      100    dummy:=testa(p1); 
    79      105    dummy:=testb; 
    80      109    dummy:=teste; 
    81      113    dummy:=testf(c3); 
    82      118    p2:=testd; 
    83      122    dummy:=testc; 
    84      126    if (p1^='P') and (c2='S') and (c3='S') then 
    85      140       writeln(' PASS...6.6.2-4') 
    86      146    else 
    87      149       writeln(' FAIL...6.6.2-4') 
    88      155 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 MESSAGE
 PASS...6.6.2-4

program complete

Compiling and running t6p6p3p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the syntax for value-parameter sections and 
     4      -32    variable-parameter sections. } 
     5      -32 {  Includes example of single and multiple identifiers in the 
     6      -32    respective identifier-lists and a check that the correspondence 
     7      -32    of actual and formal parameters is correctly handled with 
     8      -32    identifier-lists. } 
     9      -32 {V3.1: Comment changed to accurately describe test. } 
    10      -32  
    11      -32 program t6p6p3p1d1(output); 
    12      -32 type 
    13      -32    colour   = (red,orange,yellow,green,blue,brown); 
    14      -32    subrange = red..blue; 
    15      -32    rekord   = record 
    16      -32                a : integer 
    17      -32               end; 
    18      -32    ptrtype  = ^rekord; 
    19      -32 var 
    20      -32    a,b,c,d,e,f,g,h,i,j, 
    21      -32    k,l,m,n,o,p,q,r,s,t : integer; 
    22      -32    counter: integer; 
    23      -32    colone : subrange; 
    24      -32    coltwo : colour; 
    25      -32    colthree : colour; 
    26      -32    u,v,w,x : real; 
    27      -32    y,z : boolean; 
    28      -32    ptr : ptrtype; 
    29      -32  
    30      -32 procedure testone(a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1, 
    31      -32                   l1,m1,n1,o1,p1,q1,r1,s1,t1 : integer; 
    32     -112                   colourone : subrange; 
    33     -116                   colourtwo,colourthree : colour; 
    34     -124                   u1,v1,w1,x1 : real; 
    35     -156                   y1,z1 : boolean; 
    36     -164                   ptr : ptrtype); 
    37     -168 begin 
    38        3    if (a1 + b1 + c1 + d1 + e1 + f1 + g1 + h1 + i1 + j1 + k1 + l1 + m1 + 
    39       30        n1 + o1 + p1 + q1 + r1 + s1 + t1 = 0) 
    40       46    and (colourone = orange) and (colourtwo = brown) 
    41       53    and (colourthree = red) and (abs(u1 + v1 + w1 + x1) < 0.001) 
    42       68    and (y1 = true) and (z1 = false) 
    43       76    then 
    44       78       counter:=1 
    45       78 end; 
ptr        unreferenced

    46       81 procedure testtwo(var a1,b1,c1,d1,e1,f1,g1,h1,i1,j1,k1, 
    47       81                   l1,m1,n1,o1,p1,q1,r1,s1,t1 : integer; 
    48       81                   var colourone : subrange; 
    49       81                   var colourtwo,colourthree : colour; 
    50       81                   var u1,v1,w1,x1 : real; 
    51       81                   var y1,z1 : boolean; 
    52       81                   var ptr : ptrtype); 
    53       81 begin 
    54       81    if (a1 + b1 + c1 + d1 + e1 + f1 + g1 + h1 + i1 + j1 + k1 + l1 + m1 + 
    55      121        n1 + o1 + p1 + q1 + r1 + s1 + t1 = 0) 
    56      144    and (colourone = orange) and (colourtwo = brown) 
    57      153    and (colourthree = red) and (abs(u1 + v1 + w1 + x1) < 0.001) 
    58      173    and (y1 = true) and (z1 = false) 
    59      183    then 
    60      185       counter:=counter + 2 
    61      186 end; 
ptr        unreferenced

    62      190  
    63      190 begin 
    64      190    a:=0; b:=0; c:=0; d:=0; e:=0; f:=0; g:=0; 
    65      206    h:=0; i:=0; j:=0; k:=0; l:=0; m:=0; n:=0; 
    66      220    o:=0; p:=0; q:=0; r:=0; s:=0; t:=0; 
    67      232    colone:=orange; 
    68      235    coltwo:=brown; 
    69      238    colthree:=red; 
    70      241    u:=0; v:=0; w:=0; x:=0; 
    71      253    y:=true; 
    72      256    z:=false; 
    73      259    new(ptr); 
    74      262    counter:=0; 
    75      264    testone(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t, 
    76      285            colone,coltwo,colthree,u,v,w,x,y,z,ptr); 
    77      301    testtwo(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t, 
    78      322            colone,coltwo,colthree,u,v,w,x,y,z,ptr); 
    79      333    if counter=3 then 
    80      337       writeln(' PASS...6.6.3.1-1') 
    81      343    else 
    82      346       if counter=2 then 
    83      350          writeln(' FAIL...6.6.3.1-1, VALUE PARAMETERS') 
    84      356       else 
    85      359          if counter=1 then 
    86      363             writeln(' FAIL...6.6.3.1-1, VAR PARAMETERS') 
    87      369          else 
    88      372             writeln(' FAIL...6.6.3.1-1, PARAMETERS') 
    89      378 end. 
green      unreferenced
yellow     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.1-1

program complete

Compiling and running t6p6p3p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that set, record and array parameters are 
     4      -32    permitted. } 
     5      -32 {  Similar to 6.6.3.1-1. } 
     6      -32 {V3.0: Value check added. 
     7      -32    Writes altered to conform to convention. } 
     8      -32  
     9      -32 program t6p6p3p1d2(output); 
    10      -32 type 
    11      -32    sett     = set of 0..20; 
    12      -32    rekord   = record 
    13      -32                a : integer 
    14      -32               end; 
    15      -32    urray    = array[boolean] of boolean; 
    16      -32 var 
    17      -32    counter : integer; 
    18      -32    setone, settwo,setthree,setfour,setfive,setsix : sett; 
    19      -32    recone,rectwo,recthree,recfour,recfive : rekord; 
    20      -32    urrayone,urraytwo,urraythree,urrayfour : urray; 
    21      -32  
    22      -32 procedure testone(set1,set2,set3,set4,set5,set6 : sett; 
    23     -224                   rec1,rec2,rec3,rec4,rec5 : rekord; 
    24     -244                   urray1,urray2,urray3,urray4 : urray); 
    25     -288 begin 
    26        3    if (set1 + set2 + set3 + set4 + set5 + set6 = [1]) 
    27       45    and (rec1.a + rec2.a + rec3.a + rec4.a + rec5.a = 5) 
    28       56    and ((not urray1[true]) and (not urray2[true]) 
    29       71    and (not urray3[true]) and (not urray4[true])) 
    30       88    then 
    31       90       counter:=1 
    32       90 end; 
    33       93  
    34       93 procedure testtwo(var set1,set2,set3,set4,set5,set6 : sett; 
    35       93                   var rec1,rec2,rec3,rec4,rec5 : rekord; 
    36       93                   var urray1,urray2,urray3,urray4 : urray); 
    37       93 begin 
    38       93    if (set1 + set2 + set3 + set4 + set5 + set6 = [1]) 
    39      114    and (rec1.a + rec2.a + rec3.a + rec4.a + rec5.a = 5) 
    40      130    and ((not urray1[true]) and (not urray2[true]) 
    41      145    and (not urray3[true]) and (not urray4[true])) 
    42      162    then 
    43      164       counter:=counter + 2 
    44      165 end; 
    45      169  
    46      169 begin 
    47      169    setone:=[1];   settwo:=[1];   setthree:=[1]; 
    48      180    setfour:=[1];  setfive:=[1];  setsix:=[1]; 
    49      189    recone.a:=1;   rectwo.a:=1;   recthree.a:=1; 
    50      195    recfour.a:=1;  recfive.a:=1; 
    51      199    urrayone[true]:=false;  urraytwo[true]:=false; 
    52      215    urraythree[true]:=false;   urrayfour[true]:=false; 
    53      231    counter:=0; 
    54      233    testone(setone,settwo,setthree,setfour,setfive,setsix, 
    55      246             recone,rectwo,recthree,recfour,recfive, 
    56      251             urrayone,urraytwo,urraythree,urrayfour); 
    57      256    testtwo(setone,settwo,setthree,setfour,setfive,setsix, 
    58      263             recone,rectwo,recthree,recfour,recfive, 
    59      268             urrayone,urraytwo,urraythree,urrayfour); 
    60      273    if counter=3 then 
    61      277       writeln(' PASS...6.6.3.1-2') 
    62      283    else 
    63      286       if counter=2 then 
    64      290          writeln(' FAIL...6.6.3.1-2, VALUE PARAMETERS') 
    65      296       else 
    66      299          if counter=1 then 
    67      303             writeln(' FAIL...6.6.3.1-2, VAR PARAMETERS') 
    68      309          else 
    69      312             writeln(' FAIL...6.6.3.1-2, PARAMETERS') 
    70      318 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.1-2

program complete

Compiling and running t6p6p3p1d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.1-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that files may be passed to procedures 
     4      -32    as parameters. } 
     5      -32 {  A file is a type, and any type may be passed as 
     6      -32    a parameter. } 
     7      -32 {V3.1: Program parameter removed. } 
     8      -32  
     9      -32 program t6p6p3p1d3(output); 
    10      -32 type 
    11      -32    fyle = text; 
    12      -32 var 
    13      -32    elyf : fyle; 
    14      -32 procedure test(var anyfile : fyle); 
    15      -36 begin 
    16        3    rewrite(anyfile); 
    17        7    writeln(anyfile,'THIS FILE WAS A PARAMETER'); 
    18       14    writeln(' PASS...6.6.3.1-3') 
    19       20 end; 
    20       23 begin 
    21       23    test(elyf) 
    22       27 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.1-3

program complete

Compiling and running t6p6p3p1d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.1-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the scope conformance of procedural 
     4      -32    parameters. } 
     5      -32 {  When a procedure (or function) with a parameter list is 
     6      -32    included in the formal parameter list of another procedure 
     7      -32    (or function), the identifiers in the parameter list of the 
     8      -32    procedure parameter have defining occurences for that list 
     9      -32    and the corresponding block for the procedure only, and not 
    10      -32    for the block of the procedure to which it is passed. 
    11      -32    The example in this program should be passed by the processor. } 
    12      -32 {V3.0: Last line is now: conforms(alsoconforms) 
    13      -32    Test was previously 6.6.3.1-5. } 
    14      -32  
    15      -32 program t6p6p3p1d4(output); 
    16      -32 var 
    17      -32    i : integer; 
    18      -32 procedure alsoconforms(x : integer); 
    19      -36 begin 
    20        3    writeln(' PASS...6.6.3.1-4') 
    21       11 end; 
x          unreferenced

    22       14  
    23       14 procedure conforms(procedure alsoconforms(x : integer)); 
    24       14    var x : boolean; 
    25      -41 begin 
    26       14    x:=true; 
    27       19    alsoconforms(1) 
    28       21 end; 
    29       24  
    30       24 begin 
    31       24    i:=2; 
    32       28    conforms(alsoconforms) 
    33       30 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.1-4

program complete

Compiling and running t6p6p3p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that variable parameters have been 
     4      -32    implemented correctly. } 
     5      -32 {  Jensen and Wirth state that the actual variables corresponding 
     6      -32    to formal variable parameters should be distinct. The axiomatic 
     7      -32    definition also includes non-local variables used by the 
     8      -32    procedure in this restriction. } 
     9      -32 {V3.0: New test. } 
    10      -32  
    11      -32 program t6p6p3p3d1(output); 
    12      -32 var a, b: integer; 
    13      -32 procedure swap(var p, q: integer); 
    14      -40    var temp: integer; 
    15      -44    begin 
    16        3    temp := p; 
    17        8    p := q; 
    18       12    q := temp 
    19       13    end; 
    20       16 begin 
    21       16    a := 1;  b := 2; 
    22       22    swap(a, b); 
    23       26    swap(a, a); 
    24       30    if (b <> 1) or (a <> 2) then 
    25       38      writeln(' FAIL...6.6.3.3-1') 
    26       44    else 
    27       47      writeln(' PASS...6.6.3.3-1') 
    28       53 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.3-1

program complete

Compiling and running t6p6p3p3d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.6.3.3-2, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that any operation involving the formal 
     5      -32    parameter is performed immediately on the actual parameter. } 
     6      -32 {  Depending on how variable parameter passing is implemented, 
     7      -32    this test may cause some processors to fail. } 
     8      -32 {V3.0: Write for FAIL elaborated. } 
     9      -32  
    10      -32 program t6p6p3p3d2(output); 
    11      -32 var 
    12      -32    direct : integer; 
    13      -32    pass  : boolean; 
    14      -32 procedure indirection(var indirect : integer; var result : boolean); 
    15      -40    begin 
    16        3       indirect:=2; 
    17        8       if indirect<>direct then 
    18       13          result:=false 
    19       14       else 
    20       18          result:=true 
    21       19    end; 
    22       23 begin 
    23       23    direct:=1; 
    24       27    pass:=false; 
    25       30    indirection(direct,pass); 
    26       34    if pass then 
    27       36       writeln(' PASS...6.6.3.3-2') 
    28       42    else 
    29       45       writeln(' FAIL...6.6.3.3-2') 
    30       51 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.3-2

program complete

Compiling and running t6p6p3p3d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.3-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that if a variable passed as a parameter 
     4      -32    involves the indexing of an array, or the dereferencing of a 
     5      -32    pointer, then these actions are executed before the activation 
     6      -32    of the block. } 
     7      -32 {V3.0: Rewritten to include type rekptr = ^rekord 
     8      -32    Write for FAIL elaborated. } 
     9      -32  
    10      -32 program t6p6p3p3d3(output); 
    11      -32 type 
    12      -32    rekptr = ^rekord; 
    13      -32    rekord = record 
    14      -32                a : integer; 
    15      -32                link : rekptr; 
    16      -32                back : rekptr 
    17      -32             end; 
    18      -32 var 
    19      -32    urray : array[1..2] of integer; 
    20      -32    i     : integer; 
    21      -32    temptr,ptr : rekptr; 
    22      -32 procedure call(arrayloctn : integer; 
    23      -36                ptrderef : integer); 
    24      -40    begin 
    25        3       i:=i+1; 
    26        9       ptr:=ptr^.link; 
    27       14       if (urray[i-1] <> arrayloctn) or 
    28       24          (ptr^.back^.a <> ptrderef) then 
    29       33          writeln(' FAIL...6.6.3.3-3') 
    30       39       else 
    31       42          writeln(' PASS...6.6.3.3-3') 
    32       48    end; 
    33       51 begin 
    34       51    urray[1]:=1; 
    35       60    urray[2]:=2; 
    36       67    i:=1; 
    37       69    new(ptr); 
    38       72    ptr^.a:=1; 
    39       76    new(temptr); 
    40       79    temptr^.a:=2; 
    41       83    ptr^.link:=temptr; 
    42       89    temptr^.back:=ptr; 
    43       95    call(urray[i],ptr^.a) 
    44      105 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.3-3

program complete

Compiling and running t6p6p3p3d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {$s} 
     2      -32 {TEST 6.6.3.3-6, CLASS=CONFORMANCE} 
     3      -32  
     4      -32 {: This test checks that non-text file parameters are accepted. } 
     5      -32 {  This test explores the use of files of type other than text 
     6      -32    (or file of char) as var parameters to establish that they are 
     7      -32    implemented.  Only local files can be tested; whether external files 
     8      -32    can be of these types is implementation-dependent (and may be 
     9      -32    omitted from an implementation therefore). } 
    10      -32 {V3.1: New test. } 
    11      -32  
    12      -32 program t6p6p3p3d6(output); 
    13      -32 var 
    14      -32    ix : integer; 
    15      -32    result : (pass,fail); 
    16      -32  
    17      -32    function random : integer; 
    18      -32    var 
    19      -32       ni,k,r:integer; 
    20      -44    begin 
    21        3       k:=ix div 177; r:=ix-k*177; 
    22       15       ni:=-2*k+171*r; 
    23       24       if ni<0 then ix:=ni+30269 else ix:=ni; 
    24       35       random:=ix 
    25       35    end; 
    26       38  
    27       38    procedure Unions; 
    28       38    const 
    29      -32       Limit=131; 
    30      -32    type 
    31      -32       Three = (Nul,One,Two); 
    32      -32       Data = record 
    33      -32               case p:Three of 
    34      -32                  Two: (q,r:integer); 
    35      -32                  One: (s:boolean); 
    36      -32                  Nul: () 
    37      -32              end; 
    38      -32       FileKind = file of Data;  {Defined at lex level 2 } 
    39      -32    var 
    40      -32       f : FileKind; 
    41      -45       a : Data; 
    42      -60       j : 0..maxint; 
    43      -64  
    44      -64       procedure first; 
    45      -32       begin 
    46       38          a.p:=Nul 
    47       41       end; 
    48       45  
    49       45       procedure next; 
    50       45       var try:0..2; 
    51      -36       begin 
    52       45          try:=random mod 3; 
    53       53          case try of 
    54       55             0: a.p:=Nul; 
    55       60             1: begin 
    56       60                   a.p:=One; a.s:=random>15000 
    57       70                end; 
    58       75             2: begin 
    59       75                   a.p:=Two; a.q:=random; a.r:=random 
    60       90                end 
    61       93          end 
    62      101       end; 
    63      102  
    64      102       function notsame(var g:FileKind):boolean; 
    65      102       { Parameter into lex level 3 } 
    66      102       begin 
    67      102          if a.p <> g^.p then 
    68      112             notsame:=true 
    69      112          else begin 
    70      116             case a.p of 
    71      119                Nul: notsame:=false; 
    72      123                One: notsame:=a.s<>g^.s; 
    73      142                Two: notsame:=(a.q<>g^.q)or(g^.r<>a.r) 
    74      174             end 
    75      185          end 
    76      185       end; 
    77      186  
    78      186       procedure Create(var g:FileKind); 
    79      186       { Parameter into lex level 3 } 
    80      186       var 
    81      -36          i : 1..Limit; 
    82      -40  
    83      -40          procedure Move(var h:FileKind); 
    84      -36          { Parameter into lex level 4 } 
    85      -36          begin 
    86      186             h^:=a; put(h) 
    87      197          end; 
    88      198  
    89      198       begin 
    90      198          rewrite(g); 
    91      202          ix:=1; first; 
    92      206          for i:=1 to Limit do begin 
    93      217             Move(g); next 
    94      220          end; 
    95      233       end; 
    96      234  
    97      234    begin 
    98      234       Create(f); 
    99      239       reset(f); j:=0; 
   100      244       ix:=1; first; 
   101      248       while not eof(f) do begin 
   102      252          if notsame(f) then result:=fail; 
   103      259          j:=succ(j); get(f); next 
   104      266       end; 
   105      269       if j<>Limit then result:=fail 
   106      273    end; 
   107      277  
   108      277 begin 
   109      277    result:=pass;  { anticipatory } 
   110      282    Unions; 
   111      284    if result=pass then 
   112      288       writeln(' PASS...6.6.3.3-6') 
   113      294    else 
   114      297       writeln(' FAIL...6.6.3.3-6') 
   115      303 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.3-6

program complete

Compiling and running t6p6p3p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that procedures may be passed to other 
     4      -32    procedures and functions as parameters. } 
     5      -32 {V3.0: Test modified slightly to add write for FAIL. } 
     6      -32  
     7      -32 program t6p6p3p4d1(output); 
     8      -32 var 
     9      -32    i,counter : integer; 
    10      -32 procedure a; 
    11      -32    begin 
    12        3       counter:=1 
    13        5    end; 
    14        8 procedure b(procedure e); 
    15        8    begin 
    16        8       e 
    17       10    end; 
    18       14 procedure c; 
    19       14    begin 
    20       14       counter:=counter+1 
    21       17    end; 
    22       21 function d(procedure e) : integer; 
    23       21    begin 
    24       21       e; 
    25       26       d:=counter 
    26       26    end; 
    27       29  
    28       29 begin 
    29       29    b(a); 
    30       34    i:=d(c); 
    31       38    if i=2 then 
    32       42       writeln(' PASS...6.6.3.4-1') 
    33       48    else 
    34       51       writeln(' FAIL...6.6.3.4-1') 
    35       57 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.4-1

program complete

Compiling and running t6p6p3p4d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.4-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the environment of procedural parameters. } 
     4      -32 {V3.0: Corrected parameters of p and q. 
     5      -32    Writes for FAIL elaborated. } 
     6      -32  
     7      -32 program t6p6p3p4d2(output); 
     8      -32 var 
     9      -32    globalone, globaltwo : integer; 
    10      -32 procedure p(procedure f(procedure a;procedure b);procedure g); 
    11      -48    var 
    12      -48       localtop : integer; 
    13      -52    procedure r; 
    14      -32       begin 
    15        3          if globalone=1 then 
    16        9          begin 
    17        9             if (globaltwo<>2) or (localtop<>1) then 
    18       17                writeln(' FAIL...6.6.3.4-2,', 
    19       23                        ' PROCEDURAL PARAMETERS (1)') 
    20       27          end 
    21       29          else 
    22       30             if globalone=2 then 
    23       34             begin 
    24       34                if (globaltwo<>2) or (localtop<>2) then 
    25       42                   writeln(' FAIL...6.6.3.4-2,', 
    26       48                           ' PROCEDURAL PARAMETERS (2)') 
    27       52                else 
    28       55                   writeln(' PASS...6.6.3.4-2') 
    29       61             end 
    30       63             else 
    31       64                writeln(' FAIL...6.6.3.4-2,', 
    32       70                        ' PROCEDURAL PARAMETERS (3)'); 
    33       76          globalone:=globalone+1 
    34       77       end;     { of r } 
    35       81    begin    { of p } 
    36       81       globaltwo:=globaltwo+1; 
    37       87       localtop:=globaltwo; 
    38       89       if globaltwo=1 then 
    39       93          p(f,r) 
    40       96       else 
    41       98          f(g,r) 
    42      101    end;     { of p } 
    43      104 procedure q(procedure f;procedure g); 
    44      104    begin 
    45      104       f; 
    46      109       g 
    47      109    end; 
    48      113 procedure dummy; 
    49      113 begin 
    50      113    writeln(' FAIL...6.6.3.4-2, PROCEDURAL PARAMETERS (4)') 
    51      121 end; 
    52      124  
    53      124 begin 
    54      124    globalone:=1; 
    55      128    globaltwo:=0; 
    56      130    p(q,dummy) 
    57      133 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.4-2

program complete

Compiling and running t6p6p3p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.3.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that functions may be passed to procedures 
     4      -32    and functions as parameters. } 
     5      -32 {  Similar to 6.6.3.4-1. } 
     6      -32 {V3.0: Test modified slightly to add write for FAIL. } 
     7      -32  
     8      -32 program t6p6p3p5d1(output); 
     9      -32 var 
    10      -32    i,counter : integer; 
    11      -32 function a : integer; 
    12      -32    begin 
    13        3       a:=1 
    14        5    end; 
    15        8 procedure b(function e : integer); 
    16        8    begin 
    17        8       counter:=e 
    18       10    end; 
    19       15 function d(function e : integer) : integer; 
    20       15    begin 
    21       15       d:=counter+e 
    22       18    end; 
    23       24  
    24       24 begin 
    25       24    b(a); 
    26       29    i:=d(a); 
    27       33    if i=2 then 
    28       37       writeln(' PASS...6.6.3.5-1') 
    29       43    else 
    30       46       writeln(' FAIL...6.6.3.5-1') 
    31       52 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.3.5-1

program complete

Compiling and running t6p6p4p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.4.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that predefined standard procedures may 
     4      -32    be redefined with no conflict. } 
     5      -32 {V3.0: Write for FAIL elaborated. } 
     6      -32  
     7      -32 program t6p6p4p1d1(output); 
     8      -32 var 
     9      -32    i : integer; 
    10      -32 procedure write(var a : integer); 
    11      -36    begin 
    12        3       a:=a+2 
    13        8    end; 
    14       12 procedure get(var a : integer); 
    15       12    begin 
    16       12       a:=a*2 
    17       17    end; 
    18       21  
    19       21 begin 
    20       21    i:=0; 
    21       25    write(i); 
    22       28    get(i); 
    23       31    if i=4 then 
    24       35       writeln(' PASS...6.6.4.1-1') 
    25       41    else 
    26       44       writeln(' FAIL...6.6.4.1-1') 
    27       50 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.4.1-1

program complete

Compiling and running t6p6p4p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.4.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a predefined function can be redefined. } 
     4      -32 {V3.1: Comment corrected. } 
     5      -32  
     6      -32 program t6p6p4p1d2(output); 
     7      -32 var 
     8      -32    x: integer; 
     9      -32  
    10      -32 function abs(y:integer): integer; 
    11      -36    begin 
    12        3    abs := 0 
    13        5    end; 
y          unreferenced

    14        8  
    15        8 begin 
    16        8    x := 10; 
    17       12    if abs(x)=0 then 
    18       18       writeln(' PASS...6.6.4.1-2') 
    19       24    else 
    20       27       writeln(' FAIL...6.6.4.1-2') 
    21       33 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.4.1-2

program complete

Compiling and running t6p6p5p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program writes an empty file and then checks that 
     4      -32    eof is true. } 
     5      -32 {V3.1: Program parameter removed. Comment rewritten. } 
     6      -32  
     7      -32 program t6p6p5p2d1(output); 
     8      -32 var 
     9      -32    fyle : text; 
    10      -32 begin 
    11        3    rewrite(fyle); 
    12        7    reset(fyle); 
    13        9    if eof(fyle) then 
    14       12       writeln(' PASS...6.6.5.2-1') 
    15       18    else 
    16       21       writeln(' FAIL...6.6.5.2-1') 
    17       27 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.2-1

program complete

Compiling and running t6p6p5p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that the first element of the file fyle 
     4      -32    is assigned to the buffer variable fyle^ when the procedure 
     5      -32    reset is used with the file. } 
     6      -32 {V3.1: Program parameter removed. } 
     7      -32  
     8      -32 program t6p6p5p2d2(output); 
     9      -32 var 
    10      -32    fyle : text; 
    11      -32 begin 
    12        3    rewrite(fyle); 
    13        7    writeln(fyle,'ABC'); 
    14       14    writeln(fyle,'DEF'); 
    15       21    reset(fyle); 
    16       23    if fyle^='A' then 
    17       30       writeln(' PASS...6.6.5.2-2') 
    18       36    else 
    19       39       writeln(' FAIL...6.6.5.2-2') 
    20       45 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.2-2

program complete

Compiling and running t6p6p5p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that a rewrite on the file sets 
     4      -32    eof to be true. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p6p5p2d3(output); 
     8      -32 var 
     9      -32    fyle : text; 
    10      -32 begin 
    11        3    rewrite(fyle); 
    12        7    if eof(fyle) then 
    13       10       writeln(' PASS...6.6.5.2-3') 
    14       16    else 
    15       19       writeln(' FAIL...6.6.5.2-3') 
    16       25 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.2-3

program complete

Compiling and running t6p6p5p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the procedure new has 
     4      -32    been implemented. Both forms of new are tested. } 
     5      -32 {V3.1: Real removed. } 
     6      -32  
     7      -32 program t6p6p5p3d1(output); 
     8      -32 type 
     9      -32    two      = (a,b); 
    10      -32    recone   = record 
    11      -32                i : integer; 
    12      -32                j : boolean 
    13      -32               end; 
    14      -32    rectwo   = record 
    15      -32                c : integer; 
    16      -32                case tagfield : two of 
    17      -32                   a : (m : integer); 
    18      -32                   b : (n : boolean) 
    19      -32               end; 
    20      -32    recthree = record 
    21      -32                c : integer; 
    22      -32                case tagfield : two of 
    23      -32                   a : (case tagfeeld : two of 
    24      -32                            a : (o : integer); 
    25      -32                            b : (p : char)); 
    26      -32                   b : (q : integer) 
    27      -32               end; 
    28      -32 var 
    29      -32    ptrone : ^recone; 
    30      -32    ptrtwo : ^rectwo; 
    31      -32    ptrthree : ^recthree; 
    32      -32 begin 
    33        3    new(ptrone); 
    34        8    new(ptrtwo,a); 
    35       13    ptrtwo^.tagfield:=a; 
    36       20    new(ptrthree,a,b); 
    37       26    ptrthree^.tagfield:=a; 
    38       33    { This line changed from original, which appears to be incorrect } 
    39       33    {ptrthree^.tagfeeld:=a;} 
    40       33    ptrthree^.tagfeeld:=b; 
    41       45    writeln(' PASS...6.6.5.3-1') 
    42       51 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-1

program complete

Compiling and running t6p6p5p3d15

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-15, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the longer forms of new and dispose behave 
     4      -32    as required. } 
     5      -32 {  Variants specified in new and dispose must be the same, but the 
     6      -32    corresponding case-constants can differ. } 
     7      -32 {V3.1: New test from BNI. } 
     8      -32  
     9      -32 program t6p6p5p3d15(output); 
    10      -32 type 
    11      -32     four=(a,b,c,d); 
    12      -32     five=1..5; 
    13      -32     rec =record 
    14      -32             case tag1:four of 
    15      -32                a:(o:char); 
    16      -32                b,c,d:(case tag2:five of 
    17      -32                          1,2,3:(p:char); 
    18      -32                          4,5:(q:integer)); 
    19      -32          end; 
    20      -32 var 
    21      -32     ptr:^rec; 
    22      -32     ch:char; 
    23      -32     nb:five; 
    24      -32 begin 
    25        3     new(ptr,d,3); 
    26       11     ptr^.tag1:=c; 
    27       17     ptr^.tag2:=2; 
    28       31     ptr^.p:='A'; 
    29       44     ch:=ptr^.p; 
    30       56     nb:=ptr^.tag2; 
    31       68     dispose(ptr,b,1); 
    32       74     writeln (' PASS...6.6.5.3-15'); 
    33       82 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-15

program complete

Compiling and running t6p6p5p3d18

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-18, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that new and dispose can be applied to any kind 
     4      -32    of expressions with pointer values. } 
     5      -32 {V3.1: New test from BNI. } 
     6      -32  
     7      -32 program t6p6p5p3d18(output); 
     8      -32 type 
     9      -32    rec=record 
    10      -32           case tag:boolean of 
    11      -32              true:(a:integer); 
    12      -32              false:(b:^integer); 
    13      -32        end; 
    14      -32    pint=^integer; 
    15      -32 var 
    16      -32    v:array[1..2] of ^rec; 
    17      -32    p:^pint; 
    18      -32 begin 
    19        3    new(p); 
    20        8    new(p^); 
    21       12    p^^:=1; 
    22       18    new(v[p^^],true); 
    23       31    v[1]^.tag:=true; 
    24       42    v[1]^.a:=p^^+2; 
    25       63    new(v[p^^+1],false); 
    26       78    v[2]^.tag:=false; 
    27       89    new(v[2]^.b); 
    28      104    v[2]^.b^:=3; 
    29      120    if (v[1]^.a=v[2]^.b^) 
    30      149       then writeln (' PASS...6.6.5.3-18') 
    31      156       else writeln (' FAIL...6.6.5.3-18') 
    32      165 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-18

program complete

Compiling and running t6p6p5p3d19

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-19, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the new and dispose procedures. } 
     4      -32 {  The DISPOSE procedure deals with an identifying-value, and so it 
     5      -32    can be applied to any pointer-variable having this value. } 
     6      -32 {V3.1: New test from BNI. } 
     7      -32  
     8      -32 program t6p6p5p3d19(output); 
     9      -32 type 
    10      -32    ptr = ^integer; 
    11      -32    rec=record 
    12      -32           case boolean of 
    13      -32              true:(a:integer); 
    14      -32              false:(b:ptr); 
    15      -32        end; 
    16      -32 var 
    17      -32    p,q:^rec; 
    18      -32    g,h:ptr; 
    19      -32 begin 
    20        3    new(p,false); 
    21       10    new(p^.b); 
    22       24    p^.b^:=5; 
    23       39    g:=p^.b; 
    24       53    h:=g; 
    25       56    dispose(g); 
    26       59    new(h); 
    27       62    h^:=7; 
    28       66    p^.b:=h; 
    29       81    q:=p; 
    30       84    dispose(q,false); 
    31       89    writeln(' PASS...6.6.5.3-19') 
    32       95 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-19

program complete

Compiling and running t6p6p5p3d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that new and dispose operate as required. } 
     4      -32 {  However, after a call of dispose pointer should be undefined 
     5      -32    and this is not tested. } 
     6      -32 {V3.0: Comment reworded - undefinition was bad English. } 
     7      -32  
     8      -32 program t6p6p5p3d2(output); 
     9      -32 var 
    10      -32    ptr : ^integer; 
    11      -32    i   : integer; 
    12      -32 begin 
    13        3    for i:=1 to 10 do 
    14       15    begin 
    15       15       new(ptr); 
    16       18       ptr^:=i; 
    17       22       dispose(ptr) 
    18       25    end; 
    19       35    writeln(' PASS...6.6.5.3-2') 
    20       41 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-2

program complete

Compiling and running t6p6p5p3d20

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-20, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains multi-level pointers. } 
     4      -32 {  NEW applied to a pointer to an array and then to its element 
     5      -32    which is itself a pointer. } 
     6      -32 {V3.1: New test from BNI. } 
     7      -32  
     8      -32 program t6p6p5p3d20(output); 
     9      -32 type 
    10      -32    pint=^integer; 
    11      -32    ppint=^pint; 
    12      -32    arr=array[1..2] of ppint; 
    13      -32    parr=^arr; 
    14      -32    pparr=^parr; 
    15      -32 var 
    16      -32    ppi:ppint; 
    17      -32    ppa:pparr; 
    18      -32 begin 
    19        3    new(ppi); 
    20        8    new(ppi^); 
    21       12    ppi^^:=1; 
    22       18    new(ppa); 
    23       21    new(ppa^); 
    24       25    new(ppa^^[ppi^^]); 
    25       39    new(ppa^^[ppi^^]^); 
    26       55    ppa^^[ppi^^]^^:=5; 
    27       73    ppi^^:=ppi^^+1; 
    28       85    new(ppa^^[ppi^^]); 
    29       99    new(ppa^^[ppi^^]^); 
    30      115    ppa^^[ppi^^]^^:=7; 
    31      133    if ppa^^[2]^^-ppa^^[1]^^=ppi^^ 
    32      164       then writeln(' PASS...6.6.5.3-20') 
    33      173       else writeln(' FAIL...6.6.5.3-20') 
    34      182 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-20

program complete

Compiling and running t6p6p5p3d22

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.3-22, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the extended forms of new and dispose. } 
     4      -32 {  A variant can be left unspecified if it is at a deeper level of 
     5      -32    nesting than that specified by cn in new(p,c1,  ,cn). } 
     6      -32 {V3.1: New test from BNI. } 
     7      -32  
     8      -32 program t6p6p5p3d22(output); 
     9      -32 type 
    10      -32    two=1..2; 
    11      -32    colour=(blue,green); 
    12      -32    rec=record 
    13      -32           case col:colour of 
    14      -32              blue:(case two of 
    15      -32                       1:(case boo:boolean of 
    16      -32                             true:(a:char); 
    17      -32                             false:(b:1..4)); 
    18      -32                       2:(c:char)); 
    19      -32              green:(d:char); 
    20      -32 end; 
    21      -32 var 
    22      -32    p:^rec; 
    23      -32 begin 
    24        3    new(p,blue,1); 
    25       11    p^.col:=blue; 
    26       17    p^.boo:=false; 
    27       34    p^.b:=2; 
    28       45    p^.boo:=true; 
    29       62    p^.a:='A'; 
    30       73    dispose(p,blue,1); 
    31       79    writeln(' PASS...6.6.5.3-22') 
    32       85 end. 
two        unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.3-22

program complete

Compiling and running t6p6p5p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.5.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that pack and unpack are 
     4      -32    implemented in this processor. } 
     5      -32 {V3.0: Deleted 'as' in comment. 
     6      -32    Test of pack result added, and write for FAIL elaborated. } 
     7      -32  
     8      -32 program t6p6p5p4d1(output); 
     9      -32 type 
    10      -32    colourtype = (red,pink,orange,yellow,green,blue); 
    11      -32 var 
    12      -32    unone    : array[3..24] of char; 
    13      -32    pacone   : packed array[1..4] of char; 
    14      -32    untwo    : array[4..8] of colourtype; 
    15      -32    pactwo   : packed array[6..7] of colourtype; 
    16      -32    i        : integer; 
    17      -32    colour   : colourtype; 
    18      -32 begin 
    19        3    pacone:='ABCD'; 
    20        8    unpack(pacone,unone,5); 
    21       17    colour:=red; 
    22       20    for i:=4 to 8 do 
    23       30    begin 
    24       30       untwo[i]:=colour; 
    25       38       colour:=succ(colour) 
    26       41    end; 
    27       53    pack(untwo,5,pactwo); 
    28       62    if (unone[5]='A') and (pactwo[7]=orange) then 
    29       80       writeln(' PASS...6.6.5.4-1') 
    30       86    else 
    31       89       writeln(' FAIL...6.6.5.4-1') 
    32       95 end. 
blue       unreferenced
green      unreferenced
pink       unreferenced
yellow     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.5.4-1

program complete

Compiling and running t6p6p6p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the implementation of the arithmetic 
     4      -32    function abs. Both real and integer expressions are used. } 
     5      -32 {  Note: There is also a QUALITY test of the abs function carried 
     6      -32    out as part of test 6.7.2.2-15. } 
     7      -32 {V3.0: Superfluous const pi removed. Write for FAIL revised. 
     8      -32    Comment expanded. } 
     9      -32  
    10      -32 program t6p6p6p2d1(output); 
    11      -32 var 
    12      -32    i, counter : integer; 
    13      -32    r : real; 
    14      -32 function myabs1(i : integer):integer; 
    15      -36    begin 
    16        3       if i<0 then 
    17        9          myabs1:=-i 
    18        9       else 
    19       13          myabs1:=i 
    20       13    end; 
    21       16 function myabs2(r:real):real; 
    22       16    begin 
    23       16       if r<0 then 
    24       23          myabs2:=-r 
    25       23       else 
    26       27          myabs2:=r 
    27       27    end; 
    28       30 begin 
    29       30    counter:=0; 
    30       34    for i:=-10 to 10 do 
    31       45    begin 
    32       45       if abs(i)=myabs1(i) then 
    33       52          counter:=counter+1 
    34       53    end; 
    35       66  
    36       66    r:=-10.3; 
    37       69    while r<10.3 do 
    38       73    begin 
    39       73       if abs(r)=myabs2(r) then 
    40       80          counter:=counter+1; 
    41       84       r:=r+0.9 
    42       85    end; 
    43       89  
    44       89    if counter=44 then 
    45       93       writeln(' PASS...6.6.6.2-1') 
    46       99    else 
    47      102       writeln(' FAIL...6.6.6.2-1') 
    48      108 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.2-1

program complete

Compiling and running t6p6p6p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the implementation of the arithmetic 
     4      -32    function sqr. Both real and integer expressions are used. } 
     5      -32 {  Note: There is also a QUALITY test of the sqr function carried 
     6      -32    out as part of test 6.7.2.2-15. } 
     7      -32 {V3.0: Altered to allow 4 digit accuracy. 
     8      -32    Write for FAIL revised. Comment expanded. } 
     9      -32  
    10      -32 program t6p6p6p2d2(output); 
    11      -32 var 
    12      -32    i,counter : integer; 
    13      -32    variable : real; 
    14      -32 begin 
    15        3    counter := 0; 
    16        7    for i:= -10 to 10 do 
    17       18    begin 
    18       18       if sqr(i) = i*i then 
    19       25          counter := counter + 1 
    20       26    end; 
    21       39    variable := -10.3; 
    22       42    while (variable < 10.3) do 
    23       46    begin 
    24       46       if (abs(sqr(variable) - variable * variable) < 0.001) then 
    25       56          counter := counter+1; 
    26       60       variable := variable + 0.9 
    27       61    end; 
    28       65    if (counter = 44) then 
    29       69       writeln(' PASS...6.6.6.2-2') 
    30       75    else 
    31       78       writeln(' FAIL...6.6.6.2-2') 
    32       84 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.2-2

program complete

Compiling and running t6p6p6p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the implementation of the arithmetic 
     4      -32    functions sin, cos, exp, ln, sqrt, and arctan. } 
     5      -32 {  A rough accuracy test is done, but is not the purpose 
     6      -32    of this program. } 
     7      -32 {V3.0: Accuracy reduced to 4 digits maximum. 
     8      -32    Checks extended to limits both sides of all function 
     9      -32    results. Writes for failure standardised. } 
    10      -32  
    11      -32 program t6p6p6p2d3(output); 
    12      -32 const 
    13      -32    pi = 3.1415926; 
    14      -32 var 
    15      -32    counter : integer; 
    16      -32 begin 
    17        3    counter := 0; 
    18        7    if ((-0.001<sin(pi)) and (sin(pi)<0.001)) and 
    19       17       ((0.70<sin(pi/4)) and (sin(pi/4)<0.71)) then 
    20       34       counter:=counter+1 
    21       35    else 
    22       39       writeln(' FAIL...6.6.6.2-3, SIN FUNCTION'); 
    23       47  
    24       47    if ((-1.001<cos(pi)) and (cos(pi)<-0.999)) and 
    25       58       ((0.70<cos(pi/4)) and (cos(pi/4)<0.71)) then 
    26       75       counter:=counter+1 
    27       76    else 
    28       80       writeln(' FAIL...6.6.6.2-3, COS FUNCTION'); 
    29       88  
    30       88    if ((2.710<exp(1)) and (exp(1)<2.720)) and 
    31       99       ((0.36<exp(-1)) and (exp(-1)<0.37)) and 
    32      113       ((8100<exp(9)) and (exp(9)<8110)) then 
    33      128       counter:=counter+1 
    34      129    else 
    35      133       writeln(' FAIL...6.6.6.2-3, EXP FUNCTION'); 
    36      141  
    37      141    if ((0.999<ln(exp(1))) and (ln(exp(1))<1.001)) and 
    38      154       ((0.69<ln(2)) and (ln(2)<0.70)) then 
    39      167       counter:=counter+1 
    40      168    else 
    41      172       writeln(' FAIL...6.6.6.2-3, LN FUNCTION'); 
    42      180  
    43      180    if ((4.99<sqrt(25)) and (sqrt(25)<5.01)) and 
    44      191       ((5.09<sqrt(26)) and (sqrt(26)<5.10)) then 
    45      204       counter:=counter+1 
    46      205    else 
    47      209       writeln(' FAIL...6.6.6.2-3, SQRT FUNCTION'); 
    48      217  
    49      217    if ((0.090<arctan(0.1)) and (arctan(0.1)<0.10)) and 
    50      226       ((-0.001<arctan(0)) and (arctan(0)<0.001)) then 
    51      240       counter:=counter+1 
    52      241    else 
    53      245       writeln(' FAIL...6.6.6.2-3, ARCTAN FUNCTION'); 
    54      253  
    55      253    if counter=6 then 
    56      257       writeln(' PASS...6.6.6.2-3') 
    57      263 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.2-3

program complete

Compiling and running t6p6p6p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the implementation of the transfer 
     4      -32    functions trunc and round. } 
     5      -32 {V3.1: Output of FAIL added. } 
     6      -32  
     7      -32 program t6p6p6p3d1(output); 
     8      -32 var 
     9      -32    i, 
    10      -32    truncstatus, 
    11      -32    roundstatus : integer; 
    12      -32    j : real; 
    13      -32 begin 
    14        3    truncstatus:=0; 
    15        7    roundstatus:=0; 
    16        9    if (trunc(3.7)=3) and (trunc(-3.7)=-3) then 
    17       21       truncstatus:=truncstatus+1 
    18       22    else 
    19       26       writeln(' FAIL...6.6.6.3-1, TRUNC FUNCTION'); 
    20       34  
    21       34    if (round(3.7)=4) and (round(-3.7)=-4) then 
    22       46       roundstatus:=roundstatus+1 
    23       47    else 
    24       51       writeln(' FAIL...6.6.6.3-1, ROUND FUNCTION'); 
    25       59  
    26       59    j:=0; 
    27       62    for i:=-333 to 333 do 
    28       73    begin 
    29       73       j:=i div 100; 
    30       78       if j<0 then 
    31       83          if (trunc(j-0.5)=round(j)) then 
    32       91             begin 
    33       91                truncstatus:=truncstatus+1; 
    34       95                roundstatus:=roundstatus+1 
    35       96             end 
    36       99          else 
    37      100             writeln(' FAIL...6.6.6.3-1, TRUNC/ROUND FUNCTIONS(1)') 
    38      106       else 
    39      109          if (trunc(j+0.5)=round(j)) then 
    40      117             begin 
    41      117                truncstatus:=truncstatus+1; 
    42      121                roundstatus:=roundstatus+1 
    43      122             end 
    44      125          else 
    45      126             writeln(' FAIL...6.6.6.3-1, TRUNC/ROUND FUNCTIONS(2)') 
    46      132    end; 
    47      144  
    48      144    if (truncstatus=668) and (roundstatus=668) then 
    49      152       writeln(' PASS...6.6.6.3-1') 
    50      158   else 
    51      161       writeln(' FAIL...6.6.6.3-1') 
    52      167 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.3-1

program complete

Compiling and running t6p6p6p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the implementation of the ord 
     4      -32    function. } 
     5      -32 {V3.0: Comment and writes for failure revised. } 
     6      -32  
     7      -32 program t6p6p6p4d1(output); 
     8      -32 type 
     9      -32    colourtype = (red,orange,yellow,green,blue); 
    10      -32 var 
    11      -32    colour   : colourtype; 
    12      -32    some     : orange..green; 
    13      -32    i        : integer; 
    14      -32    counter  : integer; 
    15      -32    ok       : boolean; 
    16      -32 begin 
    17        3    counter:=0; 
    18        7    if (ord(false)=0) and (ord(true)=1) then 
    19       17       counter:=counter+1 
    20       18    else 
    21       22       writeln(' FAIL...6.6.6.4-1, ORD OF BOOLEAN-TYPE'); 
    22       30  
    23       30    if (ord(red)=0) and (ord(orange)=1) and 
    24       39       (ord(yellow)=2) and (ord(green)=3) and 
    25       49       (ord(blue)=4) then 
    26       55       counter:=counter+1 
    27       56    else 
    28       60       writeln(' FAIL...6.6.6.4-1, ORD OF ENUMERATED-TYPE(1)'); 
    29       68  
    30       68    i:=-11; 
    31       71    ok:=true; 
    32       74    while ok do 
    33       76    begin 
    34       76       i:=i+1; 
    35       80       if i>10 then 
    36       84          ok:=false 
    37       84       else 
    38       88          if ord(i)=i then 
    39       93             counter:=counter+1 
    40       94          else 
    41       98          begin 
    42       98             ok:=false; 
    43      101             writeln(' FAIL...6.6.6.4-1, ORD OF INTEGER-TYPE') 
    44      107          end 
    45      109    end; 
    46      110  
    47      110    colour:=blue; 
    48      113    some:=orange; 
    49      116    if ord(colour)=4 then 
    50      121       counter:=counter+1 
    51      122    else 
    52      126       writeln(' FAIL...6.6.6.4-1, ORD OF ENUMERATED-TYPE(2)'); 
    53      134  
    54      134    if ord(some)=1 then 
    55      139       counter:=counter+1 
    56      140    else 
    57      144       writeln(' FAIL...6.6.6.4-1, ORD OF SUBRANGE-TYPE'); 
    58      152  
    59      152    if counter=25 then 
    60      156       writeln(' PASS...6.6.6.4-1') 
    61      162 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.4-1

program complete

Compiling and running t6p6p6p4d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.4-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the implementation of chr. } 
     4      -32 {V3.0: Comment and write for FAIL revised. } 
     5      -32  
     6      -32 program t6p6p6p4d2(output); 
     7      -32 var 
     8      -32    letter : char; 
     9      -32    counter : integer; 
    10      -32 begin 
    11        3    counter:=0; 
    12        7  
    13        7    for letter:='0' to '9' do 
    14       20       if chr(ord(letter))=letter then 
    15       26          counter:=counter+1; 
    16       42  
    17       42    if counter=10 then 
    18       46       writeln(' PASS...6.6.6.4-2') 
    19       52    else 
    20       55       writeln(' FAIL...6.6.6.4-2') 
    21       61 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.4-2

program complete

Compiling and running t6p6p6p4d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.4-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests that the required ordinal functions succ 
     4      -32    and pred. } 
     5      -32 {V3.0: Comment and test completely rewritten to be more 
     6      -32    comprehensive. } 
     7      -32  
     8      -32 program t6p6p6p4d3(output); 
     9      -32 type 
    10      -32    colourtype = (red,orange,yellow,green,blue); 
    11      -32 var 
    12      -32    some    : orange..green; 
    13      -32    i       : integer; 
    14      -32    counter : integer; 
    15      -32    ok      : boolean; 
    16      -32    digit   : char; 
    17      -32 begin 
    18        3    counter:=0; 
    19        7  
    20        7    if succ(false) and not pred(true) then 
    21       16       counter:=counter+1 
    22       17    else 
    23       21       writeln(' FAIL...6.6.6.4-3, SUCC/PRED OF BOOLEAN-TYPE'); 
    24       29  
    25       29    i:=-11; 
    26       32    ok:=true; 
    27       35    while ok do begin 
    28       37       i:=i+1; 
    29       41       if i>10 then 
    30       45          ok:=false 
    31       45       else 
    32       49          if (succ(pred(i))=i) and (succ(succ(i))=i+2) and 
    33       62             (pred(succ(i))=i) and (pred(pred(i))=i-2) then 
    34       77             counter:=counter+1 
    35       78          else begin 
    36       82             writeln(' FAIL...6.6.6.4-3, SUCC/PRED OF INTEGER-TYPE'); 
    37       90             ok:=false 
    38       90             end 
    39       93       end; 
    40       94  
    41       94    for digit:='0' to '8' do 
    42      107       if pred(succ(digit))=digit then 
    43      115          counter:=counter+1 
    44      116       else 
    45      120          writeln(' FAIL...6.6.6.4-3, SUCC/PRED OF CHAR-TYPE'); 
    46      140  
    47      140    if (succ(red)=orange) and (succ(orange)=yellow) and 
    48      151       (succ(yellow)=green) and (succ(green)=blue) then 
    49      164       counter:=counter+1 
    50      165    else 
    51      169       writeln(' FAIL...6.6.6.4-3, SUCC OF ENUMERATED-TYPE'); 
    52      177    if (red=pred(orange)) and (orange=pred(yellow)) and 
    53      188       (yellow=pred(green)) and(green=pred(blue)) then 
    54      201       counter:=counter+1 
    55      202    else 
    56      206       writeln(' FAIL...6.6.6.4-3, PRED OF ENUMERATED-TYPE'); 
    57      214  
    58      214    some:=yellow; 
    59      217    if (succ(some)=green) and (pred(some)=orange) then 
    60      229       counter:=counter+1 
    61      230    else 
    62      234       writeln(' FAIL...6.6.6.4-3, SUCC/PRED OF SUBRANGE-TYPE'); 
    63      242  
    64      242    if counter=34 then 
    65      246       writeln(' PASS...6.6.6.4-3') 
    66      252 end. 
colourtype unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.4-3

program complete

Compiling and running t6p6p6p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the functions eof and eoln. } 
     4      -32 {  Tests  6.4.3.5-2, 6.4.3.5-3, 6.6.5.2-1 and 6.6.5.2-3 are also 
     5      -32    conformance tests incorporating use of these functions. } 
     6      -32 {V3.1: Program parameter and a readln removed also writes changed. } 
     7      -32  
     8      -32 program t6p6p6p5d1(output); 
     9      -32 var 
    10      -32    fyle      : text; 
    11      -32    counter,n : integer; 
    12      -32 begin 
    13        3    counter:=0; 
    14        7    rewrite(fyle); 
    15        9    if eof(fyle) then 
    16       12       counter:=counter+1 
    17       13    else 
    18       17       writeln(' FAIL...6.6.6.5-1, EOF FUNCTION(1)'); 
    19       25    writeln(fyle,'1 2 3'); 
    20       32    reset(fyle); 
    21       34    if eof(fyle) then 
    22       37       writeln(' FAIL...6.6.6.5-1, EOF FUNCTION(2)') 
    23       43    else 
    24       46       counter:=counter+1; 
    25       50    if eoln(fyle) then 
    26       53       writeln(' FAIL...6.6.6.5-1, EOLN FUNCTION(1)') 
    27       59    else 
    28       62       counter:=counter+1; 
    29       66    read(fyle,n); read(fyle,n); read(fyle,n); 
    30       84    if not eoln(fyle) then 
    31       88       writeln(' FAIL...6.6.6.5-1, EOLN FUNCTION(2)') 
    32       94    else 
    33       97       if counter=3 then 
    34      101          writeln(' PASS...6.6.6.5-1') 
    35      107 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.5-1

program complete

Compiling and running t6p6p6p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.6.6.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the function odd. } 
     4      -32 {V3.1: Comment corrected, function changed to be identical to 
     5      -32    Standard. Also section added to test near maxint and -maxint. } 
     6      -32  
     7      -32 program t6p6p6p5d2(output); 
     8      -32 var 
     9      -32    i,counter : integer; 
    10      -32 function myodd(x:integer):boolean; 
    11      -36    begin 
    12        3       myodd := (abs(x) mod 2 = 1) 
    13       11    end; 
    14       14 begin 
    15       14    counter:=0; 
    16       18    for i:=-10 to 10 do 
    17       29       if odd(i) then 
    18       32       begin 
    19       32          if myodd(i) then counter := counter+1 
    20       37       end 
    21       40       else 
    22       41       begin 
    23       41          if not myodd(i) then counter := counter+1 
    24       47       end; 
    25       60    i := maxint - 10; 
    26       64    while i < maxint do 
    27       68       begin 
    28       68       i := i + 1; 
    29       72       if myodd (i) = odd (i) then 
    30       79          counter := counter + 1; 
    31       83       if myodd (-i) = odd (-i) then 
    32       92          counter := counter + 1; 
    33       96       end; 
    34       97    if counter=41 then 
    35      101       writeln(' PASS...6.6.6.5-2') 
    36      107    else 
    37      110       writeln(' FAIL...6.6.6.5-2') 
    38      116 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.6.6.5-2

program complete

Compiling and running t6p7p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the precedence of operators. } 
     4      -32 {V3.0: New test, replacing previous tests 6.7.1-1, 6.7.1-2 
     5      -32    and 6.7.2.1-3. } 
     6      -32  
     7      -32 program t6p7p1d1(output); 
     8      -32 type 
     9      -32    operatorcategory = (boolean,adding,multiplying,relational); 
    10      -32 var 
    11      -32    indicator : set of operatorcategory; 
    12      -32    one,two,three,six,seven,twelve,thirteen : integer; 
    13      -32 begin 
    14        3    one:=1; 
    15        7    two:=2; 
    16        9    three:=3; 
    17       11    six:=6; 
    18       13    seven:=7; 
    19       15    twelve:=12; 
    20       17    thirteen:=13; 
    21       19    indicator:=[]; 
    22       22  
    23       22    if (twelve/six*two < 3.9) or 
    24       32       (twelve div six*two <> 4) or 
    25       40       (thirteen mod six*two <> 2) or 
    26       48       (thirteen*seven mod two <> 1) or 
    27       56       (twelve/six/two > 1.1) or 
    28       67       (twelve div six div two <> 1) or 
    29       75       (twelve div seven mod two <> 1) or 
    30       83       (twelve mod seven div two <> 2) or 
    31       91       (twelve mod seven mod two <> 1) then 
    32      100       indicator:=indicator+[multiplying]; 
    33      105  
    34      105    if (one-two+three <> 2) or 
    35      112       (three-two-one <> 0) then 
    36      121       indicator:=indicator+[adding]; 
    37      126  
    38      126    if (twelve*six+two <> 74) or 
    39      133       (twelve+six*two <> 24) or 
    40      141       (twelve*six-two <> 70) or 
    41      149       (twelve-six*two <> 0) or 
    42      157       (twelve/six+two < 3.9) or 
    43      168       (twelve+six/two < 14.9) or 
    44      179       (twelve/six-two > 0.1) or 
    45      190       (twelve-six/two < 8.9) or 
    46      201       (twelve div six+two <> 4) or 
    47      209       (twelve+six div two <> 15) or 
    48      217       (twelve div six-two <> 0) or 
    49      225       (twelve-six div two <> 9) or 
    50      233       (twelve mod seven+two <> 7) or 
    51      241       (twelve+seven mod two <> 13) or 
    52      249       (twelve mod seven-two <> 3) or 
    53      257       (twelve-seven mod two <> 11) then 
    54      266       indicator:=indicator+[adding,multiplying]; 
    55      271  
    56      271    if (not true and false) or 
    57      275       not(not false or true) or 
    58      281       not(true or false and false) then 
    59      289       indicator:=indicator+[boolean]; 
    60      294  
    61      294    if not(false and true=false) or 
    62      300       not(false=true and false) or 
    63      307       not(false and true<>true) or 
    64      314       not(true<>true and false) or 
    65      321       not(false and true<true) or 
    66      328       not(true>true and false) or 
    67      335       not(false and true<=true) or 
    68      342       not(true>=true and false) or 
    69      349       not(false and true in [false]) or 
    70      357       (true or true=false) or 
    71      363       (false=true or true) or 
    72      369       (true or true<>true) or 
    73      375       (true<>true or true) or 
    74      381       (true or false<true) or 
    75      387       (true<false or true) or 
    76      393       (true or false>true) or 
    77      399       (true>false or true) or 
    78      405       (true or true<=false) or 
    79      411       (false>=true or true) or 
    80      417       (true or true in [false]) then 
    81      425       indicator:=indicator+[boolean,relational]; 
    82      430  
    83      430    if indicator=[] then 
    84      434       writeln(' PASS...6.7.1-1') 
    85      440    else 
    86      443       begin 
    87      443       if boolean in indicator then 
    88      448          writeln(' FAIL...6.7.1-1, PRECEDENCE - BOOLEAN OPERATORS'); 
    89      456       if adding in indicator then 
    90      461          writeln(' FAIL...6.7.1-1, PRECEDENCE - ADDING OPERATORS'); 
    91      469       if multiplying in indicator then 
    92      474          writeln(' FAIL...6.7.1-1, PRECEDENCE - MULTIPLYING OPERATORS'); 
    93      482       if relational in indicator then 
    94      487          writeln(' FAIL...6.7.1-1, PRECEDENCE - RELATIONAL OPERATORS') 
    95      493       end 
    96      495 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-1

program complete

Compiling and running t6p7p1d10

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-10, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the set-constructor can denote all values 
     4      -32    allowed by the canonic set-type to which it belongs. } 
     5      -32 {  This test is intended to trap implementations which 'fold' their 
     6      -32    character set for the set of char implementation.  Implementations 
     7      -32    whose 'set of char' is incomplete also fail. } 
     8      -32 {V3.1: New test. } 
     9      -32  
    10      -32 program t6p7p1d10(output); 
    11      -32 type 
    12      -32    CharSet     = set of char; 
    13      -32 var 
    14      -32    Cseta,Csetb : CharSet; 
    15      -32    cha,chb     : char; 
    16      -32    error       : boolean; 
    17      -32  
    18      -32    function MinChar:char; 
    19      -32    { Returns least value in type char [see 6.4.2.2(d)] } 
    20      -32    begin MinChar:=chr(0) end; 
    21       10  
    22       10    function MaxChar:char; 
    23       10    { Should return largest value in type char, processor-dependent } 
    24       10    var Zero,Space:integer; 
    25      -40    begin 
    26       10       { These values MUST be in char; even alphabet not guaranteed. } 
    27       10       Zero:=ord('0'); Space:=ord(' '); 
    28       18       if      (Zero= 48) and (Space= 32) then 
    29       26          { ISO, ASCII }         MaxChar:=chr(127) 
    30       28       else if (Zero=240) and (Space= 64) then 
    31       39          { EBCDIC }             MaxChar:=chr(255) 
    32       41       else if (Zero= 27) and (Space= 45) then 
    33       52          { CDC}                 MaxChar:=chr(63) 
    34       54       else begin 
    35       57          { unknown, users should modify to suit } 
    36       57          MaxChar:=chr(0); 
    37       61          writeln(' UNKNOWN CHARACTER SET - TEST INVALIDATED') 
    38       67       end 
    39       69    end; 
    40       70  
    41       70 begin 
    42       70    error:=false; 
    43       75    { Try all pair combinations } 
    44       75    for cha:=MinChar to pred(MaxChar) do begin 
    45       92       for chb:=succ(cha) to MaxChar do begin 
    46      108          Cseta:=[cha]; Csetb:=[chb]; 
    47      118          error:=error or (cha in Csetb) or (chb in Cseta) or 
    48      129                     not ((cha in Cseta) and (chb in Csetb)) 
    49      138       end; 
    50      154    end; 
    51      166    if not error then 
    52      169       writeln(' PASS...6.7.1-10') 
    53      175    else 
    54      178       writeln(' FAIL...6.7.1-10') 
    55      184 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-10

program complete

Compiling and running t6p7p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the member designator x..y, where x>y, 
     4      -32    denotes no members. } 
     5      -32 {V3.1: Constant null set added. } 
     6      -32  
     7      -32 program t6p7p1d2(output); 
     8      -32 var 
     9      -32    x,y :integer; 
    10      -32 begin 
    11        3    x:=2; 
    12        7    y:=1; 
    13        9    if ([x..y]=[]) and ([127..0]=[]) then 
    14       19       writeln(' PASS...6.7.1-2') 
    15       25    else 
    16       28       writeln(' FAIL...6.7.1-2') 
    17       34 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-2

program complete

Compiling and running t6p7p1d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test examines valid productions of set-constructors. } 
     4      -32 {  There is no restriction in the Pascal Standard on the use of 
     5      -32    expressions as factors in a set-constructor (provided that they 
     6      -32    yield legal set elements). This test checks 5 such productions. } 
     7      -32 {V3.1: New test from BNI. } 
     8      -32  
     9      -32 program t6p7p1d6(output); 
    10      -32 const 
    11      -32    three=3; 
    12      -32 type 
    13      -32    colour=(blue,green,red,yellow); 
    14      -32 var 
    15      -32    n,c:integer; 
    16      -32    p1,p2:^integer; 
    17      -32 begin 
    18        3    n:=2; 
    19        7    c:=0; 
    20        9    new(p1); p1^:=5; 
    21       16    new(p2); p2^:=7; 
    22       23    if [0..7]=[0*1..2*three+1] then 
    23       35          c:=c+1; 
    24       39    if [0..3,2..4]=[0..4] then 
    25       43          c:=c+1; 
    26       47    if [1,2,n,succ(n),1]=[1..3] then 
    27       58          c:=c+1; 
    28       62    if [green,yellow,blue..red]=[blue..yellow] then 
    29       66          c:=c+1; 
    30       70    if [p1^..p2^]=[5,6,7] then 
    31       80          c:=c+1; 
    32       84    if c=5 then writeln(' PASS...6.7.1-6') 
    33       94           else writeln(' FAIL...6.7.1-6') 
    34      103 end. 
colour     unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-6

program complete

Compiling and running t6p7p1d7

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-7, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the set-constructor can denote both packed and 
     4      -32    unpacked set types in the appropriate contexts. } 
     5      -32 {V3.1: New test. } 
     6      -32  
     7      -32 program t6p7p1d7(output); 
     8      -32 type 
     9      -32    ET      = (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P); 
    10      -32    IT      = 0..15; 
    11      -32 var 
    12      -32    enormal :        set of ET; 
    13      -32    epakked : packed set of ET; 
    14      -32    cnormal :        set of char; 
    15      -32    cpakked : packed set of char; 
    16      -32    inormal :        set of IT; 
    17      -32    ipakked : packed set of IT; 
    18      -32 begin 
    19        3    enormal := []; epakked := []; 
    20       11    cnormal := []; cpakked := []; 
    21       17    inormal := []; ipakked := []; 
    22       23    enormal := [D,C..H,N]; 
    23       26    epakked := [D,C..H,N]; 
    24       29    cnormal := ['D','C'..'H','N']; 
    25       32    cpakked := ['D','C'..'H','N']; 
    26       35    inormal := [3,2..6,13]; 
    27       38    ipakked := [3,2..6,13]; 
    28       41    if (enormal=[C..N]-[I..M]) and (epakked=[C..N]-[I..M]) and 
    29       52       (cnormal=['C'..'N']-['I'..'M']) and 
    30       58       (cpakked=['C'..'N']-['I'..'M']) and 
    31       64       (inormal=[2..13]-[7..12]) and (inormal=[2..13]-[7..12]) 
    32       75    then 
    33       77       writeln(' PASS...6.7.1-7') 
    34       83    else 
    35       86       writeln(' FAIL...6.7.1-7') 
    36       92 end. 
E          unreferenced
B          unreferenced
A          unreferenced
P          unreferenced
O          unreferenced
L          unreferenced
K          unreferenced
J          unreferenced
G          unreferenced
F          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-7

program complete

Compiling and running t6p7p1d8

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-8, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the set-constructor can denote all values 
     4      -32    allowed by the canonic set-type to which it belongs. } 
     5      -32 {  This test employs sets of types which are not subranges. } 
     6      -32 {V3.1: New test. } 
     7      -32  
     8      -32 program t6p7p1d8(output); 
     9      -32 type 
    10      -32    ET       = (A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P); 
    11      -32    esetType = set of ET; 
    12      -32    erayType = array[ET] of boolean; 
    13      -32    csetType = set of char; 
    14      -32    crayType = array[char] of boolean; 
    15      -32    bsetType = set of Boolean; 
    16      -32    brayType = array[boolean] of boolean; 
    17      -32 var 
    18      -32    Ev, Eadd   : ET; 
    19      -32    Cv, Cadd   : char; 
    20      -32    Bv, Badd   : boolean; 
    21      -32    Eset : esetType; 
    22      -32    Eray : erayType; 
    23      -32    Cset : csetType; 
    24      -32    Cray : crayType; 
    25      -32    Bset : bsetType; 
    26      -32    Bray : brayType; 
    27      -32    Eended, Cended, Bended, error : boolean; 
    28      -32  
    29      -32 function MinChar:char; 
    30      -32 { Returns least value in type char [see 6.4.2.2(d)] } 
    31      -32 begin MinChar:=chr(0) end; 
    32       10  
    33       10 function MaxChar:char; 
    34       10 { Should return largest value in type char, processor-dependent } 
    35       10 var Zero,Space:integer; 
    36      -40 begin 
    37       10    { These values MUST  be in char; even alphabet not guaranteed. } 
    38       10    Zero:=ord('0'); Space:=ord(' '); 
    39       18    if      (Zero= 48) and (Space= 32) then 
    40       26       { ISO, ASCII }         MaxChar:=chr(127) 
    41       28    else if (Zero=240) and (Space= 64) then 
    42       39       { EBCDIC }             MaxChar:=chr(255) 
    43       41    else if (Zero= 27) and (Space= 45) then 
    44       52       { CDC }                MaxChar:=chr(63) 
    45       54    else begin 
    46       57       { unknown, users should modify to suit } 
    47       57       MaxChar:=chr(0); 
    48       61       writeln(' UNKNOWN CHARACTER SET - TEST INVALIDATED') 
    49       67    end 
    50       69 end; 
    51       70  
    52       70    procedure Echeck; { deliberately tests obfuscated text allowed } 
    53       70    var i:ET; 
    54      -36    begin 
    55       70       for i:=A to P do if Eray[i] then begin if not(i in Eset) then 
    56       98       error:=true end else if (i in Eset) then error:=true 
    57      107    end; 
    58      123  
    59      123    procedure Ccheck; 
    60      123    var i:char; 
    61      -33    begin 
    62      123       for i:=MinChar to MaxChar do if Cray[i] then begin 
    63      147       if not(i in Cset) then error:=true end else if(i in Cset) 
    64      161       then error:=true 
    65      162    end; 
    66      178  
    67      178    procedure Bcheck; 
    68      178    var i:boolean; 
    69      -33    begin 
    70      178       for i:=false to true do if Bray[i] then begin if not(i in Bset) 
    71      204       then error:=true end else if (i in Bset) then error:=true 
    72      215    end; 
    73      231  
    74      231    procedure Eperm; 
    75      231    begin 
    76      231       Eset := Eset + [Eadd]; 
    77      240       Eray[Eadd] := true; 
    78      248       if Eadd = P then Eended := true 
    79      252       else Eadd := succ(Eadd) 
    80      259    end; 
    81      262  
    82      262    procedure Cperm; 
    83      262    begin 
    84      262       Cset := Cset + [Cadd]; 
    85      271       Cray[Cadd] := true; 
    86      279       if Cadd = MaxChar then Cended := true 
    87      284       else Cadd := succ(Cadd) 
    88      291    end; 
    89      294  
    90      294    procedure Bperm; 
    91      294    begin 
    92      294       Bset := Bset + [Badd]; 
    93      303       Bray[Badd] := true; 
    94      311       if Badd = true then Bended := true 
    95      315       else Badd := succ(Badd) 
    96      322    end; 
    97      325  
    98      325 begin { of body of main program } 
    99      325    error:=false; 
   100      330    Eended := false; Bended := false; Cended := false; 
   101      339    Eadd := A;  Cadd := MinChar;  Badd := false; 
   102      349    Eset:=[]; for Ev:=A to P do Eray[Ev]:=false; 
   103      385    Echeck; 
   104      387    while not Eended do 
   105      390       begin Eperm; Echeck end; 
   106      395  
   107      395    Cset:=[]; for Cv:=MinChar to MaxChar do Cray[Cv]:=false; 
   108      433    Ccheck; 
   109      435    while not Cended do 
   110      438       begin Cperm; Ccheck end; 
   111      443  
   112      443    Bset:=[]; for Bv:=false to true do Bray[Bv]:=false; 
   113      479    Bcheck; 
   114      481    while not Bended do 
   115      484       begin Bperm; Bcheck end; 
   116      489  
   117      489    if not error then 
   118      492       writeln(' PASS...6.7.1-8') 
   119      498    else 
   120      501       writeln(' FAIL...6.7.1-8') 
   121      507 end. 
E          unreferenced
D          unreferenced
C          unreferenced
B          unreferenced
O          unreferenced
N          unreferenced
M          unreferenced
L          unreferenced
K          unreferenced
J          unreferenced
I          unreferenced
H          unreferenced
G          unreferenced
F          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-8

program complete

Compiling and running t6p7p1d9

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.1-9, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the set-constructor can denote all values 
     4      -32    allowed by the canonic set-type to which it belongs. } 
     5      -32 {  This test employs sets of types which are subranges. } 
     6      -32 {V3.1: New test. } 
     7      -32  
     8      -32 program t6p7p1d9(output); 
     9      -32 const 
    10      -32    LoOut=-10000; LoIn=0; HiIn=255; HiOut=+10000; 
    11      -32 type 
    12      -32    subset = LoOut..HiOut; 
    13      -32    subsubset = LoIn..HiIn; 
    14      -32    SsetType = set of subsubset; 
    15      -32 var 
    16      -32    Sset  : SsetType; 
    17      -32    i     : subset; 
    18      -32    error : boolean; 
    19      -32  
    20      -32 begin 
    21        3    error:=false; 
    22        8    Sset:=[LoIn..HiIn]; 
    23       11    for i:=LoOut to HiOut do 
    24       22       if (i<LoIn) or (i>HiIn) then 
    25       30          error:=error or (i in Sset) 
    26       34       else 
    27       38          error:=error or not(i in Sset); 
    28       57    if not error then 
    29       60       writeln(' PASS...6.7.1-9') 
    30       66    else 
    31       69       writeln(' FAIL...6.7.1-9') 
    32       75 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.1-9

program complete

Compiling and running t6p7p2p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the operation of the 
     4      -32    operators + - and *. } 
     5      -32 {V3.0: Write for FAIL elaborated. } 
     6      -32  
     7      -32 program t6p7p2p2d1(output); 
     8      -32 var 
     9      -32    i, x, y , counter : integer; 
    10      -32 begin 
    11        3    counter := 0; 
    12        7    for x := -10 to 10 do 
    13       18    begin 
    14       18       if (succ(x)=x+1) then 
    15       25          counter := counter+1; 
    16       29       if (pred(x) = x-1) then 
    17       36          counter := counter+1; 
    18       40       if (x*x=sqr(x)) then 
    19       47          counter:= counter+1 
    20       48    end; 
    21       61    if (counter=63) then 
    22       65       writeln(' PASS...6.7.2.2-1') 
    23       71    else 
    24       74       writeln(' FAIL...6.7.2.2-1') 
    25       80 end. 
y          unreferenced
i          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.2-1

program complete

Compiling and running t6p7p2p2d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.2-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that div and mod are implemented by the 
     4      -32    rule specified by the Pascal Standard. } 
     5      -32 {V3.1: Comment changed. } 
     6      -32  
     7      -32 program t6p7p2p2d2(output); 
     8      -32 var 
     9      -32    i, j, counter : integer; 
    10      -32 begin 
    11        3    counter:=0; 
    12        7    for i:=0 to 6 do 
    13       17       for j:=1 to 4 do 
    14       27          if ((i-j)<((i div j)*j)) and (((i div j)*j)<=i) then 
    15       45             counter:=counter+1; 
    16       69    for i:=0 to 6 do 
    17       79       for j:=1 to 4 do 
    18       89          if (i mod j)=(i-(i div j)*j) then 
    19      101             counter:=counter+1; 
    20      125    if counter=56 then 
    21      129       writeln(' PASS...6.7.2.2-2') 
    22      135    else 
    23      138       writeln(' FAIL...6.7.2.2-2') 
    24      144 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.2-2

program complete

Compiling and running t6p7p2p2d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.2-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that constant and variable operands for 
     4      -32    div and mod produce the same result, and that negative 
     5      -32    operands, where  permitted, are accepted. } 
     6      -32 {V3.1: Test revised to include div and mod by 5 and div by -5. } 
     7      -32  
     8      -32 program t6p7p2p2d3(output); 
     9      -32 var 
    10      -32    i, j, l, m,counter : integer; 
    11      -32 begin 
    12        3    counter := 0; 
    13        7    j:=2; 
    14        9  
    15        9    for i:= -10 to 10 do 
    16       20    begin 
    17       20       l:=i div j; 
    18       24       m:= i div 2; 
    19       28       if (l=m) then counter := counter+1; 
    20       36       l:=i mod j; 
    21       40       m:= i mod 2; 
    22       44       if (l=m) then counter := counter+1; 
    23       52       if (m >= 0) and (m < 2) and 
    24       59           ((m-i) div 2 * 2 = m-i) then counter := counter+1 
    25       73    end; 
    26       86  
    27       86    j:=-2; 
    28       89    for i:= -10 to 10 do 
    29      100    begin 
    30      100       l:=i div j; 
    31      104       m:= i div (-2); 
    32      109       if (l=m) then counter := counter+1 
    33      114    end; 
    34      127  
    35      127    j:=5; 
    36      129  
    37      129    for i:= -10 to 10 do 
    38      140    begin 
    39      140       l:=i div j; 
    40      144       m:= i div 5; 
    41      148       if (l=m) then counter := counter+1; 
    42      156       l:=i mod j; 
    43      160       m:= i mod 5; 
    44      164       if (l=m) then counter := counter+1; 
    45      172       if (m >= 0) and (m < 5) and 
    46      179           ((m-i) div 5 * 5 = m-i) then counter := counter+1 
    47      193    end; 
    48      206  
    49      206    j:=-5; 
    50      209    for i:= -10 to 10 do 
    51      220    begin 
    52      220       l:=i div j; 
    53      224       m:= i div (-5); 
    54      229       if (l=m) then counter := counter+1 
    55      234    end; 
    56      247  
    57      247    if counter=168 then 
    58      251       writeln(' PASS...6.7.2.2-3') 
    59      257    else 
    60      260       writeln(' FAIL...6.7.2.2-3') 
    61      266 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.2-3

program complete

Compiling and running t6p7p2p2d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.2-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that maxint satisfies the conditions laid 
     4      -32    down in the Pascal Standard. } 
     5      -32 {V3.0: Last relational test extended. Was previously 6.7.2.2-5. } 
     6      -32 {  Recoded to avoid compile-time range violation. } 
     7      -32  
     8      -32 program t6p7p2p2d4(output); 
     9      -32 var 
    10      -32    i, max : integer; 
    11      -32 begin 
    12        3    max:=-(-maxint); 
    13        9    i:=-maxint; 
    14       12    if odd(maxint) then 
    15       15       i:=(max-((max div 2)+1))*2 
    16       22    else 
    17       26       i:=(max-(max div 2))*2; 
    18       34    if (maxint-1<=i) and (i<=maxint) then 
    19       44       writeln(' PASS...6.7.2.2-4') 
    20       50    else 
    21       53       writeln(' FAIL...6.7.2.2-4') 
    22       59 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.2-4

program complete

Compiling and running t6p7p2p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the operation of the Boolean operators. } 
     4      -32 {V3.0: Writes revised. } 
     5      -32  
     6      -32 program t6p7p2p3d1(output); 
     7      -32 var 
     8      -32    a,b,c : boolean; 
     9      -32    counter : integer; 
    10      -32 begin 
    11        3    counter:=0; 
    12        7    a:=false; 
    13       10    b:=false; 
    14       13    { OR truth table } 
    15       13  
    16       13    if a or b then 
    17       17       writeln(' FAIL...6.7.2.3-1, OR OPERATOR(1)') 
    18       23    else 
    19       26    begin 
    20       26       b:=true; 
    21       29       if a or b then 
    22       33       begin 
    23       33          a:=true; 
    24       36          b:=false; 
    25       39          if a or b then 
    26       43          begin 
    27       43             b:=true; 
    28       46             if a or b then 
    29       50                counter:=counter+1 
    30       51             else 
    31       55                writeln(' FAIL...6.7.2.3-1, OR OPERATOR(2)') 
    32       61          end 
    33       63          else 
    34       64             writeln(' FAIL...6.7.2.3-1, OR OPERATOR(3)') 
    35       70       end 
    36       72       else 
    37       73          writeln(' FAIL...6.7.2.3-1, OR OPERATOR(4)') 
    38       79    end; 
    39       81  
    40       81    { AND truth table } 
    41       81    a:=false; 
    42       84    b:=false; 
    43       87    if a and b then 
    44       91       writeln(' FAIL...6.7.2.3-1, AND OPERATOR(1)') 
    45       97    else 
    46      100    begin 
    47      100       b:=true; 
    48      103       if a and b then 
    49      107          writeln(' FAIL...6.7.2.3-1, AND OPERATOR(2)') 
    50      113       else 
    51      116       begin 
    52      116          a:=true; 
    53      119          b:=false; 
    54      122          if a and b then 
    55      126             writeln(' FAIL...6.7.2.3-1, AND OPERATOR(3)') 
    56      132          else 
    57      135          begin 
    58      135             b:=true; 
    59      138             if a and b then 
    60      142                counter:=counter+1 
    61      143             else 
    62      147                writeln(' FAIL...6.7.2.3-1, AND OPERATOR(4)') 
    63      153          end 
    64      155       end 
    65      155    end; 
    66      155  
    67      155    { NOTE: NOT is sometimes badly implemented by wordwise 
    68      155            complementation, and for this reason the following 
    69      155            two tests may fail. } 
    70      155  
    71      155    if (not false)=true then 
    72      160       counter:=counter+1 
    73      161    else 
    74      165       writeln(' FAIL...6.7.2.3-1, NOT OPERATOR(1)'); 
    75      173  
    76      173    if (not true)=false then 
    77      178       counter:=counter+1 
    78      179    else 
    79      183       writeln(' FAIL...6.7.2.3-1, NOT OPERATOR(2)'); 
    80      191  
    81      191    c:=false; 
    82      194    a:=true; 
    83      197    b:=false; 
    84      200    if (a or b)=(b or a) then 
    85      208       counter:=counter+1 
    86      209    else 
    87      213       writeln(' FAIL...6.7.2.3-1, BOOLEAN COMMUTATION'); 
    88      221  
    89      221    if ((a or b)or c)=(a or(b or c)) then 
    90      233       counter:=counter+1 
    91      234    else 
    92      238       writeln(' FAIL...6.7.2.3-1, BOOLEAN ASSOCIATIVITY'); 
    93      246  
    94      246    if (a and(b or c))=((a and b)or(a and c)) then 
    95      260       counter:=counter+1 
    96      261    else 
    97      265       writeln(' FAIL...6.7.2.3-1, BOOLEAN DISTRIBUTION'); 
    98      273  
    99      273    if not(a or b)=((not a) and(not b)) then 
   100      284       counter:=counter+1 
   101      285    else 
   102      289       writeln(' FAIL...6.7.2.3-1, DEMORGAN1'); 
   103      297  
   104      297    if not(a and b)=((not a) or (not b)) then 
   105      308       counter:=counter+1 
   106      309    else 
   107      313       writeln(' FAIL...6.7.2.3-1, DEMORGAN2'); 
   108      321  
   109      321    if not(not a)= a then 
   110      327       counter:=counter+1 
   111      328    else 
   112      332       writeln(' FAIL...6.7.2.3-1, BOOLEAN INVERSION'); 
   113      340  
   114      340    if counter=10 then 
   115      344       writeln(' PASS...6.7.2.3-1') 
   116      350 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.3-1

program complete

Compiling and running t6p7p2p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the operation of set operators. } 
     4      -32 {V3.0: Write for PASS shortened. Was previously 6.7.2.4-2. } 
     5      -32  
     6      -32 program t6p7p2p4d1(output); 
     7      -32 var 
     8      -32    a,b,c,d:set of 0..10; 
     9      -32    counter:integer; 
    10      -32 begin 
    11        3    counter :=0; 
    12        7    a:=[0,2,4,6,8,10]; 
    13       10    b:=[1,3,5,7,9]; 
    14       13    c:=[]; 
    15       16    d:=[0,1,2,3,4,5,6,7,8,9,10]; 
    16       19    if (a+b=d) then 
    17       25       counter:=counter+1; 
    18       29    if (d-b=a) then 
    19       35       counter := counter+1; 
    20       39    if (d*b=b) then 
    21       45       counter:=counter+1; 
    22       49    if(d*b-b=c) then 
    23       57       counter:=counter+1; 
    24       61    if (a+b+c=d) then 
    25       69       counter:=counter+1; 
    26       73    if(counter=5) then 
    27       77       writeln(' PASS...6.7.2.4-1') 
    28       83    else 
    29       86       writeln(' FAIL...6.7.2.4-1') 
    30       92 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.4-1

program complete

Compiling and running t6p7p2p4d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.4-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the operations of set operators on sets 
     4      -32    of constants and variables. } 
     5      -32 {V3.0: Write for PASS shortened. Was previously 6.7.2.4-3. } 
     6      -32  
     7      -32 program t6p7p2p4d2(output); 
     8      -32 var 
     9      -32    a,b,c:set of 0..10; 
    10      -32    counter:integer; 
    11      -32 begin 
    12        3    counter:=0; 
    13        7    a:=[0,2,4,6,8,10]; 
    14       10    b:=[1,3,5,7,9]; 
    15       13    c:=[0,1,2,3,4,5,6,7,8,9,10]; 
    16       16    if(a+[]=a) then 
    17       22       counter:=counter+1; 
    18       26    if(a+b=c) then 
    19       32       counter:=counter+1; 
    20       36    if(a+[1,3,5,7,9]=c) then 
    21       42       counter:=counter+1; 
    22       46    if(a-[]=a) then 
    23       52       counter:=counter+1; 
    24       56    if(c-a=b) then 
    25       62       counter:=counter+1; 
    26       66    if(c-[0,2,4,6,8,10]=b) then 
    27       72       counter:=counter+1; 
    28       76    if(a*a=a) then 
    29       82       counter:=counter+1; 
    30       86    if(a*[]=[]) then 
    31       92       counter:=counter+1; 
    32       96    if(a*b=[]) then 
    33      102       counter:=counter+1; 
    34      106    if(a*c=a) then 
    35      112       counter:=counter+1; 
    36      116    if(counter=10) then 
    37      120       writeln(' PASS...6.7.2.4-2') 
    38      126    else 
    39      129       writeln(' FAIL...6.7.2.4-2,') 
    40      135 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.4-2

program complete

Compiling and running t6p7p2p4d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.4-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the set operators, with all patterns possible. } 
     4      -32 {  There are 64 (2 to 6th power) set values, so 4096 tests are made, 
     5      -32    which may be long (esp for bigger sets).  Another test provided 
     6      -32    in the suite is more economical, but less exhaustive. } 
     7      -32 {V3.1: New test. } 
     8      -32  
     9      -32 program t6p7p2p4d5(output); 
    10      -32 const 
    11      -32    Limit    = 64; { 2 to power of  cardinality of ET } 
    12      -32 type 
    13      -32    ET       = (A,B,C,D,E,F); 
    14      -32    esetType = set of ET; 
    15      -32    erayType = array[ET] of boolean; 
    16      -32    Range    = 1..Limit; 
    17      -32 var 
    18      -32    ev       : ET; 
    19      -32    s1,s2    : esetType; 
    20      -32    mt, 
    21      -32    vr,v1,v2 : erayType; 
    22      -32    r1,r2    : Range; 
    23      -32    error    : boolean; 
    24      -32  
    25      -32    procedure DoIt; 
    26      -32    { Do all operations and check them for this pair of values. } 
    27      -32  
    28      -32       procedure Union(var aa:erayType; ab,ac:erayType); 
    29      -56       var i:ET; 
    30      -60       begin 
    31        3          for i:=A to F do aa[i]:=ab[i] or ac[i] 
    32       40       end; 
    33       57  
    34       57       procedure Intersection(var aa:erayType; ab,ac:erayType); 
    35       57       var i:ET; 
    36      -60       begin 
    37       57          for i:=A to F do aa[i]:=ab[i] and ac[i] 
    38       94       end; 
    39      111  
    40      111       procedure Difference(var aa:erayType; ab,ac:erayType); 
    41      111       var i:ET; 
    42      -60       begin 
    43      111          for i:=A to F do aa[i]:=ab[i] and not ac[i] 
    44      148       end; 
    45      166  
    46      166       procedure Check(SetOfE:esetType; VecOfE:eraytype); 
    47      166       var i:ET; 
    48      -76       begin 
    49      166          for i:=A to F do 
    50      184             if VecOfE[i] then 
    51      191                begin 
    52      191                   if not (i in SetOfE) then error:=true 
    53      197                end 
    54      200             else 
    55      201                if (i in SetOfE) then error:=true 
    56      206       end; 
    57      222  
    58      222    begin { of body of DoIt } 
    59      222       Union       (vr,v1,v2); Check(s1+s2,vr); 
    60      236       Intersection(vr,v1,v2); Check(s1*s2,vr); 
    61      248       Difference  (vr,v1,v2); Check(s1-s2,vr) 
    62      259    end; 
    63      261  
    64      261    procedure Perm(k:Range; var sp:esetType; var vp:erayType); 
    65      261    { Produce all permutations of sp and vp according to k } 
    66      261    var x:ET; 
    67      -48    begin 
    68      261       { What member to alter } 
    69      261       x:=A; 
    70      266       while not odd(k) do begin 
    71      270          x:=succ(x); k:=k div 2 
    72      276       end; 
    73      281       { Alter the inclusion status of that value } 
    74      281       if x in sp then sp:=sp-[x] else sp:=sp+[x]; 
    75      306       vp[x]:=not vp[x] 
    76      316    end; 
    77      321  
    78      321 begin { of body of main program } 
    79      321    error:=false; 
    80      326    for ev:=A to F do mt[ev]:=false; 
    81      359  
    82      359    s1:=[]; v1:=mt; 
    83      365    r1:=1; 
    84      368    while r1 <> Limit do begin 
    85      372       s2:=[]; v2:=mt; 
    86      378       r2:=1; 
    87      381       while r2 <> Limit do begin 
    88      385          DoIt; 
    89      387          Perm(r2,s2,v2); 
    90      393          r2:=succ(r2) 
    91      395       end; 
    92      398       Perm(r1,s1,v1); 
    93      404       r1:=succ(r1) 
    94      406    end; 
    95      409  
    96      409    if not error then 
    97      412       writeln(' PASS...6.7.2.4-5') 
    98      418    else 
    99      421       writeln(' FAIL...6.7.2.4-5') 
   100      427 end. 
E          unreferenced
D          unreferenced
C          unreferenced
B          unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.4-5

program complete

Compiling and running t6p7p2p4d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.4-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the set operators, with random values. } 
     4      -32 {  This test is applied to a larger set size since optimization may 
     5      -32    have been employed for small sets of 6 elements; an exhaustive 
     6      -32    test is too expensive in computation time. } 
     7      -32 {V3.1: New test. } 
     8      -32  
     9      -32 program t6p7p2p4d6(output); 
    10      -32 const 
    11      -32    Big = 255; 
    12      -32    Reps = 100; 
    13      -32 type 
    14      -32    IT       = 0..Big; 
    15      -32    IsetType = set of IT; 
    16      -32    IvecType = array[IT] of boolean; 
    17      -32 var 
    18      -32    j        : IT; 
    19      -32    s1,s2    : IsetType; 
    20      -32    vr,v1,v2 : IvecType; 
    21      -32    count    : 1..Reps; 
    22      -32    ix       : integer; 
    23      -32    error    : boolean; 
    24      -32  
    25      -32    procedure DoIt; 
    26      -32  
    27      -32       procedure Union(var aa:IvecType; var ab,ac:IvecType); 
    28      -44       var i:IT; 
    29      -48       begin 
    30        3          for i:=0 to Big do aa[i]:=ab[i] or ac[i] 
    31       29       end; 
    32       45  
    33       45       procedure Intersection(var aa:IvecType; var ab,ac:IvecType); 
    34       45       var i:IT; 
    35      -48       begin 
    36       45          for i:=0 to Big do aa[i]:=ab[i] and ac[i] 
    37       71       end; 
    38       87  
    39       87       procedure Difference(var aa:IvecType; var ab,ac:IvecType); 
    40       87       var i:IT; 
    41      -48       begin 
    42       87          for i:=0 to Big do aa[i]:=ab[i] and not ac[i] 
    43      113       end; 
    44      130  
    45      130       procedure Check(SetOfI:IsetType; var VecOfI:IvecType); 
    46      130       var i:IT; 
    47      -72       begin 
    48      130          for i:=0 to Big do 
    49      143             if VecOfI[i] then 
    50      149                begin 
    51      149                   if not (i in SetOfI) then error:=true 
    52      154                end 
    53      157             else 
    54      158               if (i in SetOfI) then error:=true 
    55      162       end; 
    56      177  
    57      177    begin { of body of DoIt } 
    58      177       Union       (vr,v1,v2); Check(s1+s2,vr); 
    59      191       Intersection(vr,v1,v2); Check(s1*s2,vr); 
    60      203       Difference  (vr,v1,v2); Check(s1-s2,vr) 
    61      214    end; 
    62      216  
    63      216    procedure Zap(var ba:IsetType; var bb:IvecType); 
    64      216    var 
    65      -40       cc  :  IT; 
    66      -44  
    67      -44       function random  :  integer; 
    68      -32       var 
    69      -32          ni,k,r:integer; 
    70      -44       begin 
    71      216          k:=ix div 177; r:=ix-k*177; 
    72      228          ni:=-2*k+171*r; 
    73      237          if ni<0 then ix:=ni+30269 else ix:=ni; 
    74      248          random:=ix 
    75      248       end; 
    76      251  
    77      251    begin { of body of Zap } 
    78      251       cc:=random mod (Big+1); 
    79      261       ba:=ba+[cc]; bb[cc]:=true; { Add member, if not present } 
    80      276       cc:=random mod (Big+1); 
    81      284       ba:=ba-[cc]; bb[cc]:=false; { Remove member, if present } 
    82      299    end; 
    83      300  
    84      300 begin 
    85      300    ix:=12; error:=false; 
    86      307  
    87      307    s1:=[]; for j:=0 to Big do v1[j]:=false; 
    88      339    s2:=[]; for j:=0 to Big do v2[j]:=false; 
    89      371    for count:=1 to Reps do begin 
    90      382       DoIt; 
    91      384       Zap(s1,v1); Zap(s2,v2) 
    92      391    end; 
    93      403  
    94      403    if not error then 
    95      406       writeln(' PASS...6.7.2.4-6') 
    96      412    else 
    97      415       writeln(' FAIL...6.7.2.4-6') 
    98      421 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.4-6

program complete

Compiling and running t6p7p2p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program tests the use of relational operators on strings. } 
     4      -32 {  The operators denote lexicographic ordering according to the 
     5      -32    ordering of the character set. } 
     6      -32 {V3.0: Writes for FAIL revised. } 
     7      -32  
     8      -32 program t6p7p2p5d1(output); 
     9      -32 type 
    10      -32    string=packed array[1..7] of char; 
    11      -32 var 
    12      -32    string1, 
    13      -32    string2 : string; 
    14      -32 begin 
    15        3    string1:='STRING1'; 
    16        8    string2:='STRING2'; 
    17       11    if (string1<>string2) and (string1<string2) then 
    18       19    begin 
    19       19       string1:='STRINGS'; 
    20       22       string2:='STRINGZ'; 
    21       25       if (string1<>string2) and (string1<string2) then 
    22       33          writeln(' PASS...6.7.2.5-1') 
    23       39       else 
    24       42          writeln(' FAIL...6.7.2.5-1, STRING COMPARISON(1)') 
    25       48    end 
    26       50    else 
    27       51       writeln(' FAIL...6.7.2.5-1, STRING COMPARISON(2)') 
    28       57 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.5-1

program complete

Compiling and running t6p7p2p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the use of relational operators on sets. } 
     4      -32 {V3.0: Write for PASS shortened. } 
     5      -32  
     6      -32 program t6p7p2p5d2(output); 
     7      -32 var 
     8      -32    a,b:set of 0..10; 
     9      -32   c,counter:integer; 
    10      -32 begin 
    11        3    counter:=0; 
    12        7    a:=[0,1,2,3,4,5]; 
    13       10    b:=[2,3,4]; 
    14       13    c:=3; 
    15       15    if(a=[0,1,2,3,4,5]) then 
    16       19      counter:=counter+1; 
    17       23    if(a<>b) then 
    18       27       counter:=counter+1; 
    19       31    if(b<>[1,2,3,4,5]) then 
    20       35       counter:=counter+1; 
    21       39    if(b<=a) then 
    22       43       counter:=counter+1; 
    23       47    if(a>=b) then 
    24       51       counter:=counter+1; 
    25       55    if([0,1]<=a) then 
    26       59       counter:=counter+1; 
    27       63    if([1,2,3,4,5,6,10]>=b) then 
    28       67       counter:=counter+1; 
    29       71    if (1 in a) then 
    30       75       counter:=counter+1; 
    31       79    if(c in b) then 
    32       83       counter:=counter+1; 
    33       87    if(counter=9) then 
    34       91       writeln(' PASS...6.7.2.5-2') 
    35       97    else 
    36      100       writeln(' FAIL...6.7.2.5-2') 
    37      106 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.5-2

program complete

Compiling and running t6p7p2p5d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.7.2.5-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the use of relational operations on long 
     4      -32    strings. } 
     5      -32 {  No semantic problems but the long strings could cause 
     6      -32    implementation difficulties. } 
     7      -32 {V3.0: New test. } 
     8      -32  
     9      -32 program t6p7p2p5d3(output); 
    10      -32 var s1, s2: packed array [1..37] of char; 
    11      -32     i, j: integer; 
    12      -32 begin 
    13        3    s1 := 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'; 
    14        8    s2 := s1; 
    15       11    j := 0; 
    16       13    if s1 <> s2 then 
    17       17       j := j + 1; 
    18       21    for i := 37 downto 1 do 
    19       31       begin 
    20       31       s2[i] := 'B'; 
    21       39       if (s2 = s1) or (s2 < s1) then 
    22       47          j := j + 1 
    23       48       else if s2 <= s1 then 
    24       56          j := j + 1 
    25       57       else if s1 > s2 then 
    26       65          j := j + 1 
    27       66       end; 
    28       79    if s2 <> 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' then 
    29       83       j := j + 1; 
    30       87    if j = 0 then 
    31       91       writeln(' PASS...6.7.2.5-3') 
    32       97    else 
    33      100       writeln(' FAIL...6.7.2.5-3') 
    34      106 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.7.2.5-3

program complete

Compiling and running t6p8p2p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.2.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that all the empty clauses are permitted. } 
     4      -32 {  Note: Permissibility of an empty clause in the field list of 
     5      -32    a record is actually stated in section 6.4.3.3 of the Standard, 
     6      -32    and in a case statement in section 6.8.3.5. } 
     7      -32 {V3.1: Reals removed and empty else clause added. } 
     8      -32  
     9      -32 program t6p8p2p1d1(output); 
    10      -32 var 
    11      -32    b:boolean; 
    12      -32    r1:record 
    13      -32        x:char; 
    14      -32        a:integer;   {1} 
    15      -32        end; 
    16      -32    r2:record 
    17      -32        case b:boolean of 
    18      -32        true:( 
    19      -32              c:char; 
    20      -32              d:char;   {2} 
    21      -32             ); 
    22      -32        false: 
    23      -32              (e:integer);   {3} 
    24      -32        end; 
    25      -32 begin 
    26        3    b:=true; 
    27        8    if b then;   {4} 
    28       10    repeat 
    29       10       b:= not b;   {5} 
    30       14    until b; 
    31       16    while b do 
    32       18    begin 
    33       18       b:=not b;   {6} 
    34       22    end; 
    35       23    with r1 do;   {7} 
    36       23    if b then b:=true else;  {8} 
    37       29    r1.a:=1; 
    38       31    case r1.a of 
    39       33    0:  b:=false; 
    40       37    1:  ;   {9} 
    41       38    2:  b:=true;   {9} 
    42       42    end; 
    43       49    writeln(' PASS...6.8.2.1-1');   {10} 
    44       57 end. 
r2         unreferenced


Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.2.1-1

program complete

Compiling and running t6p8p2p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.2.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that non-local goto-statements are allowed. } 
     4      -32 {V3.0: Write for PASS shortened. } 
     5      -32  
     6      -32 program t6p8p2p4d1(output); 
     7      -32 label 1; 
     8      -32 var 
     9      -32    b:boolean; 
    10      -32 procedure q; 
    11      -32 begin 
    12        3    b:=true; 
    13        8    goto 1 
    14        9 end;   {of q} 
    15       10  
    16       10 begin   {main} 
    17       10    q; 
    18       14    b:=false; 
    19       17 1: if b then 
    20       19       writeln(' PASS...6.8.2.4-1') 
    21       25    else 
    22       28       writeln(' FAIL...6.8.2.4-1') 
    23       34 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.2.4-1

program complete

Compiling and running t6p8p3p10d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the implementation of the with-statement. } 
     4      -32 {V3.0: Writes revised. } 
     5      -32  
     6      -32 program t6p8p3p10d1(output); 
     7      -32 var 
     8      -32    r1:record 
     9      -32         a,b:integer 
    10      -32       end; 
    11      -32    r2:record 
    12      -32         c,d:integer 
    13      -32       end; 
    14      -32    r3:record 
    15      -32         e,f:integer 
    16      -32       end; 
    17      -32    counter:integer; 
    18      -32 begin 
    19        3    counter:=0; 
    20        7    with r1 do 
    21        7       a:=5; 
    22        9    with r1,r2,r3 do 
    23        9    begin 
    24        9       e:=a; 
    25       11       c:=a 
    26       11    end; 
    27       13    with r2 do 
    28       13       if c=5 then 
    29       17          counter:=counter+1; 
    30       21    if r2.c=5 then 
    31       25       counter:=counter+1; 
    32       29    if counter=2 then 
    33       33       writeln(' PASS...6.8.3.10-1') 
    34       39    else 
    35       42       writeln(' FAIL...6.8.3.10-1') 
    36       48 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-1

program complete

Compiling and running t6p8p3p10d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a field-identifier is correctly 
     4      -32    identified when a with-statement is invoked. } 
     5      -32 {V3.0: Writes revised. } 
     6      -32  
     7      -32 program t6p8p3p10d2(output); 
     8      -32 var 
     9      -32    r:record 
    10      -32        i,j:integer 
    11      -32      end; 
    12      -32    i:integer; 
    13      -32 begin 
    14        3    i:=10; 
    15        7    with r do 
    16        7       i:=5; 
    17        9    if (i=10) and (r.i=5) then 
    18       17       writeln(' PASS...6.8.3.10-2') 
    19       23    else 
    20       26       writeln(' FAIL...6.8.3.10-2') 
    21       32 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-2

program complete

Compiling and running t6p8p3p10d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the record-variable-list 
     4      -32    of a with-statement is evaluated in the correct order. } 
     5      -32 {V3.0: Write for PASS shortened. } 
     6      -32  
     7      -32 program t6p8p3p10d3(output); 
     8      -32 var 
     9      -32    r1:record 
    10      -32         i,j,k:integer 
    11      -32       end; 
    12      -32    r2:record 
    13      -32         i,j:integer 
    14      -32       end; 
    15      -32    r3:record 
    16      -32         i:integer 
    17      -32       end; 
    18      -32 begin 
    19        3    with r1 do 
    20        5    begin 
    21        5       i:=0; 
    22        7       j:=0; 
    23        9       k:=0 
    24        9    end; 
    25       11    with r2 do 
    26       11    begin 
    27       11       i:=0; 
    28       13       j:=0 
    29       13    end; 
    30       15    with r3 do 
    31       15       i:=0; 
    32       17    with r1,r2,r3 do 
    33       17    begin 
    34       17       i:=5; 
    35       19       j:=6; 
    36       21       k:=7 
    37       21    end; 
    38       23    if(r1.i=0) and (r1.j=0) and (r2.i=0) and (r1.k=7) 
    39       37       and (r2.j=6) and (r3.i=5) then 
    40       47       writeln(' PASS...6.8.3.10-3') 
    41       53    else 
    42       56       writeln(' FAIL...6.8.3.10-3') 
    43       62 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-3

program complete

Compiling and running t6p8p3p10d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the selection of a variable in the 
     4      -32    record-variable-list is performed before the component 
     5      -32    statement is executed. } 
     6      -32 {V3.0: Writes revised. } 
     7      -32  
     8      -32 program t6p8p3p10d4(output); 
     9      -32 var 
    10      -32    a:array[1..2] of record 
    11      -32                       i,j:integer 
    12      -32                     end; 
    13      -32    k:integer; 
    14      -32 begin 
    15        3    a[2].i:=5; 
    16       13    k:=1; 
    17       15    with a[k] do 
    18       21    begin 
    19       21       j:=1; 
    20       24       k:=2; 
    21       26       i:=2 
    22       28    end; 
    23       30    if (a[2].i=5) and (a[1].i=2) then 
    24       48       writeln(' PASS...6.8.3.10-4') 
    25       54    else 
    26       57       writeln(' FAIL...6.8.3.10-4') 
    27       63 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-4

program complete

Compiling and running t6p8p3p10d5

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-5, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the selection of a variable in the 
     4      -32    record-variable-list is performed before the component 
     5      -32    statement is executed. } 
     6      -32 {V3.0: Writes revised. } 
     7      -32  
     8      -32 program t6p8p3p10d5(output); 
     9      -32 type 
    10      -32    pointer = ^recordtype; 
    11      -32    recordtype = record 
    12      -32                   data:integer; 
    13      -32                   link:pointer 
    14      -32                 end; 
    15      -32 var 
    16      -32    counter:integer; 
    17      -32    p,q:pointer; 
    18      -32 begin 
    19        3    counter:=0; 
    20        7    new(p); 
    21       10    p^.data:=0; 
    22       14    new(q); 
    23       17    q^.data:=1; 
    24       21    q^.link:=nil; 
    25       27    p^.link:=q; 
    26       33    q:=p; 
    27       36    with q^ do 
    28       40    begin 
    29       40       q:=link; 
    30       44       if (data=0) and (q^.data=1) then 
    31       55          counter:=counter+1 
    32       56    end; 
    33       60    with p^ do 
    34       64    begin 
    35       64       p:=link; 
    36       68       { The first record now has no reference, so it could 
    37       68         be deleted prematurely. } 
    38       68       if (data=0) and (p^.data=1) then 
    39       79          counter:=counter+1 
    40       80    end; 
    41       84    if counter=2 then 
    42       88          writeln(' PASS...6.8.3.10-5') 
    43       94       else 
    44       97          writeln(' FAIL...6.8.3.10-5') 
    45      103 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-5

program complete

Compiling and running t6p8p3p10d6

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-6, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the order of evaluation of the 
     4      -32    record-variable-list in a with-statement is correctly 
     5      -32    implemented. } 
     6      -32 {V3.0: Writes revised. } 
     7      -32  
     8      -32 program t6p8p3p10d6(output); 
     9      -32 type 
    10      -32    pp = ^ptr; 
    11      -32    ptr = record 
    12      -32            i:integer; 
    13      -32            link:pp 
    14      -32          end; 
    15      -32 var 
    16      -32    p,q,r : pp; 
    17      -32 begin 
    18        3    new(p); 
    19        8    p^.i := 0; 
    20       12    new(q); 
    21       15    q^.i := 0; 
    22       19    p^.link := q; 
    23       25    new(r); 
    24       28    r^.i := 0; 
    25       32    r^.link := nil; 
    26       38    q^.link := r; 
    27       44    with p^, link^, link^ do 
    28       58       i:=5; 
    29       62    if ((r^.i=5) and (q^.i=0) and (p^.i=0)) then 
    30       80       writeln(' PASS...6.8.3.10-6') 
    31       86    else 
    32       89       writeln(' FAIL...6.8.3.10-6') 
    33       95 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-6

program complete

Compiling and running t6p8p3p10d8

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.10-8, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test contains a record-variable-list in which all the 
     4      -32    identifiers are identical. } 
     5      -32 {  The record-variable-list of a with-statement can contain twice or 
     6      -32    more times the same identifier - to denote a record , its homonymous 
     7      -32    field which is itself a record, etc. } 
     8      -32 {V3.1: New test from BNI. } 
     9      -32  
    10      -32 program t6p8p3p10d8(output); 
    11      -32 var 
    12      -32    i:integer; 
    13      -32    rec:record 
    14      -32           i:integer; 
    15      -32           rec:record 
    16      -32                  i:integer; 
    17      -32                  rec:record 
    18      -32                         i:integer; 
    19      -32                      end; 
    20      -32               end; 
    21      -32        end; 
    22      -32 begin 
    23        3    rec.i:=100; 
    24        7    with rec,rec do 
    25        7       begin 
    26        7          i:=20; 
    27        9          rec.i:=3; 
    28       11       end; 
    29       11    with rec,rec,rec do 
    30       11       begin 
    31       11          i:=rec.i+1; {Here 'i' has the same meaning as 'rec.i' , 
    32       15                       or as 'rec.i' in the previous 'with'} 
    33       15    end; 
    34       15    i:=rec.i+rec.rec.i+rec.rec.rec.i; 
    35       21    if i=124 
    36       22       then writeln(' PASS...6.8.3.10-8') 
    37       31       else writeln(' FAIL...6.8.3.10-8') 
    38       40 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.10-8

program complete

Compiling and running t6p8p3p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks a nested if-statement whose syntax is apparently 
     4      -32    ambiguous. } 
     5      -32 {V3.0: Comma inserted in header. 
     6      -32    Writes elaborated for FAIL } 
     7      -32  
     8      -32 program t6p8p3p4d1(output); 
     9      -32 const 
    10      -32    off=false; 
    11      -32 var 
    12      -32    b:boolean; 
    13      -32 begin 
    14        3    for b:=false to true do 
    15       18       begin 
    16       18       if b then 
    17       20          if off then 
    18       22             writeln(' FAIL...6.8.3.4-1, IF STATEMENT(1)') 
    19       28          else 
    20       31             begin 
    21       31             if not b then 
    22       34                 writeln(' FAIL...6.8.3.4-1, IF STATEMENT(2)') 
    23       40             else 
    24       43                writeln(' PASS...6.8.3.4-1') 
    25       49             end 
    26       51       end 
    27       51 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.4-1

program complete

Compiling and running t6p8p3p5d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.5-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a minimal case-statement is accepted. } 
     4      -32 {V3.0: Write shortened. } 
     5      -32  
     6      -32 program t6p8p3p5d1(output); 
     7      -32 var 
     8      -32    i:integer; 
     9      -32 begin 
    10        3    i:=1; 
    11        7    case i of 
    12        9    1: 
    13        9    end; 
    14       15    writeln(' PASS...6.8.3.5-1') 
    15       21 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.5-1

program complete

Compiling and running t6p8p3p5d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.5-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a processor will handle a case-statement 
     4      -32    where the case-constants are not close together. } 
     5      -32 {  Most processors issue a jump table for a case, regardless 
     6      -32    of its structure. It is easy to optimise case-statements 
     7      -32    to generate conditional statements if this is more compact. 
     8      -32    Processors which employ simple strategies for implementation of 
     9      -32    case-statements may fail this test. } 
    10      -32 {V3.0: Comment changed. } 
    11      -32  
    12      -32 program t6p8p3p5d2(output); 
    13      -32 var 
    14      -32    i,j:integer; 
    15      -32 begin 
    16        3    i:=-1000; 
    17        8    for j:=1 to 2 do 
    18       18       case i of 
    19       20       -1000: i:=-i; 
    20       24       1000: writeln(' PASS...6.8.3.5-2') 
    21       30       end 
    22     2038 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.5-2

program complete

Compiling and running t6p8p3p7d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.7-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a repeat-statement is executed at 
     4      -32    least once. } 
     5      -32 {V3.0: Writes revised. } 
     6      -32  
     7      -32 program t6p8p3p7d1(output); 
     8      -32 var 
     9      -32    counter:integer; 
    10      -32    bool:boolean; 
    11      -32 begin 
    12        3    bool:=true; 
    13        8    counter:=0; 
    14       10    repeat 
    15       10       counter:=counter+1 
    16       11    until bool; 
    17       16    if(counter=1) then 
    18       20       writeln(' PASS...6.8.3.7-1') 
    19       26    else 
    20       29       writeln(' FAIL...6.8.3.7-1') 
    21       35 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.7-1

program complete

Compiling and running t6p8p3p7d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.7-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a repeat-statement containing no statements 
     4      -32    is executed until the expression is true. } 
     5      -32 {V3.0: Writes revised. } 
     6      -32  
     7      -32 program t6p8p3p7d2(output); 
     8      -32 var 
     9      -32   a:integer; 
    10      -32  
    11      -32 function bool : boolean; 
    12      -32 begin 
    13        3    a:=a+1; 
    14        9    bool := a>=5 
    15       10 end; 
    16       15  
    17       15 begin 
    18       15    a:=0; 
    19       19    repeat 
    20       19    until bool; 
    21       22    if (a=5) then 
    22       26       writeln(' PASS...6.8.3.7-2') 
    23       32    else 
    24       35       writeln(' FAIL...6.8.3.7-2') 
    25       41 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.7-2

program complete

Compiling and running t6p8p3p7d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.7-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that an apparently infinite loop is allowed 
     4      -32    by the processor. } 
     5      -32 {  Some processors may detect the loop as being infinite. } 
     6      -32 {V3.0: Comment and writes revised. } 
     7      -32  
     8      -32 program t6p8p3p7d3(output); 
     9      -32 label 
    10      -32    100; 
    11      -32 const 
    12      -32    eternity = false; 
    13      -32 var 
    14      -32    i:integer; 
    15      -32 begin 
    16        3    i:=0; 
    17        7    repeat 
    18        7       i:=i+1; 
    19       11       if (i>50) then 
    20       15          goto 100 
    21       16    until eternity; 
    22       18 100: 
    23       18    writeln(' PASS...6.8.3.7-3') 
    24       24 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.7-3

program complete

Compiling and running t6p8p3p8d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.8-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a while-statement is not entered 
     4      -32    if the initial value of the Boolean expression is false. } 
     5      -32 {V3.0: Comment and writes revised. } 
     6      -32  
     7      -32 program t6p8p3p8d1(output); 
     8      -32 var 
     9      -32    bool:boolean; 
    10      -32    counter:integer; 
    11      -32 begin 
    12        3    counter:=0; 
    13        7    bool:=false; 
    14       10    while bool do 
    15       12    begin 
    16       12       counter:=counter+1; 
    17       16       bool:=false 
    18       16    end; 
    19       20    if (counter=0) then 
    20       24       writeln(' PASS...6.8.3.8-1') 
    21       30    else 
    22       33       writeln(' FAIL...6.8.3.8-1') 
    23       39 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.8-1

program complete

Compiling and running t6p8p3p8d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.8-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the processor will accept a while-statement 
     4      -32    containing no statements. } 
     5      -32 {V3.0: Writes revised. } 
     6      -32  
     7      -32 program t6p8p3p8d2(output); 
     8      -32 var 
     9      -32    a:integer; 
    10      -32  
    11      -32 function bool:boolean; 
    12      -32 begin 
    13        3    a:=a+1; 
    14        9    bool:= (a>=5) 
    15       12 end; 
    16       15  
    17       15 begin 
    18       15    a:=0; 
    19       19    while not bool do ; 
    20       24    if (a=5) then 
    21       28       writeln(' PASS...6.8.3.8-2') 
    22       34    else 
    23       37       writeln(' FAIL...6.8.3.8-2') 
    24       43 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.8-2

program complete

Compiling and running t6p8p3p9d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.9-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that assignment follows the evaluation 
     4      -32    of both expressions in a for-statement. } 
     5      -32 {V3.1: Comment changed. } 
     6      -32  
     7      -32 program t6p8p3p9d1(output); 
     8      -32 var 
     9      -32    i,j:integer; 
    10      -32 begin 
    11        3    i:=1; 
    12        7    j:=0; 
    13        9    for i:= (i+1) to (i+10) do 
    14       23       j:=j+1; 
    15       37    if j=10 then 
    16       41       writeln(' PASS...6.8.3.9-1') 
    17       47    else 
    18       50       writeln(' FAIL...6.8.3.9-1') 
    19       56 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.9-1

program complete

Compiling and running t6p8p3p9d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.9-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that extreme values may be used in a 
     4      -32    for-statement. } 
     5      -32 {  This will break a simply implemented for loop. 
     6      -32    In some processors the succ test may fail at the last increment 
     7      -32    and cause wraparound(overflow) - leading to an infinite loop. } 
     8      -32 {V3.0: Writes revised. Was previously 6.8.3.9-7. } 
     9      -32  
    10      -32 program t6p8p3p9d2(output); 
    11      -32 var 
    12      -32    i,j:integer; 
    13      -32 begin 
    14        3    j:=0; 
    15        7    for i:= (maxint-10) to maxint do 
    16       19      j:=j+1; 
    17       33    for i:= (-maxint+10) downto -maxint do 
    18       47       j:=j+1; 
    19       61    if j = 22 then 
    20       65       writeln(' PASS...6.8.3.9-2') 
    21       71    else 
    22       74       writeln(' FAIL...6.8.3.9-2') 
    23       80 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.9-2

program complete

Compiling and running t6p8p3p9d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.9-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that a control-variable of a for-statement 
     4      -32    is not undefined if the for-statement is left via a 
     5      -32    goto-statement. } 
     6      -32 {V3.0: Writes revised. Was previously 6.8.3.9-8. } 
     7      -32  
     8      -32 program t6p8p3p9d3(output); 
     9      -32 label 100; 
    10      -32 var 
    11      -32    i,j:integer; 
    12      -32 begin 
    13        3    j:=1; 
    14        7    for i:=1 to 10 do 
    15       17    begin 
    16       17       if (j=5) then 
    17       21          goto 100; 
    18       22       j:=j+1 
    19       23    end; 
    20       36 100: 
    21       36    if i=j then 
    22       40       writeln(' PASS...6.8.3.9-3') 
    23       46    else 
    24       49       writeln(' FAIL...6.8.3.9-3') 
    25       55 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.9-3

program complete

Compiling and running t6p8p3p9d4

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.8.3.9-4, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the order of evaluation of the limit 
     4      -32    expressions in a for-statement. } 
     5      -32 {V3.0: Comment and writes revised. Was previously 6.8.3.9-15. } 
     6      -32  
     7      -32 program t6p8p3p9d4(output); 
     8      -32 var 
     9      -32    i,j,k:integer; 
    10      -32  
    11      -32 function f(var k:integer) : integer; 
    12      -36 begin 
    13        3    k:=k+1; 
    14       11    f:=k 
    15       11 end; 
    16       15  
    17       15 begin 
    18       15    k:=0; 
    19       19    j:=0; 
    20       21    for i:=f(k) to f(k)+10 do 
    21       37       j:=j+1; 
    22       51    if (j=12) then 
    23       55       writeln(' PASS...6.8.3.9-4') 
    24       61    else 
    25       64       writeln(' FAIL...6.8.3.9-4') 
    26       70 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.8.3.9-4

program complete

Compiling and running t6p9d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program attempts to perform recursive I/O using a 
     4      -32    different file for the second I/O action. } 
     5      -32 {V3.1: Program parameters removed. } 
     6      -32  
     7      -32 program t6p9d1(output); 
     8      -32 var 
     9      -32    f1,f2:text; 
    10      -32    b,c  :integer; 
    11      -32  
    12      -32 function a(i:integer):integer; 
    13      -36 begin 
    14        3    writeln(f2,i); 
    15       11    a:=i 
    16       11 end; 
    17       14  
    18       14 begin 
    19       14    rewrite(f1); 
    20       18    rewrite(f2); 
    21       20    writeln(f1,a(1)); 
    22       28    reset(f1); 
    23       30    reset(f2); 
    24       32    readln(f1,b); 
    25       39    readln(f2,c); 
    26       46    if (b=1) and (c=1) then 
    27       54       writeln(' PASS...6.9-1') 
    28       60    else 
    29       63       writeln(' FAIL...6.9-1') 
    30       69 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9-1

program complete

Compiling and running t6p9d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program attempts to perform recursive I/O using the 
     4      -32    same file for the second I/O action. } 
     5      -32 {V3.1: Program parameter removed and reclassified from QUALITY. } 
     6      -32  
     7      -32 program t6p9d2(output); 
     8      -32 var 
     9      -32    f:text; 
    10      -32    b,c:integer; 
    11      -32  
    12      -32 function a(i:integer):integer; 
    13      -36 begin 
    14        3    writeln(f,i); 
    15       11    a:=i 
    16       11 end; 
    17       14  
    18       14 begin 
    19       14    rewrite(f); 
    20       18    writeln(f,a(1)); 
    21       26    reset(f); 
    22       28    readln(f,b); 
    23       35    readln(f,c); 
    24       42    if (b=1) and (c=1) then 
    25       50       writeln(' PASS...6.9-2') 
    26       56    else 
    27       59       writeln(' FAIL...6.9-2') 
    28       65 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9-2

program complete

Compiling and running t6p9p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a single read statement with many 
     4      -32    variables is equivalent to many read statements containing 
     5      -32    one variable each. } 
     6      -32 {V3.1: Program parameter removed. } 
     7      -32  
     8      -32 program t6p9p1d1(output); 
     9      -32 var 
    10      -32    f:text; 
    11      -32    a,b,c,d,e:integer; 
    12      -32    a1,b1,c1,d1,e1:integer; 
    13      -32 begin 
    14        3    rewrite(f); 
    15        7    writeln(f,' 1 2 3 4 5 '); 
    16       14    reset(f); 
    17       16    read(f,a,b,c,d,e); 
    18       38    reset(f); 
    19       40    read(f,a1); 
    20       46    read(f,b1); 
    21       52    read(f,c1); 
    22       58    read(f,d1); 
    23       64    read(f,e1); 
    24       70    if(a=a1) and (b=b1) and (c=c1) and (d=d1) and (e=e1) then 
    25       90       writeln(' PASS...6.9.1-1') 
    26       96    else 
    27       99       writeln(' FAIL...6.9.1-1') 
    28      105 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.1-1

program complete

Compiling and running t6p9p1d2

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.1-2, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a read of a character variable is 
     4      -32    equivalent to correctly positioning the buffer variable. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p9p1d2(output); 
     8      -32 var 
     9      -32    f:text; 
    10      -32    a,b,a1,b1:char; 
    11      -32 begin 
    12        3    rewrite(f); 
    13        7    writeln(f,'ABC'); 
    14       14    reset(f); 
    15       16    read(f,a); 
    16       22    read(f,b); 
    17       28    reset(f); 
    18       30    a1:=f^; get(f); 
    19       38    b1:=f^; get(f); 
    20       46    if(a=a1) and (b=b1) then 
    21       54       writeln(' PASS...6.9.1-2') 
    22       60    else 
    23       63       writeln(' FAIL...6.9.1-2') 
    24       69 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.1-2

program complete

Compiling and running t6p9p1d3

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.1-3, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that integers and reals are read correctly 
     4      -32    from a file. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p9p1d3(output); 
     8      -32 var 
     9      -32    f:text; 
    10      -32    i,j:integer; 
    11      -32    r,s:real; 
    12      -32 begin 
    13        3  
    14        3    { Internal (compile-time conversions) and run-time conversions 
    15        3      should result in the same value, hence justifying the 
    16        3      equality tests on real numbers. } 
    17        3  
    18        3    rewrite(f); 
    19        7    writeln(f,' 123 123.456 5 123E6 '); 
    20       14    reset(f); 
    21       16    read(f,i,r,j,s); 
    22       30    if(i=123)and(r=123.456) and (j=5) and (s=123E6) then 
    23       46       writeln(' PASS...6.9.1-3') 
    24       52    else 
    25       55       if (i=123) and (j=5) then 
    26       63          writeln(' FAIL...6.9.1-3, READ REAL CONVERSIONS') 
    27       69       else 
    28       72          writeln(' FAIL...6.9.1-3, READ PROCEDURE') 
    29       78 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.1-3

program complete

Compiling and running t6p9p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that readln is correctly implemented. } 
     4      -32 {V3.1: Program parameter removed. } 
     5      -32  
     6      -32 program t6p9p2d1(output); 
     7      -32 var 
     8      -32    f:text; 
     9      -32    a,b,c:char; 
    10      -32    counter:integer; 
    11      -32 begin 
    12        3    counter:=0; 
    13        7    rewrite(f); 
    14        9    writeln(f,'ABC'); 
    15       16    writeln(f,'DE'); 
    16       23    reset(f); 
    17       25    readln(f,a,b,c); 
    18       40    read(f,a); 
    19       46    if (a='D') then counter:=counter+1; 
    20       54    reset(f); 
    21       56    read(f,a,b,c); 
    22       70    readln(f); 
    23       73    read(f,a); 
    24       79    if(a='D') then counter:=counter+1; 
    25       87    reset(f); 
    26       89    read(f,a); 
    27       95    while not eoln(f) do get(f); 
    28      102    get(f); 
    29      104    if (f^='D') then counter:=counter+1; 
    30      115    if (counter=3) then 
    31      119       writeln(' PASS...6.9.2-1') 
    32      125    else 
    33      128       writeln(' FAIL...6.9.2-1') 
    34      134 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.2-1

program complete

Compiling and running t6p9p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a write that does not specify the file 
     4      -32    always writes on the default file at the program level, not 
     5      -32    any local variable with the same identifier. } 
     6      -32 {  The processor fails if the program does not print PASS. } 
     7      -32 {V3.0: Comment extended and writes revised. Was previously 6.9.4-15. } 
     8      -32  
     9      -32 program t6p9p3d1(output); 
    10      -32    procedure p; 
    11      -32    var 
    12      -32       output:text; 
    13      -34    begin 
    14        3       rewrite(output); 
    15        7       writeln(' PASS...6.9.3-1') 
    16       13    end; 
    17       16 begin 
    18       16    p 
    19       18 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3-1

program complete

Compiling and running t6p9p3p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that a write procedure with many parameters 
     4      -32    is equivalent to many write procedures with one parameter 
     5      -32    each. } 
     6      -32 {V3.1: Program parameter removed. } 
     7      -32  
     8      -32 program t6p9p3p1d1(output); 
     9      -32 var 
    10      -32    f:text; 
    11      -32    a,b,c,d,e:char; 
    12      -32    a1,b1,c1,d1,e1:char; 
    13      -32    counter:integer; 
    14      -32 begin 
    15        3    counter:=0; 
    16        7    rewrite(f); 
    17        9    a:='A'; 
    18       12    b:='B'; 
    19       15    c:='C'; 
    20       18    d:='D'; 
    21       21    e:='E'; 
    22       24    write(f,a,b,c,d,e); 
    23       41    writeln(f); 
    24       44    reset(f); 
    25       46    read(f,a1,b1,c1,d1,e1); 
    26       68    if (a=a1) and (b=b1) and (c=c1) and (d=d1) and (e=e1) then 
    27       88       counter:=counter+1; 
    28       92    rewrite(f); 
    29       94    write(f,a); 
    30       99    write(f,b); 
    31      104    write(f,c); 
    32      109    write(f,d); 
    33      114    write(f,e); 
    34      119    writeln(f); 
    35      122    reset(f); 
    36      124    read(f,a1,b1,c1,d1,e1); 
    37      146    if(a1=a) and (b1=b) and (c1=c) and (d1=d) and (e1=e) then 
    38      166       counter:=counter+1; 
    39      170    if (counter=2) then 
    40      174       writeln(' PASS...6.9.3.1-1') 
    41      180    else 
    42      183       writeln(' FAIL...6.9.3.1-1') 
    43      189 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.1-1

program complete

Compiling and running t6p9p3p3d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.3-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that the default value for the field width 
     4      -32    of a char-type is one. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p9p3p3d1(output); 
     8      -32 const 
     9      -32    whatitshouldbe = 'A  BC'; 
    10      -32 var 
    11      -32    f:text; 
    12      -32    a,b,c:char; 
    13      -32    whatwasread:packed array[1..5] of char; 
    14      -32    i:integer; 
    15      -32 begin 
    16        3    rewrite(f); 
    17        7    a:='A'; 
    18       10    b:='B'; 
    19       13    c:='C'; 
    20       16    write(f,a,b:3,c); 
    21       27    writeln(f); 
    22       30    reset(f); 
    23       32    for i := 1 to 5 do 
    24       42       read(f,whatwasread[i]); 
    25       62    if (whatwasread=whatitshouldbe) then 
    26       66       writeln(' PASS...6.9.3.3-1') 
    27       72    else 
    28       75       write(' FAIL...6.9.3.3-1') 
    29       81 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.3-1

program complete

Compiling and running t6p9p3p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks the implementation of integer output. } 
     4      -32 {V3.1: Program parameter removed. } 
     5      -32  
     6      -32 program t6p9p3p4d1(output); 
     7      -32 var 
     8      -32    f:text; 
     9      -32    b:packed array [1..26] of char; 
    10      -32    i:integer; 
    11      -32 begin 
    12        3    rewrite(f); 
    13        7    write(f,0:3,1:3,-1:3,10:3,99:3,100:3,-100:3,1111:3); 
    14       35    writeln(f); 
    15       38    reset(f); 
    16       40    for i:=1 to 26 do 
    17       50       read(f,b[i]); 
    18       70    if (b='  0  1 -1 10 99100-1001111') then 
    19       74       writeln(' PASS...6.9.3.4-1') 
    20       80    else 
    21       83       writeln(' FAIL...6.9.3.4-1') 
    22       89 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.4-1

program complete

Compiling and running t6p9p3p5p1d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.5.1-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the floating point representation 
     4      -32    of real numbers is correctly written to textfiles. } 
     5      -32 {V3.1: Rewritten to avoid dependence upon number of digits in 
     6      -32    exponent. } 
     7      -32  
     8      -32 program t6p9p3p5p1d1(output); 
     9      -32 var 
    10      -32    f: text; 
    11      -32    i: 6 .. 20; 
    12      -32    fail: boolean; 
    13      -32    n: integer; 
    14      -32 begin 
    15        3    rewrite(f); 
    16        7    for i := 6 to 20 do 
    17       18       writeln(f, 0.0:i, 1.0:i); 
    18       38    reset(f); 
    19       40    fail := false; 
    20       43    for i := 6 to 20 do 
    21       54       begin 
    22       54       if f^ <> ' ' then 
    23       61          fail := true; 
    24       64       read(f, n); 
    25       70       if (n <> 0) and (f^ <> '.') then 
    26       81          fail := true; 
    27       84       get(f); 
    28       86       read(f, n); 
    29       92       if (n <> 0) or ((f^ <> 'E') and (f^ <> 'e')) then 
    30      110          fail := true; 
    31      113       get(f); 
    32      115       if (f^ <> '+') and (f^ <> '-') then 
    33      129          fail := true; 
    34      132       read(f, n); 
    35      138       if (n <> 0) or (f^ <> ' ') then 
    36      149          fail := true; 
    37      152       read(f, n); 
    38      158       if (n <> 1) and (f^ <> '.') then 
    39      169          fail := true; 
    40      172       get(f); 
    41      174       read(f, n); 
    42      180       if (n <> 0) or ((f^ <> 'E') and (f^ <> 'e')) then 
    43      198          fail := true; 
    44      201       get(f); 
    45      203       if (f^ <> '+') and (f^ <> '-') then 
    46      217          fail := true; 
    47      220       read(f, n); 
    48      226       if (n <> 0) or not eoln(f) then 
    49      234          fail := true; 
    50      237       end; 
    51      248    if fail then 
    52      250       writeln(' FAIL...6.9.3.5.1-1') 
    53      256    else 
    54      259       writeln(' PASS...6.9.3.5.1-1') 
    55      265 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.5.1-1

program complete

Compiling and running t6p9p3p5p2d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.5.2-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks that the fixed point representation of 
     4      -32    real numbers is correctly written to textfiles. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p9p3p5p2d1(output); 
     8      -32 var 
     9      -32    f : text; 
    10      -32    b : packed array[1..23] of char; 
    11      -32    i : integer; 
    12      -32 begin 
    13        3    rewrite(f); 
    14        7    write(f,0.0:4:1,1.0:6:1,-1.0:6:1,123.456:7:3); 
    15       26    writeln(f); 
    16       29    reset(f); 
    17       31    for i:=1 to 23 do 
    18       41       read(f,b[i]); 
    19       61    if b=' 0.0   1.0  -1.0123.456' then 
    20       65       writeln(' PASS...6.9.3.5.2-1') 
    21       71    else 
    22       74       writeln(' FAIL...6.9.3.5.2-1') 
    23       80 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.5.2-1

program complete

Compiling and running t6p9p3p7d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.3.7-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This test checks that strings are correctly written onto 
     4      -32    a textfile. } 
     5      -32 {V3.1: Program parameter removed. } 
     6      -32  
     7      -32 program t6p9p3p7d1(output); 
     8      -32 var 
     9      -32    f:text; 
    10      -32    i,j,k,counter:integer; 
    11      -32    c:char; 
    12      -32 begin 
    13        3    rewrite(f); 
    14        7    counter:=0; 
    15        9    for i := 1 to 10 do 
    16       19       begin 
    17       19       write(f,'AAAAA':i,'B':1); 
    18       28       writeln(f) 
    19       29       end; 
    20       41    write(f,'BBBBB','C':1); 
    21       50    writeln(f); 
    22       53    reset(f); 
    23       55    for i:=1 to 10 do 
    24       65    begin 
    25       65       for j:=6 to i do begin 
    26       75          read(f,c); 
    27       81          if (c=' ') then 
    28       85             counter:=counter+1 
    29       86       end; 
    30       99       if (i>5) then k:=5 else k:=i; 
    31      108       for j:=1 to k do 
    32      118       begin 
    33      118          read(f,c); 
    34      124          if(c='A') then 
    35      128             counter:=counter+1 
    36      129       end; 
    37      142       read(f,c); 
    38      148       if (c='B') then 
    39      152          counter:=counter+1; 
    40      156       readln(f) 
    41      157    end; 
    42      169    for i:=1 to 5 do 
    43      179    begin 
    44      179       read(f,c); 
    45      185       if (c='B') then 
    46      189          counter:=counter+1 
    47      190    end; 
    48      203    read(f,c); 
    49      209    if (c='C') then 
    50      213       counter:=counter+1; 
    51      217    if(counter=71) then 
    52      221       writeln(' PASS...6.9.3.7-1') 
    53      227    else 
    54      230       writeln(' FAIL...6.9.3.7-1') 
    55      236 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.3.7-1

program complete

Compiling and running t6p9p4d1

P5 Pascal compiler vs. 1.4.x
Pascal-P5 complies with the requirements of level 0 of ISO/IEC 7185.


     1      -32 {TEST 6.9.4-1, CLASS=CONFORMANCE} 
     2      -32  
     3      -32 {: This program checks the implementation of procedure writeln. } 
     4      -32 {V3.1: Program parameter removed. } 
     5      -32  
     6      -32 program t6p9p4d1(output); 
     7      -32 var 
     8      -32    f:text; 
     9      -32    a,b:packed array[1..10] of char; 
    10      -32    i:integer; 
    11      -32 begin 
    12        3    rewrite(f); 
    13        7    writeln(f,1:5,'ABCDE'); 
    14       17    write(f,1:5,'ABCDE'); 
    15       26    writeln(f); 
    16       29    reset(f); 
    17       31    for i:=1 to 10 do 
    18       41       read(f,a[i]); 
    19       61    readln(f); 
    20       64    for i:=1 to 10 do 
    21       74       read(f,b[i]); 
    22       94    if (a=b) then 
    23       98       writeln(' PASS...6.9.4-1') 
    24      104    else 
    25      107       writeln(' FAIL...6.9.4-1') 
    26      113 end. 

Errors in program: 0
P5 Pascal interpreter vs. 1.4.x

Assembling/loading program
Running program

 PASS...6.9.4-1

program complete
